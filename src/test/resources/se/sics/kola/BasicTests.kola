package se.sics.kola;

import junit.framework.Assert;

/*
 * This file is part of the Kompics component model runtime.
 *
 * Copyright (C) 2009 Swedish Institute of Computer Science (SICS) 
 * Copyright (C) 2009 Royal Institute of Technology (KTH)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

public enum ETest {
    VAL1(1),
    VAL2(2);
    
    private final int v;
    
    ETest(int v) {
        this.v = v;
    }
    
    public int getV() {
        return this.v;
    }
}

public @interface ATest {
    String value();
}

public interface BasicParentIf {
    public int testMethod2();
}

public interface BasicIf extends BasicParentIf {
    public int testMethod1();
}

public abstract class BasicParent implements BasicIf {
    final int field = 28;
    static final int sfield = 24;
    
    @Override
    public int testMethod1() {
        return 13;
    }
    
    @ATest("Bla")
    protected static int testMethod3() {
        return 23;
    }
}

/**
 *
 * @author lkroll
 */
public class BasicTests extends BasicParent {
    
    private final int field = 42;
    private final int[] array = new int[] {1, 2, 3};
    
    public boolean test() {
        System.out.println("Running language feature tests...");
        integerArithmeticsTest();
        bitwiseTests();
        booleanTests();
        floatingArithmeticsTests();
        assignmentTests();
        relationTests();
        accessTests();
        invocationTests();
        return true;
    }
    
    private void integerArithmeticsTest() {
        System.out.println("Running integer arithmetic tests...");
        int x, y, z;
        x = 5;
        y = -x;
        Assert.assertEquals(-5, y);
        x = 5;
        y = 3;
        z = x+y;
        Assert.assertEquals(8, z);
        x = 5;
        y = 3;
        z = x-y;
        Assert.assertEquals(2, z);
        x = 5;
        y = 3;
        z = x*y;
        Assert.assertEquals(15, z);
        x = 6;
        y = 3;
        z = x/y;
        Assert.assertEquals(2, z);
        x = 5;
        y = 3;
        z = x%y;
        Assert.assertEquals(2, z);
        x = 5;
        y = x++;
        Assert.assertEquals(6, x);
        Assert.assertEquals(5, y);
        x = 5;
        y = x--;
        Assert.assertEquals(4, x);
        Assert.assertEquals(5, y);
        x = 5;
        y = ++x;
        Assert.assertEquals(6, x);
        Assert.assertEquals(6, y);
        x = 5;
        y = --x;
        Assert.assertEquals(4, x);
        Assert.assertEquals(4, y);
        long l = 1;
        x = 1;
        Assert.assertEquals((long)x, l);
    }
    
    private void bitwiseTests() {
        System.out.println("Running bitwise tests...");
        int x, y, z;
        x = 8;
        y = x >>> 1;
        Assert.assertEquals(4, y);
        x = 8;
        y = x << 1;
        Assert.assertEquals(16, y);
        x = -1;
        y = x >> 1;
        Assert.assertEquals(-1, y);
        x = -1;
        y = ~x;
        Assert.assertEquals(0, y);
        x = 8;
        y = 4;
        z = x | y;
        Assert.assertEquals(12, z);
        x = 8;
        y = 12;
        z = x & y;
        Assert.assertEquals(8, z);
        x = 8;
        y = 12;
        z = x ^ y;
        Assert.assertEquals(4, z);
    }
    
    private void booleanTests() {
        System.out.println("Running boolean tests...");
        boolean x, y, z;
        x = true;
        y = !x;
        Assert.assertEquals(false, y);
        x = true;
        y = false;
        z = x && y;
        Assert.assertEquals(false, z);
        x = true;
        y = false;
        z = x || y;
        Assert.assertEquals(true, z);
        x = true;
        y = false;
        z = x ? y : true;
        Assert.assertEquals(false, z);
    }
    
    private void floatingArithmeticsTests() {
        System.out.println("Running floating arithmetic tests...");
        double x, y, z;
        x = 5.0;
        y = -x;
        Assert.assertEquals(-5.0, y);
        x = 5.0;
        y = 3.0;
        z = x+y;
        Assert.assertEquals(8.0, z);
        x = 5.0;
        y = 3.0;
        z = x-y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = 3.0;
        z = x*y;
        Assert.assertEquals(15.0, z);
        x = 6.0;
        y = 3.0;
        z = x/y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = 3.0;
        z = x%y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = x++;
        Assert.assertEquals(6.0, x);
        Assert.assertEquals(5.0, y);
        x = 5.0;
        y = x--;
        Assert.assertEquals(4.0, x);
        Assert.assertEquals(5.0, y);
        x = 5.0;
        y = ++x;
        Assert.assertEquals(6.0, x);
        Assert.assertEquals(6.0, y);
        x = 5.0;
        y = --x;
        Assert.assertEquals(4.0, x);
        Assert.assertEquals(4.0, y);
        float f = 1.0f;
        x = 1.0;
        Assert.assertEquals(x, (double)f);
    }
    
    private void assignmentTests() {
        System.out.println("Running assignment tests...");
        int x, y;
        x = 1;
        y = x;
        Assert.assertEquals(1, y);
        x = 1;
        y = 2;
        y += x;
        Assert.assertEquals(3, y);
        x = 1;
        y = 2;
        y -= x;
        Assert.assertEquals(1, y);
        x = 3;
        y = 5;
        y *= x;
        Assert.assertEquals(15, y);
        x = 3;
        y = 6;
        y /= x;
        Assert.assertEquals(2, y);
        x = 3;
        y = 5;
        y %= x;
        Assert.assertEquals(2, y);
        x = 1;
        y = 8;
        y >>>= x;
        Assert.assertEquals(4, y);
        x = 1;
        y = 8;
        y <<= x;
        Assert.assertEquals(16, y);
        x = 1;
        y = -1;
        y >>= x;
        Assert.assertEquals(-1, y);
        x = 12;
        y = 8;
        y &= x;
        Assert.assertEquals(8, y);
        x = 12;
        y = 8;
        y ^= x;
        Assert.assertEquals(4, y);
        x = 4;
        y = 8;
        y |= x;
        Assert.assertEquals(12, y);
    }
    
    private void relationTests() {
        System.out.println("Running relation tests...");
        int x, y;
        boolean z;
        x = 1;
        y = 2;
        z = x == y;
        Assert.assertEquals(false, z);
        z = x != y;
        Assert.assertEquals(true, z);
        z = x < y;
        Assert.assertEquals(true, z);
        z = x > y;
        Assert.assertEquals(false, z);
        z = x <= y;
        Assert.assertEquals(true, z);
        z = x >= y;
        Assert.assertEquals(false, z);
        z = this instanceof Object;
        Assert.assertEquals(true, z);
    }
    
    private void accessTests() {
        System.out.println("Running access tests...");
        Assert.assertEquals(42, field);
        Assert.assertEquals(42, this.field);
        Assert.assertEquals(28, super.field);
        Assert.assertEquals(24, BasicParent.sfield);
        Assert.assertEquals(42, BasicTests.this.field);
        Assert.assertEquals(42, (BasicTests.this).field);
        Class v = void.class;
        Assert.assertEquals("java.lang.Void", v.getName());
        Assert.assertEquals(3, array[2]);
        Object o = this;
        BasicTests t = (BasicTests) o;
        int[] ia = new int[1];
        ia[0] = 12;
        Assert.assertEquals(12, ia[0]);
        Assert.assertEquals(1, ETest.VAL1.getV());
        Assert.assertEquals(2, ETest.VAL2.getV());
    }
    
    private void invocationTests() {
        System.out.println("Running invocation tests...");
        Assert.assertEquals(19, testMethod2());
        Assert.assertEquals(17, testMethod1());
        Assert.assertEquals(17, this.testMethod1());
        Assert.assertEquals(17, BasicTests.this.testMethod1());
        Assert.assertEquals(13, super.testMethod1());
        Assert.assertEquals(23, BasicParent.testMethod3());
        Assert.assertEquals(13, BasicTests.super.testMethod1());
    }
    
    @Override
    public int testMethod1() {
        return 17;
    }
    
    @Override
    public int testMethod2() {
        return 19;
    }
}
