/*
 * This file is part of the Kompics component model runtime.
 *
 * Copyright (C) 2009 Swedish Institute of Computer Science (SICS) 
 * Copyright (C) 2009 Royal Institute of Technology (KTH)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package se.sics.kola;

import junit.framework.Assert;

public enum ETest {

    VAL1(1),
    VAL2(2);

    private final int v;

    ETest(int v) {
        this.v = v;
    }

    public int getV() {
        return this.v;
    }
}

public @interface ATest {

    String value();
}

public interface BasicParentIf {

    public int testMethod2();
}

public interface BasicIf extends BasicParentIf {

    public int testMethod1();
}

public abstract class BasicParent implements BasicIf {

    final int field = 28;
    static final int sfield = 24;

    @Override
    public int testMethod1() {
        return 13;
    }

    @ATest("Bla")
    protected static int testMethod3() {
        return 23;
    }
}

class TestException extends Exception {

}

class TestException2 extends Exception {

}

class TestClose implements AutoCloseable {

    boolean closed = false;

    @Override
    public void close() {
        closed = true;
    }

}

class TestClose2 implements AutoCloseable {

    boolean closed = false;

    @Override
    public void close() {
        closed = true;
    }

}

class GenericTest<X extends TestClose> {
    
    private X c;
    
    public void setClose(X c) {
        this.c = c;
    }
    
    public X getClose() {
        return c;
    }
}

/**
 *
 * @author lkroll
 */
public class BasicTests extends BasicParent {

    private final int field = 42;
    private final char c = '\106';
    private final int[] array = new int[]{1, 2, 3};

    public boolean test() {
        System.out.println("Running language feature tests...");
        integerArithmeticsTest();
        bitwiseTests();
        booleanTests();
        floatingArithmeticsTests();
        assignmentTests();
        relationTests();
        accessTests();
        invocationTests();
        statementTests();
        return true;
    }

    private void integerArithmeticsTest() {
        System.out.println("Running integer arithmetic tests...");
        int x, y, z;
        x = 5;
        y = -x;
        Assert.assertEquals(-5, y);
        x = 5;
        y = 3;
        z = x + y;
        Assert.assertEquals(8, z);
        x = 5;
        y = 3;
        z = x - y;
        Assert.assertEquals(2, z);
        x = 5;
        y = 3;
        z = x * y;
        Assert.assertEquals(15, z);
        x = 6;
        y = 3;
        z = x / y;
        Assert.assertEquals(2, z);
        x = 5;
        y = 3;
        z = x % y;
        Assert.assertEquals(2, z);
        x = 5;
        y = x++;
        Assert.assertEquals(6, x);
        Assert.assertEquals(5, y);
        x = 5;
        y = x--;
        Assert.assertEquals(4, x);
        Assert.assertEquals(5, y);
        x = 5;
        y = ++x;
        Assert.assertEquals(6, x);
        Assert.assertEquals(6, y);
        x = 5;
        y = --x;
        Assert.assertEquals(4, x);
        Assert.assertEquals(4, y);
        long l = 1;
        x = 1;
        Assert.assertEquals((long) x, l);
    }

    private void bitwiseTests() {
        System.out.println("Running bitwise tests...");
        int x, y, z;
        x = 8;
        y = x >>> 1;
        Assert.assertEquals(4, y);
        x = 8;
        y = x << 1;
        Assert.assertEquals(16, y);
        x = -1;
        y = x >> 1;
        Assert.assertEquals(-1, y);
        x = -1;
        y = ~x;
        Assert.assertEquals(0, y);
        x = 8;
        y = 4;
        z = x | y;
        Assert.assertEquals(12, z);
        x = 8;
        y = 12;
        z = x & y;
        Assert.assertEquals(8, z);
        x = 8;
        y = 12;
        z = x ^ y;
        Assert.assertEquals(4, z);
    }

    private void booleanTests() {
        System.out.println("Running boolean tests...");
        boolean x, y, z;
        x = true;
        y = !x;
        Assert.assertEquals(false, y);
        x = true;
        y = false;
        z = x && y;
        Assert.assertEquals(false, z);
        x = true;
        y = false;
        z = x || y;
        Assert.assertEquals(true, z);
        x = true;
        y = false;
        z = x ? y : true;
        Assert.assertEquals(false, z);
    }

    private void floatingArithmeticsTests() {
        System.out.println("Running floating arithmetic tests...");
        double x, y, z;
        x = 5.0;
        y = -x;
        Assert.assertEquals(-5.0, y);
        x = 5.0;
        y = 3.0;
        z = x + y;
        Assert.assertEquals(8.0, z);
        x = 5.0;
        y = 3.0;
        z = x - y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = 3.0;
        z = x * y;
        Assert.assertEquals(15.0, z);
        x = 6.0;
        y = 3.0;
        z = x / y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = 3.0;
        z = x % y;
        Assert.assertEquals(2.0, z);
        x = 5.0;
        y = x++;
        Assert.assertEquals(6.0, x);
        Assert.assertEquals(5.0, y);
        x = 5.0;
        y = x--;
        Assert.assertEquals(4.0, x);
        Assert.assertEquals(5.0, y);
        x = 5.0;
        y = ++x;
        Assert.assertEquals(6.0, x);
        Assert.assertEquals(6.0, y);
        x = 5.0;
        y = --x;
        Assert.assertEquals(4.0, x);
        Assert.assertEquals(4.0, y);
        float f = 1.0f;
        x = 1.0;
        Assert.assertEquals(x, (double) f);
    }

    private void assignmentTests() {
        System.out.println("Running assignment tests...");
        int x, y;
        x = 1;
        y = x;
        Assert.assertEquals(1, y);
        x = 1;
        y = 2;
        y += x;
        Assert.assertEquals(3, y);
        x = 1;
        y = 2;
        y -= x;
        Assert.assertEquals(1, y);
        x = 3;
        y = 5;
        y *= x;
        Assert.assertEquals(15, y);
        x = 3;
        y = 6;
        y /= x;
        Assert.assertEquals(2, y);
        x = 3;
        y = 5;
        y %= x;
        Assert.assertEquals(2, y);
        x = 1;
        y = 8;
        y >>>= x;
        Assert.assertEquals(4, y);
        x = 1;
        y = 8;
        y <<= x;
        Assert.assertEquals(16, y);
        x = 1;
        y = -1;
        y >>= x;
        Assert.assertEquals(-1, y);
        x = 12;
        y = 8;
        y &= x;
        Assert.assertEquals(8, y);
        x = 12;
        y = 8;
        y ^= x;
        Assert.assertEquals(4, y);
        x = 4;
        y = 8;
        y |= x;
        Assert.assertEquals(12, y);
    }

    private void relationTests() {
        System.out.println("Running relation tests...");
        int x, y;
        boolean z;
        x = 1;
        y = 2;
        z = x == y;
        Assert.assertEquals(false, z);
        z = x != y;
        Assert.assertEquals(true, z);
        z = x < y;
        Assert.assertEquals(true, z);
        z = x > y;
        Assert.assertEquals(false, z);
        z = x <= y;
        Assert.assertEquals(true, z);
        z = x >= y;
        Assert.assertEquals(false, z);
        z = this instanceof Object;
        Assert.assertEquals(true, z);
    }

    private void accessTests() {
        System.out.println("Running access tests...");
        Assert.assertEquals('F', c);
        Assert.assertEquals(42, field);
        Assert.assertEquals(42, this.field);
        Assert.assertEquals(28, super.field);
        Assert.assertEquals(24, BasicParent.sfield);
        Assert.assertEquals(42, BasicTests.this.field);
        Assert.assertEquals(42, (BasicTests.this).field);
        Class v = void.class;
        Assert.assertEquals("java.lang.Void", v.getName());
        Assert.assertEquals(3, array[2]);
        Object o = this;
        BasicTests t = (BasicTests) o;
        int[] ia = new int[1];
        ia[0] = 12;
        Assert.assertEquals(12, ia[0]);
        Assert.assertEquals(1, ETest.VAL1.getV());
        Assert.assertEquals(2, ETest.VAL2.getV());
        TestClose tc = new TestClose();
        tc.close();
        Assert.assertTrue("TestClose wasn't closed!", tc.closed);
        GenericTest<TestClose> gt = new GenericTest<>();
        gt.setClose(tc);
        TestClose tc2 = gt.getClose();
        Assert.assertEquals(tc, tc2);
    }

    private void invocationTests() {
        System.out.println("Running invocation tests...");
        Assert.assertEquals(19, testMethod2());
        Assert.assertEquals(17, testMethod1());
        Assert.assertEquals(17, this.testMethod1());
        Assert.assertEquals(17, BasicTests.this.testMethod1());
        Assert.assertEquals(13, super.testMethod1());
        Assert.assertEquals(23, BasicParent.testMethod3());
        Assert.assertEquals(13, BasicTests.super.testMethod1());
    }

    private void statementTests() {
        System.out.println("Running statement tests...");
        if (false) {
            Assert.fail("No single if");
        }

        if (false) {
            Assert.fail("No if else");
        } else {
            Assert.assertTrue("If else", true);
        }

        int i = 0;

        if (i == 0) {
            Assert.assertTrue("If else", true);
        } else if (i == 1) {
            Assert.fail("No else if");
        } else {
            Assert.fail("No if else");
        }

        while (i < 10) {
            i++;
        }
        Assert.assertEquals(10, i);
        for (int j = 0; j < 10; j++) {
            i++;
        }
        Assert.assertEquals(20, i);

        i = 10;
        do {
            i++;
        } while (i < 10);
        Assert.assertEquals(11, i);

        i = 0;
top:
        {
            for (int j = 0; j < 10; j++) {
inner:
                {
                    for (int k = 0; k < 10; k++) {
                        if (k == 5) {
                            break top;
                        }
                        i++;
                    }
                }
            }
        }
        Assert.assertEquals(5, i);
        i = 0;
        for (int k = 0; k < 10; k++) {
            if (k > 5) {
                continue;
            }
            i++;
        }
        Assert.assertEquals(6, i);
        i = 0;
        int[] iar = new int[]{0, 1, 2, 3, 4};
        for (int j : iar) {
            Assert.assertEquals(j, i);
            i++;
        }
        Assert.assertEquals(5, i);
        ETest et = ETest.VAL2;
        boolean switched = false;
        switch (et) {
            case VAL1:
                Assert.fail("Wrong switch case");
                break;
            case VAL2:
            default:
                switched = true;
        }
        Assert.assertTrue("Didn't switch", switched);
        synchronized (this) {
            Assert.assertTrue("Don't really see how check for a synchronized existence...check manually?", true);
        }
        boolean tried = false, caught = false, finallied = false;
        try {
            tried = true;
            throw new TestException();
        } catch (TestException ex) {
            caught = true;
        }
        Assert.assertTrue("Didn't try", tried);
        Assert.assertTrue("Didn't catch", caught);
        Assert.assertFalse("Finallied??!?", finallied);

        tried = false;
        caught = false;
        try {
            tried = true;
            if (tried) {
                throw new TestException();
            } else {
                throw new TestException2();
            }
        } catch (TestException | TestException2 ex) {
            caught = true;
        } finally {
            finallied = true;
        }
        Assert.assertTrue("Didn't try", tried);
        Assert.assertTrue("Didn't catch", caught);
        Assert.assertTrue("Didn't finally?", finallied);
        // TODO try with resources
        TestClose tc1ext;
        TestClose2 tc2ext;
        try (TestClose tc1 = new TestClose();
                TestClose2 tc2 = new TestClose2()) {
            tc1ext = tc1;
            tc2ext = tc2;
        }
        Assert.assertTrue("#1 wasn't closed", tc1ext.closed);
        Assert.assertTrue("#2 wasn't closed", tc2ext.closed);
    }

    @Override
    public int testMethod1() {
        return 17;
    }

    @Override
    public int testMethod2() {
        return 19;
    }
}
