/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.analysis;

import se.sics.kola.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAJavaCompilationUnit(AJavaCompilationUnit node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseAFloatingPointLiteral(AFloatingPointLiteral node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseACharacterLiteral(ACharacterLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseANullLiteral(ANullLiteral node);
    void caseAPrimitiveType(APrimitiveType node);
    void caseAReferenceType(AReferenceType node);
    void caseAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node);
    void caseAReferenceTypeNoArguments(AReferenceTypeNoArguments node);
    void caseANumericPrimitiveType(ANumericPrimitiveType node);
    void caseABooleanPrimitiveType(ABooleanPrimitiveType node);
    void caseAIntegralNumericType(AIntegralNumericType node);
    void caseAFloatingNumericType(AFloatingNumericType node);
    void caseAByteIntegralType(AByteIntegralType node);
    void caseAShortIntegralType(AShortIntegralType node);
    void caseAIntIntegralType(AIntIntegralType node);
    void caseALongIntegralType(ALongIntegralType node);
    void caseACharIntegralType(ACharIntegralType node);
    void caseAFloatFloatingPointType(AFloatFloatingPointType node);
    void caseADoubleFloatingPointType(ADoubleFloatingPointType node);
    void caseAClassReferenceType(AClassReferenceType node);
    void caseAArrayReferenceType(AArrayReferenceType node);
    void caseAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node);
    void caseAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node);
    void caseAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node);
    void caseAClassOrInterfaceType(AClassOrInterfaceType node);
    void caseAClassType(AClassType node);
    void caseAInterfaceType(AInterfaceType node);
    void caseATypeDeclSpecifier(ATypeDeclSpecifier node);
    void caseATypeDeclSpecifierTail(ATypeDeclSpecifierTail node);
    void caseAClassArrayType(AClassArrayType node);
    void caseAPrimitiveArrayType(APrimitiveArrayType node);
    void caseAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node);
    void caseAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node);
    void caseATypeParameter(ATypeParameter node);
    void caseATypeBound(ATypeBound node);
    void caseAListAdditionalBoundList(AListAdditionalBoundList node);
    void caseABoundAdditionalBoundList(ABoundAdditionalBoundList node);
    void caseAAdditionalBound(AAdditionalBound node);
    void caseAGtTypeArguments(AGtTypeArguments node);
    void caseAShrTypeArguments(AShrTypeArguments node);
    void caseAUshrTypeArguments(AUshrTypeArguments node);
    void caseATypeArgumentList(ATypeArgumentList node);
    void caseATypeArgumentListHead(ATypeArgumentListHead node);
    void caseAReferenceTypeArgument(AReferenceTypeArgument node);
    void caseAWildcardTypeArgument(AWildcardTypeArgument node);
    void caseAWildcard(AWildcard node);
    void caseAExtendsWildcardBounds(AExtendsWildcardBounds node);
    void caseASuperWildcardBounds(ASuperWildcardBounds node);
    void caseAName(AName node);
    void caseANameTail(ANameTail node);
    void caseACompilationUnit(ACompilationUnit node);
    void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node);
    void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node);
    void caseADeclarationTypeDeclarations(ADeclarationTypeDeclarations node);
    void caseADeclarationsTypeDeclarations(ADeclarationsTypeDeclarations node);
    void caseAPackageDeclaration(APackageDeclaration node);
    void caseASingleImportDeclaration(ASingleImportDeclaration node);
    void caseATypeImportDeclaration(ATypeImportDeclaration node);
    void caseAStaticImportDeclaration(AStaticImportDeclaration node);
    void caseADemandImportDeclaration(ADemandImportDeclaration node);
    void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node);
    void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node);
    void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node);
    void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node);
    void caseAClassTypeDeclaration(AClassTypeDeclaration node);
    void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node);
    void caseAPortTypeDeclaration(APortTypeDeclaration node);
    void caseAEventTypeDeclaration(AEventTypeDeclaration node);
    void caseAComponentTypeDeclaration(AComponentTypeDeclaration node);
    void caseASemiTypeDeclaration(ASemiTypeDeclaration node);
    void caseAClassClassDeclaration(AClassClassDeclaration node);
    void caseAEnumClassDeclaration(AEnumClassDeclaration node);
    void caseANormalClassDeclaration(ANormalClassDeclaration node);
    void caseAModifierModifiers(AModifierModifiers node);
    void caseAModifiersModifiers(AModifiersModifiers node);
    void caseAAnnotationModifier(AAnnotationModifier node);
    void caseAPublicModifier(APublicModifier node);
    void caseAProtectedModifier(AProtectedModifier node);
    void caseAPrivateModifier(APrivateModifier node);
    void caseAAbstractModifier(AAbstractModifier node);
    void caseAStaticModifier(AStaticModifier node);
    void caseAFinalModifier(AFinalModifier node);
    void caseAStrictfpModifier(AStrictfpModifier node);
    void caseATransientModifier(ATransientModifier node);
    void caseAVolatileModifier(AVolatileModifier node);
    void caseASynchronizedModifier(ASynchronizedModifier node);
    void caseANativeModifier(ANativeModifier node);
    void caseATypeParameters(ATypeParameters node);
    void caseAListTypeParameterList(AListTypeParameterList node);
    void caseAParameterTypeParameterList(AParameterTypeParameterList node);
    void caseASuper(ASuper node);
    void caseAInterfaces(AInterfaces node);
    void caseATypeInterfaceTypeList(ATypeInterfaceTypeList node);
    void caseAListInterfaceTypeList(AListInterfaceTypeList node);
    void caseAClassBody(AClassBody node);
    void caseADeclarationClassBodyDeclarations(ADeclarationClassBodyDeclarations node);
    void caseADeclarationsClassBodyDeclarations(ADeclarationsClassBodyDeclarations node);
    void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node);
    void caseAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node);
    void caseAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node);
    void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node);
    void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node);
    void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node);
    void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node);
    void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node);
    void caseASemiClassMemberDeclaration(ASemiClassMemberDeclaration node);
    void caseAFieldDeclaration(AFieldDeclaration node);
    void caseADeclaratorVariableDeclarators(ADeclaratorVariableDeclarators node);
    void caseADeclaratorsVariableDeclarators(ADeclaratorsVariableDeclarators node);
    void caseAIdVariableDeclarator(AIdVariableDeclarator node);
    void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node);
    void caseAInitializerNameVariableDeclarator(AInitializerNameVariableDeclarator node);
    void caseAVariableDeclaratorId(AVariableDeclaratorId node);
    void caseAExpressionVariableInitializerNoName(AExpressionVariableInitializerNoName node);
    void caseAInitializerVariableInitializerNoName(AInitializerVariableInitializerNoName node);
    void caseAMethodDeclaration(AMethodDeclaration node);
    void caseAMethodHeader(AMethodHeader node);
    void caseAMethodDeclarator(AMethodDeclarator node);
    void caseAParameterFormalParameterList(AParameterFormalParameterList node);
    void caseAParametersFormalParameterList(AParametersFormalParameterList node);
    void caseAParameterFormalParameters(AParameterFormalParameters node);
    void caseAParametersFormalParameters(AParametersFormalParameters node);
    void caseAFormalParameter(AFormalParameter node);
    void caseAVariableLastFormalParameter(AVariableLastFormalParameter node);
    void caseAFormalLastFormalParameter(AFormalLastFormalParameter node);
    void caseATypeResult(ATypeResult node);
    void caseAVoidResult(AVoidResult node);
    void caseAThrows(AThrows node);
    void caseATypeExceptionTypeList(ATypeExceptionTypeList node);
    void caseAListExceptionTypeList(AListExceptionTypeList node);
    void caseAExceptionType(AExceptionType node);
    void caseABlockMethodBody(ABlockMethodBody node);
    void caseASemiMethodBody(ASemiMethodBody node);
    void caseAInstanceInitializer(AInstanceInitializer node);
    void caseAStaticInitializer(AStaticInitializer node);
    void caseAConstructorDeclaration(AConstructorDeclaration node);
    void caseAConstructorDeclarator(AConstructorDeclarator node);
    void caseASimpleTypeName(ASimpleTypeName node);
    void caseAConstructorBody(AConstructorBody node);
    void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node);
    void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node);
    void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node);
    void caseANonWildTypeArguments(ANonWildTypeArguments node);
    void caseATypeReferenceTypeList(ATypeReferenceTypeList node);
    void caseAListReferenceTypeList(AListReferenceTypeList node);
    void caseAEnumDeclaration(AEnumDeclaration node);
    void caseAEnumBody(AEnumBody node);
    void caseAConstantEnumConstants(AConstantEnumConstants node);
    void caseAConstantsEnumConstants(AConstantsEnumConstants node);
    void caseAEnumConstant(AEnumConstant node);
    void caseAArguments(AArguments node);
    void caseAEnumBodyDeclarations(AEnumBodyDeclarations node);
    void caseAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node);
    void caseAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node);
    void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node);
    void caseAExtendsInterfaces(AExtendsInterfaces node);
    void caseAInterfaceBody(AInterfaceBody node);
    void caseADeclarationInterfaceMemberDeclarations(ADeclarationInterfaceMemberDeclarations node);
    void caseADeclarationsInterfaceMemberDeclarations(ADeclarationsInterfaceMemberDeclarations node);
    void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node);
    void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node);
    void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node);
    void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node);
    void caseASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node);
    void caseAConstantDeclaration(AConstantDeclaration node);
    void caseAAbstractMethodDeclaration(AAbstractMethodDeclaration node);
    void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node);
    void caseAAnnotationTypeBody(AAnnotationTypeBody node);
    void caseADeclarationAnnotationTypeElementDeclarations(ADeclarationAnnotationTypeElementDeclarations node);
    void caseADeclarationsAnnotationTypeElementDeclarations(ADeclarationsAnnotationTypeElementDeclarations node);
    void caseAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node);
    void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node);
    void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node);
    void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node);
    void caseASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node);
    void caseADefaultValue(ADefaultValue node);
    void caseAAnnotationAnnotations(AAnnotationAnnotations node);
    void caseAAnnotationsAnnotations(AAnnotationsAnnotations node);
    void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node);
    void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node);
    void caseASingleAnnotation(ASingleAnnotation node);
    void caseANormalAnnotation(ANormalAnnotation node);
    void caseAPairElementValuePairs(APairElementValuePairs node);
    void caseAPairsElementValuePairs(APairsElementValuePairs node);
    void caseAElementValuePair(AElementValuePair node);
    void caseAConditionalElementValue(AConditionalElementValue node);
    void caseANameElementValue(ANameElementValue node);
    void caseAAnnotationElementValue(AAnnotationElementValue node);
    void caseAArrayElementValue(AArrayElementValue node);
    void caseAElementValueArrayInitializer(AElementValueArrayInitializer node);
    void caseAValueElementValues(AValueElementValues node);
    void caseAValuesElementValues(AValuesElementValues node);
    void caseAMarkerAnnotation(AMarkerAnnotation node);
    void caseASingleElementAnnotation(ASingleElementAnnotation node);
    void caseAVariableArrayInitializer(AVariableArrayInitializer node);
    void caseANameArrayInitializer(ANameArrayInitializer node);
    void caseAVariableVariableInitializersNoName(AVariableVariableInitializersNoName node);
    void caseANameVariableInitializersNoName(ANameVariableInitializersNoName node);
    void caseAVariableVariableInitializersTail(AVariableVariableInitializersTail node);
    void caseANameVariableInitializersTail(ANameVariableInitializersTail node);
    void caseABlock(ABlock node);
    void caseAStatementBlockStatements(AStatementBlockStatements node);
    void caseAStatementsBlockStatements(AStatementsBlockStatements node);
    void caseAVariableBlockStatement(AVariableBlockStatement node);
    void caseAClassBlockStatement(AClassBlockStatement node);
    void caseAStatementBlockStatement(AStatementBlockStatement node);
    void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node);
    void caseALocalVariableDeclaration(ALocalVariableDeclaration node);
    void caseAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node);
    void caseALabeledStatementStatement(ALabeledStatementStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAWhileStatementStatement(AWhileStatementStatement node);
    void caseAForStatementStatement(AForStatementStatement node);
    void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node);
    void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node);
    void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node);
    void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node);
    void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node);
    void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node);
    void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node);
    void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node);
    void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node);
    void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node);
    void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node);
    void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node);
    void caseAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node);
    void caseADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node);
    void caseASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node);
    void caseAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node);
    void caseATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node);
    void caseAWithoutTrailingSubstatementStatementNoShortIf(AWithoutTrailingSubstatementStatementNoShortIf node);
    void caseALabeledStatementStatementNoShortIf(ALabeledStatementStatementNoShortIf node);
    void caseAIfStatementNoShortIf(AIfStatementNoShortIf node);
    void caseAWhileStatementStatementNoShortIf(AWhileStatementStatementNoShortIf node);
    void caseAForStatementStatementNoShortIf(AForStatementStatementNoShortIf node);
    void caseAEmptyStatement(AEmptyStatement node);
    void caseALabeledStatement(ALabeledStatement node);
    void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node);
    void caseAExpressionStatement(AExpressionStatement node);
    void caseAAssignmentStatementExpression(AAssignmentStatementExpression node);
    void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node);
    void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node);
    void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node);
    void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node);
    void caseAMethodStatementExpression(AMethodStatementExpression node);
    void caseAClassStatementExpression(AClassStatementExpression node);
    void caseAExpressionIfThenStatement(AExpressionIfThenStatement node);
    void caseANameIfThenStatement(ANameIfThenStatement node);
    void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node);
    void caseANameIfThenElseStatement(ANameIfThenElseStatement node);
    void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node);
    void caseANameIfThenElseStatementNoShortIf(ANameIfThenElseStatementNoShortIf node);
    void caseAAssertAssertStatement(AAssertAssertStatement node);
    void caseAAssertNameAssertStatement(AAssertNameAssertStatement node);
    void caseAExpressionAssertStatement(AExpressionAssertStatement node);
    void caseAExpressionName2AssertStatement(AExpressionName2AssertStatement node);
    void caseAExpressionName1AssertStatement(AExpressionName1AssertStatement node);
    void caseAExpressionName1Name2AssertStatement(AExpressionName1Name2AssertStatement node);
    void caseAExpressionSwitchStatement(AExpressionSwitchStatement node);
    void caseANameSwitchStatement(ANameSwitchStatement node);
    void caseASwitchBlock(ASwitchBlock node);
    void caseAGroupSwitchBlockStatementGroups(AGroupSwitchBlockStatementGroups node);
    void caseAGroupsSwitchBlockStatementGroups(AGroupsSwitchBlockStatementGroups node);
    void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node);
    void caseALabelSwitchLabels(ALabelSwitchLabels node);
    void caseALabelsSwitchLabels(ALabelsSwitchLabels node);
    void caseAConstantSwitchLabel(AConstantSwitchLabel node);
    void caseAConstantNameSwitchLabel(AConstantNameSwitchLabel node);
    void caseADefaultSwitchLabel(ADefaultSwitchLabel node);
    void caseAExpressionWhileStatement(AExpressionWhileStatement node);
    void caseANameWhileStatement(ANameWhileStatement node);
    void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node);
    void caseANameWhileStatementNoShortIf(ANameWhileStatementNoShortIf node);
    void caseAExpressionDoStatement(AExpressionDoStatement node);
    void caseANameDoStatement(ANameDoStatement node);
    void caseABasicForForStatement(ABasicForForStatement node);
    void caseAEnhancedForForStatement(AEnhancedForForStatement node);
    void caseAExpressionBasicForStatement(AExpressionBasicForStatement node);
    void caseANameBasicForStatement(ANameBasicForStatement node);
    void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node);
    void caseANameForStatementNoShortIf(ANameForStatementNoShortIf node);
    void caseAStatementForInit(AStatementForInit node);
    void caseALocalForInit(ALocalForInit node);
    void caseAForUpdate(AForUpdate node);
    void caseAExpressionStatementExpressionList(AExpressionStatementExpressionList node);
    void caseAListStatementExpressionList(AListStatementExpressionList node);
    void caseAExpressionEnhancedForStatement(AExpressionEnhancedForStatement node);
    void caseANameEnhancedForStatement(ANameEnhancedForStatement node);
    void caseABreakStatement(ABreakStatement node);
    void caseAContinueStatement(AContinueStatement node);
    void caseAExpressionReturnStatement(AExpressionReturnStatement node);
    void caseANameReturnStatement(ANameReturnStatement node);
    void caseAExpressionThrowStatement(AExpressionThrowStatement node);
    void caseANameThrowStatement(ANameThrowStatement node);
    void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node);
    void caseANameSynchronizedStatement(ANameSynchronizedStatement node);
    void caseACatchTryStatement(ACatchTryStatement node);
    void caseAFinallyTryStatement(AFinallyTryStatement node);
    void caseAResourcesTryStatement(AResourcesTryStatement node);
    void caseAClauseCatches(AClauseCatches node);
    void caseACatchesCatches(ACatchesCatches node);
    void caseACatchClause(ACatchClause node);
    void caseACatchFormalParameter(ACatchFormalParameter node);
    void caseAClassCatchType(AClassCatchType node);
    void caseACatchCatchType(ACatchCatchType node);
    void caseAFinally(AFinally node);
    void caseATryWithResourcesStatement(ATryWithResourcesStatement node);
    void caseAResourceSpecification(AResourceSpecification node);
    void caseAResourceResources(AResourceResources node);
    void caseAResourcesResources(AResourcesResources node);
    void caseAExpressionResource(AExpressionResource node);
    void caseANameResource(ANameResource node);
    void caseAPrimaryPrimary(APrimaryPrimary node);
    void caseAArrayPrimary(AArrayPrimary node);
    void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node);
    void caseATypePrimaryNoNewArray(ATypePrimaryNoNewArray node);
    void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node);
    void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node);
    void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node);
    void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node);
    void caseAExpressionNamePrimaryNoNewArray(AExpressionNamePrimaryNoNewArray node);
    void caseAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node);
    void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node);
    void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node);
    void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node);
    void caseAClassName(AClassName node);
    void caseANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node);
    void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node);
    void caseATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node);
    void caseADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node);
    void caseAExpressionArgumentList(AExpressionArgumentList node);
    void caseANameArgumentList(ANameArgumentList node);
    void caseAExpressionArgumentListTail(AExpressionArgumentListTail node);
    void caseANameArgumentListTail(ANameArgumentListTail node);
    void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node);
    void caseAClassArrayCreationExpression(AClassArrayCreationExpression node);
    void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node);
    void caseAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node);
    void caseAExprDimExprs(AExprDimExprs node);
    void caseAExprsDimExprs(AExprsDimExprs node);
    void caseAExpressionDimExpr(AExpressionDimExpr node);
    void caseANameDimExpr(ANameDimExpr node);
    void caseADim(ADim node);
    void caseAPrimaryFieldAccess(APrimaryFieldAccess node);
    void caseASuperFieldAccess(ASuperFieldAccess node);
    void caseAClassFieldAccess(AClassFieldAccess node);
    void caseAMethodMethodInvocation(AMethodMethodInvocation node);
    void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node);
    void caseASuperMethodInvocation(ASuperMethodInvocation node);
    void caseAClassMethodInvocation(AClassMethodInvocation node);
    void caseATypeMethodInvocation(ATypeMethodInvocation node);
    void caseAExpressionArrayAccess(AExpressionArrayAccess node);
    void caseAExpressionNameArrayAccess(AExpressionNameArrayAccess node);
    void caseAPrimaryArrayAccess(APrimaryArrayAccess node);
    void caseAPrimaryNameArrayAccess(APrimaryNameArrayAccess node);
    void caseAPrimaryPostfixExpressionNoName(APrimaryPostfixExpressionNoName node);
    void caseAIncrementPostfixExpressionNoName(AIncrementPostfixExpressionNoName node);
    void caseADecrementPostfixExpressionNoName(ADecrementPostfixExpressionNoName node);
    void caseAPostfixPostIncrementExpression(APostfixPostIncrementExpression node);
    void caseANamePostIncrementExpression(ANamePostIncrementExpression node);
    void caseAPostfixPostDecrementExpression(APostfixPostDecrementExpression node);
    void caseANamePostDecrementExpression(ANamePostDecrementExpression node);
    void caseAIncrementUnaryExpressionNoName(AIncrementUnaryExpressionNoName node);
    void caseADecrementUnaryExpressionNoName(ADecrementUnaryExpressionNoName node);
    void caseAPlusUnaryExpressionNoName(APlusUnaryExpressionNoName node);
    void caseAPlusNameUnaryExpressionNoName(APlusNameUnaryExpressionNoName node);
    void caseAMinusUnaryExpressionNoName(AMinusUnaryExpressionNoName node);
    void caseAMinusNameUnaryExpressionNoName(AMinusNameUnaryExpressionNoName node);
    void caseAUnaryUnaryExpressionNoName(AUnaryUnaryExpressionNoName node);
    void caseAUnaryPreIncrementExpression(AUnaryPreIncrementExpression node);
    void caseANamePreIncrementExpression(ANamePreIncrementExpression node);
    void caseAUnaryPreDecrementExpression(AUnaryPreDecrementExpression node);
    void caseANamePreDecrementExpression(ANamePreDecrementExpression node);
    void caseAPostfixUnaryExpressionNotPlusMinusNoName(APostfixUnaryExpressionNotPlusMinusNoName node);
    void caseATildeUnaryExpressionNotPlusMinusNoName(ATildeUnaryExpressionNotPlusMinusNoName node);
    void caseATildeNameUnaryExpressionNotPlusMinusNoName(ATildeNameUnaryExpressionNotPlusMinusNoName node);
    void caseAEmarkUnaryExpressionNotPlusMinusNoName(AEmarkUnaryExpressionNotPlusMinusNoName node);
    void caseAEmarkNameUnaryExpressionNotPlusMinusNoName(AEmarkNameUnaryExpressionNotPlusMinusNoName node);
    void caseACastUnaryExpressionNotPlusMinusNoName(ACastUnaryExpressionNotPlusMinusNoName node);
    void caseAPrimitiveCastExpression(APrimitiveCastExpression node);
    void caseAPrimitiveNameCastExpression(APrimitiveNameCastExpression node);
    void caseAReferenceCastExpression(AReferenceCastExpression node);
    void caseAReferenceNameCastExpression(AReferenceNameCastExpression node);
    void caseAUnaryMultiplicativeExpressionNoName(AUnaryMultiplicativeExpressionNoName node);
    void caseAStarMultiplicativeExpressionNoName(AStarMultiplicativeExpressionNoName node);
    void caseAStarNameMultiplicativeExpressionNoName(AStarNameMultiplicativeExpressionNoName node);
    void caseANameStarMultiplicativeExpressionNoName(ANameStarMultiplicativeExpressionNoName node);
    void caseANameStarNameMultiplicativeExpressionNoName(ANameStarNameMultiplicativeExpressionNoName node);
    void caseASlashMultiplicativeExpressionNoName(ASlashMultiplicativeExpressionNoName node);
    void caseASlashNameMultiplicativeExpressionNoName(ASlashNameMultiplicativeExpressionNoName node);
    void caseANameSlashMultiplicativeExpressionNoName(ANameSlashMultiplicativeExpressionNoName node);
    void caseANameSlashNameMultiplicativeExpressionNoName(ANameSlashNameMultiplicativeExpressionNoName node);
    void caseAPercentMultiplicativeExpressionNoName(APercentMultiplicativeExpressionNoName node);
    void caseAPercentNameMultiplicativeExpressionNoName(APercentNameMultiplicativeExpressionNoName node);
    void caseANamePercentMultiplicativeExpressionNoName(ANamePercentMultiplicativeExpressionNoName node);
    void caseANamePercentNameMultiplicativeExpressionNoName(ANamePercentNameMultiplicativeExpressionNoName node);
    void caseAMultiplicativeAdditiveExpressionNoName(AMultiplicativeAdditiveExpressionNoName node);
    void caseAPlusAdditiveExpressionNoName(APlusAdditiveExpressionNoName node);
    void caseAPlusNameAdditiveExpressionNoName(APlusNameAdditiveExpressionNoName node);
    void caseANamePlusAdditiveExpressionNoName(ANamePlusAdditiveExpressionNoName node);
    void caseANamePlusNameAdditiveExpressionNoName(ANamePlusNameAdditiveExpressionNoName node);
    void caseAMinusAdditiveExpressionNoName(AMinusAdditiveExpressionNoName node);
    void caseAMinusNameAdditiveExpressionNoName(AMinusNameAdditiveExpressionNoName node);
    void caseANameMinusAdditiveExpressionNoName(ANameMinusAdditiveExpressionNoName node);
    void caseANameMinusNameAdditiveExpressionNoName(ANameMinusNameAdditiveExpressionNoName node);
    void caseAAdditiveShiftExpressionNoName(AAdditiveShiftExpressionNoName node);
    void caseAShlShiftExpressionNoName(AShlShiftExpressionNoName node);
    void caseAShlNameShiftExpressionNoName(AShlNameShiftExpressionNoName node);
    void caseANameShlShiftExpressionNoName(ANameShlShiftExpressionNoName node);
    void caseANameShlNameShiftExpressionNoName(ANameShlNameShiftExpressionNoName node);
    void caseAShrShiftExpressionNoName(AShrShiftExpressionNoName node);
    void caseAShrNameShiftExpressionNoName(AShrNameShiftExpressionNoName node);
    void caseANameShrShiftExpressionNoName(ANameShrShiftExpressionNoName node);
    void caseANameShrNameShiftExpressionNoName(ANameShrNameShiftExpressionNoName node);
    void caseAUshrShiftExpressionNoName(AUshrShiftExpressionNoName node);
    void caseAUshrNameShiftExpressionNoName(AUshrNameShiftExpressionNoName node);
    void caseANameUshrShiftExpressionNoName(ANameUshrShiftExpressionNoName node);
    void caseANameUshrNameShiftExpressionNoName(ANameUshrNameShiftExpressionNoName node);
    void caseANoInstanceofRelationalExpressionNoName(ANoInstanceofRelationalExpressionNoName node);
    void caseAInstanceofRelationalExpressionNoName(AInstanceofRelationalExpressionNoName node);
    void caseANameInstanceofRelationalExpressionNoName(ANameInstanceofRelationalExpressionNoName node);
    void caseAShiftRelationalExpressionNoNameNoInstanceof(AShiftRelationalExpressionNoNameNoInstanceof node);
    void caseALtRelationalExpressionNoNameNoInstanceof(ALtRelationalExpressionNoNameNoInstanceof node);
    void caseALtNameRelationalExpressionNoNameNoInstanceof(ALtNameRelationalExpressionNoNameNoInstanceof node);
    void caseANameLtRelationalExpressionNoNameNoInstanceof(ANameLtRelationalExpressionNoNameNoInstanceof node);
    void caseANameLtNameRelationalExpressionNoNameNoInstanceof(ANameLtNameRelationalExpressionNoNameNoInstanceof node);
    void caseAGtRelationalExpressionNoNameNoInstanceof(AGtRelationalExpressionNoNameNoInstanceof node);
    void caseAGtNameRelationalExpressionNoNameNoInstanceof(AGtNameRelationalExpressionNoNameNoInstanceof node);
    void caseANameGtRelationalExpressionNoNameNoInstanceof(ANameGtRelationalExpressionNoNameNoInstanceof node);
    void caseANameGtNameRelationalExpressionNoNameNoInstanceof(ANameGtNameRelationalExpressionNoNameNoInstanceof node);
    void caseALteqRelationalExpressionNoNameNoInstanceof(ALteqRelationalExpressionNoNameNoInstanceof node);
    void caseALteqNameRelationalExpressionNoNameNoInstanceof(ALteqNameRelationalExpressionNoNameNoInstanceof node);
    void caseANameLteqRelationalExpressionNoNameNoInstanceof(ANameLteqRelationalExpressionNoNameNoInstanceof node);
    void caseANameLteqNameRelationalExpressionNoNameNoInstanceof(ANameLteqNameRelationalExpressionNoNameNoInstanceof node);
    void caseAGteqRelationalExpressionNoNameNoInstanceof(AGteqRelationalExpressionNoNameNoInstanceof node);
    void caseAGteqNameRelationalExpressionNoNameNoInstanceof(AGteqNameRelationalExpressionNoNameNoInstanceof node);
    void caseANameGteqRelationalExpressionNoNameNoInstanceof(ANameGteqRelationalExpressionNoNameNoInstanceof node);
    void caseANameGteqNameRelationalExpressionNoNameNoInstanceof(ANameGteqNameRelationalExpressionNoNameNoInstanceof node);
    void caseARelationalEqualityExpressionNoName(ARelationalEqualityExpressionNoName node);
    void caseAEqEqualityExpressionNoName(AEqEqualityExpressionNoName node);
    void caseAEqNameEqualityExpressionNoName(AEqNameEqualityExpressionNoName node);
    void caseANameEqEqualityExpressionNoName(ANameEqEqualityExpressionNoName node);
    void caseANameEqNameEqualityExpressionNoName(ANameEqNameEqualityExpressionNoName node);
    void caseANeqEqualityExpressionNoName(ANeqEqualityExpressionNoName node);
    void caseANeqNameEqualityExpressionNoName(ANeqNameEqualityExpressionNoName node);
    void caseANameNeqEqualityExpressionNoName(ANameNeqEqualityExpressionNoName node);
    void caseANameNeqNameEqualityExpressionNoName(ANameNeqNameEqualityExpressionNoName node);
    void caseAEqualityAndExpressionNoName(AEqualityAndExpressionNoName node);
    void caseAAmpAndExpressionNoName(AAmpAndExpressionNoName node);
    void caseAAmpNameAndExpressionNoName(AAmpNameAndExpressionNoName node);
    void caseANameAmpAndExpressionNoName(ANameAmpAndExpressionNoName node);
    void caseANameAmpNameAndExpressionNoName(ANameAmpNameAndExpressionNoName node);
    void caseAAndExclusiveOrExpressionNoName(AAndExclusiveOrExpressionNoName node);
    void caseACaretExclusiveOrExpressionNoName(ACaretExclusiveOrExpressionNoName node);
    void caseACaretNameExclusiveOrExpressionNoName(ACaretNameExclusiveOrExpressionNoName node);
    void caseANameCaretExclusiveOrExpressionNoName(ANameCaretExclusiveOrExpressionNoName node);
    void caseANameCaretNameExclusiveOrExpressionNoName(ANameCaretNameExclusiveOrExpressionNoName node);
    void caseAOrInclusiveOrExpressionNoName(AOrInclusiveOrExpressionNoName node);
    void caseABarInclusiveOrExpressionNoName(ABarInclusiveOrExpressionNoName node);
    void caseABarNameInclusiveOrExpressionNoName(ABarNameInclusiveOrExpressionNoName node);
    void caseANameBarInclusiveOrExpressionNoName(ANameBarInclusiveOrExpressionNoName node);
    void caseANameBarNameInclusiveOrExpressionNoName(ANameBarNameInclusiveOrExpressionNoName node);
    void caseAOrConditionalAndExpressionNoName(AOrConditionalAndExpressionNoName node);
    void caseAAmpConditionalAndExpressionNoName(AAmpConditionalAndExpressionNoName node);
    void caseAAmpNameConditionalAndExpressionNoName(AAmpNameConditionalAndExpressionNoName node);
    void caseANameAmpConditionalAndExpressionNoName(ANameAmpConditionalAndExpressionNoName node);
    void caseANameAmpNameConditionalAndExpressionNoName(ANameAmpNameConditionalAndExpressionNoName node);
    void caseAAndConditionalOrExpressionNoName(AAndConditionalOrExpressionNoName node);
    void caseABarConditionalOrExpressionNoName(ABarConditionalOrExpressionNoName node);
    void caseABarNameConditionalOrExpressionNoName(ABarNameConditionalOrExpressionNoName node);
    void caseANameBarConditionalOrExpressionNoName(ANameBarConditionalOrExpressionNoName node);
    void caseANameBarNameConditionalOrExpressionNoName(ANameBarNameConditionalOrExpressionNoName node);
    void caseAOrConditionalExpressionNoName(AOrConditionalExpressionNoName node);
    void caseAQmarkColonConditionalExpressionNoName(AQmarkColonConditionalExpressionNoName node);
    void caseAQmarkNameColonConditionalExpressionNoName(AQmarkNameColonConditionalExpressionNoName node);
    void caseAQmarkColonNameConditionalExpressionNoName(AQmarkColonNameConditionalExpressionNoName node);
    void caseAQmarkNameColonNameConditionalExpressionNoName(AQmarkNameColonNameConditionalExpressionNoName node);
    void caseANameQmarkColonConditionalExpressionNoName(ANameQmarkColonConditionalExpressionNoName node);
    void caseANameQmarkNameColonConditionalExpressionNoName(ANameQmarkNameColonConditionalExpressionNoName node);
    void caseANameQmarkColonNameConditionalExpressionNoName(ANameQmarkColonNameConditionalExpressionNoName node);
    void caseANameQmarkNameColonNameConditionalExpressionNoName(ANameQmarkNameColonNameConditionalExpressionNoName node);
    void caseAExpressionAssignmentExpressionNoName(AExpressionAssignmentExpressionNoName node);
    void caseAAssignmentAssignmentExpressionNoName(AAssignmentAssignmentExpressionNoName node);
    void caseAAssignmentAssignment(AAssignmentAssignment node);
    void caseANameAssignment(ANameAssignment node);
    void caseAExpressionLeftHandSide(AExpressionLeftHandSide node);
    void caseAFieldLeftHandSide(AFieldLeftHandSide node);
    void caseAArrayLeftHandSide(AArrayLeftHandSide node);
    void caseAAssignAssignmentOperator(AAssignAssignmentOperator node);
    void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node);
    void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node);
    void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node);
    void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node);
    void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node);
    void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node);
    void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node);
    void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node);
    void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node);
    void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node);
    void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node);
    void caseAExpressionNoName(AExpressionNoName node);
    void caseAConstantExpressionNoName(AConstantExpressionNoName node);
    void caseAPortDeclaration(APortDeclaration node);
    void caseAEventDeclaration(AEventDeclaration node);
    void caseAComponentDeclaration(AComponentDeclaration node);
    void caseAPortBody(APortBody node);
    void caseADeclarationPortBodyDeclarations(ADeclarationPortBodyDeclarations node);
    void caseADeclarationsPortBodyDeclarations(ADeclarationsPortBodyDeclarations node);
    void caseAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node);
    void caseARequestPortBodyDeclaration(ARequestPortBodyDeclaration node);
    void caseAIndicationsDeclaration(AIndicationsDeclaration node);
    void caseADeclarationIndicationDeclarations(ADeclarationIndicationDeclarations node);
    void caseADeclarationsIndicationDeclarations(ADeclarationsIndicationDeclarations node);
    void caseAIndicationDeclaration(AIndicationDeclaration node);
    void caseARequestsDeclaration(ARequestsDeclaration node);
    void caseADeclarationRequestDeclarations(ADeclarationRequestDeclarations node);
    void caseADeclarationsRequestDeclarations(ADeclarationsRequestDeclarations node);
    void caseARequestDeclaration(ARequestDeclaration node);
    void caseAHeaderFields(AHeaderFields node);
    void caseAComponentBody(AComponentBody node);
    void caseADeclarationComponentBodyDeclarations(ADeclarationComponentBodyDeclarations node);
    void caseADeclarationsComponentBodyDeclarations(ADeclarationsComponentBodyDeclarations node);
    void caseAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node);
    void caseAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node);
    void caseAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node);
    void caseAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node);
    void caseAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node);
    void caseAPortComponentBodyDeclaration(APortComponentBodyDeclaration node);
    void caseAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node);
    void caseAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node);
    void caseAHandleHandlingDeclaration(AHandleHandlingDeclaration node);
    void caseAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node);
    void caseAConnectHandlingDeclaration(AConnectHandlingDeclaration node);
    void caseASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node);
    void caseADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node);
    void caseAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node);
    void caseAInitDeclaration(AInitDeclaration node);
    void caseARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node);
    void caseAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node);
    void caseARequiresPort(ARequiresPort node);
    void caseAProvidesPort(AProvidesPort node);
    void caseAChildDeclaration(AChildDeclaration node);
    void caseAComponentInitialization(AComponentInitialization node);
    void caseAHandleDeclaration(AHandleDeclaration node);
    void caseAHandlerDeclaration(AHandlerDeclaration node);
    void caseAConnectStatement(AConnectStatement node);
    void caseASubscribeStatement(ASubscribeStatement node);
    void caseADisconnectStatement(ADisconnectStatement node);
    void caseAUnsubscribeStatement(AUnsubscribeStatement node);
    void caseANameTriggerStatement(ANameTriggerStatement node);
    void caseAExpressionTriggerStatement(AExpressionTriggerStatement node);

    void caseTComment(TComment node);
    void caseTAbstractKeyword(TAbstractKeyword node);
    void caseTAssertKeyword(TAssertKeyword node);
    void caseTBooleanKeyword(TBooleanKeyword node);
    void caseTBreakKeyword(TBreakKeyword node);
    void caseTByteKeyword(TByteKeyword node);
    void caseTCaseKeyword(TCaseKeyword node);
    void caseTCatchKeyword(TCatchKeyword node);
    void caseTCharKeyword(TCharKeyword node);
    void caseTClassKeyword(TClassKeyword node);
    void caseTConstKeyword(TConstKeyword node);
    void caseTContinueKeyword(TContinueKeyword node);
    void caseTDefaultKeyword(TDefaultKeyword node);
    void caseTDoKeyword(TDoKeyword node);
    void caseTDoubleKeyword(TDoubleKeyword node);
    void caseTElseKeyword(TElseKeyword node);
    void caseTEnumKeyword(TEnumKeyword node);
    void caseTExtendsKeyword(TExtendsKeyword node);
    void caseTFinalKeyword(TFinalKeyword node);
    void caseTFinallyKeyword(TFinallyKeyword node);
    void caseTFloatKeyword(TFloatKeyword node);
    void caseTForKeyword(TForKeyword node);
    void caseTIfKeyword(TIfKeyword node);
    void caseTGotoKeyword(TGotoKeyword node);
    void caseTImplementsKeyword(TImplementsKeyword node);
    void caseTImportKeyword(TImportKeyword node);
    void caseTInstanceofKeyword(TInstanceofKeyword node);
    void caseTIntKeyword(TIntKeyword node);
    void caseTInterfaceKeyword(TInterfaceKeyword node);
    void caseTLongKeyword(TLongKeyword node);
    void caseTNativeKeyword(TNativeKeyword node);
    void caseTNewKeyword(TNewKeyword node);
    void caseTPackageKeyword(TPackageKeyword node);
    void caseTPrivateKeyword(TPrivateKeyword node);
    void caseTProtectedKeyword(TProtectedKeyword node);
    void caseTPublicKeyword(TPublicKeyword node);
    void caseTReturnKeyword(TReturnKeyword node);
    void caseTShortKeyword(TShortKeyword node);
    void caseTStaticKeyword(TStaticKeyword node);
    void caseTStrictfpKeyword(TStrictfpKeyword node);
    void caseTSuperKeyword(TSuperKeyword node);
    void caseTSwitchKeyword(TSwitchKeyword node);
    void caseTSynchronizedKeyword(TSynchronizedKeyword node);
    void caseTThisKeyword(TThisKeyword node);
    void caseTThrowKeyword(TThrowKeyword node);
    void caseTThrowsKeyword(TThrowsKeyword node);
    void caseTTransientKeyword(TTransientKeyword node);
    void caseTTryKeyword(TTryKeyword node);
    void caseTVoidKeyword(TVoidKeyword node);
    void caseTVolatileKeyword(TVolatileKeyword node);
    void caseTWhileKeyword(TWhileKeyword node);
    void caseTDefinitionKeyword(TDefinitionKeyword node);
    void caseTHandlerKeyword(THandlerKeyword node);
    void caseTHandleKeyword(THandleKeyword node);
    void caseTPortKeyword(TPortKeyword node);
    void caseTComponentKeyword(TComponentKeyword node);
    void caseTSubscribeKeyword(TSubscribeKeyword node);
    void caseTUnsubscribeKeyword(TUnsubscribeKeyword node);
    void caseTConnectKeyword(TConnectKeyword node);
    void caseTDisconnectKeyword(TDisconnectKeyword node);
    void caseTInitKeyword(TInitKeyword node);
    void caseTTriggerKeyword(TTriggerKeyword node);
    void caseTRequiresKeyword(TRequiresKeyword node);
    void caseTProvidesKeyword(TProvidesKeyword node);
    void caseTIndicationKeyword(TIndicationKeyword node);
    void caseTRequestKeyword(TRequestKeyword node);
    void caseTEventKeyword(TEventKeyword node);
    void caseTRArrow(TRArrow node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTFloatingPointLiteral(TFloatingPointLiteral node);
    void caseTBooleanLiteral(TBooleanLiteral node);
    void caseTCharacterLiteral(TCharacterLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTNullLiteral(TNullLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEmark(TEmark node);
    void caseTTilde(TTilde node);
    void caseTQmark(TQmark node);
    void caseTColon(TColon node);
    void caseTEq(TEq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNeq(TNeq node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTBarBar(TBarBar node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTAmp(TAmp node);
    void caseTBar(TBar node);
    void caseTCaret(TCaret node);
    void caseTPercent(TPercent node);
    void caseTShl(TShl node);
    void caseTShr(TShr node);
    void caseTUshr(TUshr node);
    void caseTPlusAssign(TPlusAssign node);
    void caseTMinusAssign(TMinusAssign node);
    void caseTStarAssign(TStarAssign node);
    void caseTSlashAssign(TSlashAssign node);
    void caseTAmpAssign(TAmpAssign node);
    void caseTBarAssign(TBarAssign node);
    void caseTCaretAssign(TCaretAssign node);
    void caseTPercentAssign(TPercentAssign node);
    void caseTShlAssign(TShlAssign node);
    void caseTShrAssign(TShrAssign node);
    void caseTUshrAssign(TUshrAssign node);
    void caseTDotDotDot(TDotDotDot node);
    void caseTAt(TAt node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
