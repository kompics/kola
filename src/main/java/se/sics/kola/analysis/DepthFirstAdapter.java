/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.analysis;

import java.util.*;
import se.sics.kola.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPJavaCompilationUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultIn(node);
    }

    public void outAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        inAJavaCompilationUnit(node);
        if(node.getCompilationUnit() != null)
        {
            node.getCompilationUnit().apply(this);
        }
        outAJavaCompilationUnit(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        inAFloatingPointLiteral(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAFloatingPointLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inACharacterLiteral(ACharacterLiteral node)
    {
        defaultIn(node);
    }

    public void outACharacterLiteral(ACharacterLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        inACharacterLiteral(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outACharacterLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inANullLiteral(ANullLiteral node)
    {
        defaultIn(node);
    }

    public void outANullLiteral(ANullLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        inANullLiteral(node);
        if(node.getNullLiteral() != null)
        {
            node.getNullLiteral().apply(this);
        }
        outANullLiteral(node);
    }

    public void inAPrimitiveType(APrimitiveType node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveType(APrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveType(APrimitiveType node)
    {
        inAPrimitiveType(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitiveType(node);
    }

    public void inAReferenceType(AReferenceType node)
    {
        defaultIn(node);
    }

    public void outAReferenceType(AReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceType(AReferenceType node)
    {
        inAReferenceType(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAReferenceType(node);
    }

    public void inAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        inAPrimitiveTypeNoArguments(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitiveTypeNoArguments(node);
    }

    public void inAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        inAReferenceTypeNoArguments(node);
        if(node.getReferenceTypeNoArguments() != null)
        {
            node.getReferenceTypeNoArguments().apply(this);
        }
        outAReferenceTypeNoArguments(node);
    }

    public void inANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        inANumericPrimitiveType(node);
        if(node.getNumericType() != null)
        {
            node.getNumericType().apply(this);
        }
        outANumericPrimitiveType(node);
    }

    public void inABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        inABooleanPrimitiveType(node);
        if(node.getBooleanKeyword() != null)
        {
            node.getBooleanKeyword().apply(this);
        }
        outABooleanPrimitiveType(node);
    }

    public void inAIntegralNumericType(AIntegralNumericType node)
    {
        defaultIn(node);
    }

    public void outAIntegralNumericType(AIntegralNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        inAIntegralNumericType(node);
        if(node.getIntegralType() != null)
        {
            node.getIntegralType().apply(this);
        }
        outAIntegralNumericType(node);
    }

    public void inAFloatingNumericType(AFloatingNumericType node)
    {
        defaultIn(node);
    }

    public void outAFloatingNumericType(AFloatingNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        inAFloatingNumericType(node);
        if(node.getFloatingPointType() != null)
        {
            node.getFloatingPointType().apply(this);
        }
        outAFloatingNumericType(node);
    }

    public void inAByteIntegralType(AByteIntegralType node)
    {
        defaultIn(node);
    }

    public void outAByteIntegralType(AByteIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        inAByteIntegralType(node);
        if(node.getByteKeyword() != null)
        {
            node.getByteKeyword().apply(this);
        }
        outAByteIntegralType(node);
    }

    public void inAShortIntegralType(AShortIntegralType node)
    {
        defaultIn(node);
    }

    public void outAShortIntegralType(AShortIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        inAShortIntegralType(node);
        if(node.getShortKeyword() != null)
        {
            node.getShortKeyword().apply(this);
        }
        outAShortIntegralType(node);
    }

    public void inAIntIntegralType(AIntIntegralType node)
    {
        defaultIn(node);
    }

    public void outAIntIntegralType(AIntIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        inAIntIntegralType(node);
        if(node.getIntKeyword() != null)
        {
            node.getIntKeyword().apply(this);
        }
        outAIntIntegralType(node);
    }

    public void inALongIntegralType(ALongIntegralType node)
    {
        defaultIn(node);
    }

    public void outALongIntegralType(ALongIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        inALongIntegralType(node);
        if(node.getLongKeyword() != null)
        {
            node.getLongKeyword().apply(this);
        }
        outALongIntegralType(node);
    }

    public void inACharIntegralType(ACharIntegralType node)
    {
        defaultIn(node);
    }

    public void outACharIntegralType(ACharIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        inACharIntegralType(node);
        if(node.getCharKeyword() != null)
        {
            node.getCharKeyword().apply(this);
        }
        outACharIntegralType(node);
    }

    public void inAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        inAFloatFloatingPointType(node);
        if(node.getFloatKeyword() != null)
        {
            node.getFloatKeyword().apply(this);
        }
        outAFloatFloatingPointType(node);
    }

    public void inADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        inADoubleFloatingPointType(node);
        if(node.getDoubleKeyword() != null)
        {
            node.getDoubleKeyword().apply(this);
        }
        outADoubleFloatingPointType(node);
    }

    public void inAClassReferenceType(AClassReferenceType node)
    {
        defaultIn(node);
    }

    public void outAClassReferenceType(AClassReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassReferenceType(AClassReferenceType node)
    {
        inAClassReferenceType(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        outAClassReferenceType(node);
    }

    public void inAArrayReferenceType(AArrayReferenceType node)
    {
        defaultIn(node);
    }

    public void outAArrayReferenceType(AArrayReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayReferenceType(AArrayReferenceType node)
    {
        inAArrayReferenceType(node);
        if(node.getArrayType() != null)
        {
            node.getArrayType().apply(this);
        }
        outAArrayReferenceType(node);
    }

    public void inAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        inAClassReferenceTypeNoArguments(node);
        if(node.getClassOrInterfaceTypeNoArguments() != null)
        {
            node.getClassOrInterfaceTypeNoArguments().apply(this);
        }
        outAClassReferenceTypeNoArguments(node);
    }

    public void inAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        inAArrayReferenceTypeNoArguments(node);
        if(node.getArrayTypeNoArguments() != null)
        {
            node.getArrayTypeNoArguments().apply(this);
        }
        outAArrayReferenceTypeNoArguments(node);
    }

    public void inAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        inAClassOrInterfaceTypeNoArguments(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAClassOrInterfaceTypeNoArguments(node);
    }

    public void inAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultIn(node);
    }

    public void outAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        inAClassOrInterfaceType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAClassOrInterfaceType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAClassType(node);
    }

    public void inAInterfaceType(AInterfaceType node)
    {
        defaultIn(node);
    }

    public void outAInterfaceType(AInterfaceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceType(AInterfaceType node)
    {
        inAInterfaceType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAInterfaceType(node);
    }

    public void inATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultIn(node);
    }

    public void outATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        inATypeDeclSpecifier(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PTypeDeclSpecifierTail> copy = new ArrayList<PTypeDeclSpecifierTail>(node.getTypeDeclSpecifierTail());
            for(PTypeDeclSpecifierTail e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDeclSpecifier(node);
    }

    public void inATypeDeclSpecifierTail(ATypeDeclSpecifierTail node)
    {
        defaultIn(node);
    }

    public void outATypeDeclSpecifierTail(ATypeDeclSpecifierTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclSpecifierTail(ATypeDeclSpecifierTail node)
    {
        inATypeDeclSpecifierTail(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATypeDeclSpecifierTail(node);
    }

    public void inAClassArrayType(AClassArrayType node)
    {
        defaultIn(node);
    }

    public void outAClassArrayType(AClassArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayType(AClassArrayType node)
    {
        inAClassArrayType(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayType(node);
    }

    public void inAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayType(APrimitiveArrayType node)
    {
        inAPrimitiveArrayType(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayType(node);
    }

    public void inAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        inAClassArrayTypeNoArguments(node);
        if(node.getClassOrInterfaceTypeNoArguments() != null)
        {
            node.getClassOrInterfaceTypeNoArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayTypeNoArguments(node);
    }

    public void inAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        inAPrimitiveArrayTypeNoArguments(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayTypeNoArguments(node);
    }

    public void inATypeParameter(ATypeParameter node)
    {
        defaultIn(node);
    }

    public void outATypeParameter(ATypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        inATypeParameter(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeBound() != null)
        {
            node.getTypeBound().apply(this);
        }
        outATypeParameter(node);
    }

    public void inATypeBound(ATypeBound node)
    {
        defaultIn(node);
    }

    public void outATypeBound(ATypeBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeBound(ATypeBound node)
    {
        inATypeBound(node);
        if(node.getExtendsKeyword() != null)
        {
            node.getExtendsKeyword().apply(this);
        }
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        if(node.getAdditionalBoundList() != null)
        {
            node.getAdditionalBoundList().apply(this);
        }
        outATypeBound(node);
    }

    public void inAListAdditionalBoundList(AListAdditionalBoundList node)
    {
        defaultIn(node);
    }

    public void outAListAdditionalBoundList(AListAdditionalBoundList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListAdditionalBoundList(AListAdditionalBoundList node)
    {
        inAListAdditionalBoundList(node);
        if(node.getAdditionalBound() != null)
        {
            node.getAdditionalBound().apply(this);
        }
        if(node.getAdditionalBoundList() != null)
        {
            node.getAdditionalBoundList().apply(this);
        }
        outAListAdditionalBoundList(node);
    }

    public void inABoundAdditionalBoundList(ABoundAdditionalBoundList node)
    {
        defaultIn(node);
    }

    public void outABoundAdditionalBoundList(ABoundAdditionalBoundList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoundAdditionalBoundList(ABoundAdditionalBoundList node)
    {
        inABoundAdditionalBoundList(node);
        if(node.getAdditionalBound() != null)
        {
            node.getAdditionalBound().apply(this);
        }
        outABoundAdditionalBoundList(node);
    }

    public void inAAdditionalBound(AAdditionalBound node)
    {
        defaultIn(node);
    }

    public void outAAdditionalBound(AAdditionalBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalBound(AAdditionalBound node)
    {
        inAAdditionalBound(node);
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getInterfaceType() != null)
        {
            node.getInterfaceType().apply(this);
        }
        outAAdditionalBound(node);
    }

    public void inAGtTypeArguments(AGtTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAGtTypeArguments(AGtTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        inAGtTypeArguments(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getTypeArgumentList() != null)
        {
            node.getTypeArgumentList().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtTypeArguments(node);
    }

    public void inAShrTypeArguments(AShrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAShrTypeArguments(AShrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        inAShrTypeArguments(node);
        if(node.getLt1() != null)
        {
            node.getLt1().apply(this);
        }
        {
            List<PTypeArgumentListHead> copy = new ArrayList<PTypeArgumentListHead>(node.getTypeArgumentListHead());
            for(PTypeArgumentListHead e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getLt2() != null)
        {
            node.getLt2().apply(this);
        }
        if(node.getTypeArgumentList() != null)
        {
            node.getTypeArgumentList().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        outAShrTypeArguments(node);
    }

    public void inAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        inAUshrTypeArguments(node);
        if(node.getLt1() != null)
        {
            node.getLt1().apply(this);
        }
        {
            List<PTypeArgumentListHead> copy = new ArrayList<PTypeArgumentListHead>(node.getHeads1());
            for(PTypeArgumentListHead e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSpecifier1() != null)
        {
            node.getSpecifier1().apply(this);
        }
        if(node.getLt2() != null)
        {
            node.getLt2().apply(this);
        }
        {
            List<PTypeArgumentListHead> copy = new ArrayList<PTypeArgumentListHead>(node.getHeads2());
            for(PTypeArgumentListHead e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSpecifier2() != null)
        {
            node.getSpecifier2().apply(this);
        }
        if(node.getLt3() != null)
        {
            node.getLt3().apply(this);
        }
        if(node.getTypeArgumentList() != null)
        {
            node.getTypeArgumentList().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        outAUshrTypeArguments(node);
    }

    public void inATypeArgumentList(ATypeArgumentList node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentList(ATypeArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentList(ATypeArgumentList node)
    {
        inATypeArgumentList(node);
        {
            List<PTypeArgumentListHead> copy = new ArrayList<PTypeArgumentListHead>(node.getTypeArgumentListHead());
            for(PTypeArgumentListHead e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArgument() != null)
        {
            node.getTypeArgument().apply(this);
        }
        outATypeArgumentList(node);
    }

    public void inATypeArgumentListHead(ATypeArgumentListHead node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentListHead(ATypeArgumentListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentListHead(ATypeArgumentListHead node)
    {
        inATypeArgumentListHead(node);
        if(node.getTypeArgument() != null)
        {
            node.getTypeArgument().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATypeArgumentListHead(node);
    }

    public void inAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        inAReferenceTypeArgument(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAReferenceTypeArgument(node);
    }

    public void inAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        inAWildcardTypeArgument(node);
        if(node.getWildcard() != null)
        {
            node.getWildcard().apply(this);
        }
        outAWildcardTypeArgument(node);
    }

    public void inAWildcard(AWildcard node)
    {
        defaultIn(node);
    }

    public void outAWildcard(AWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcard(AWildcard node)
    {
        inAWildcard(node);
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getWildcardBounds() != null)
        {
            node.getWildcardBounds().apply(this);
        }
        outAWildcard(node);
    }

    public void inAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        inAExtendsWildcardBounds(node);
        if(node.getExtendsKeyword() != null)
        {
            node.getExtendsKeyword().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAExtendsWildcardBounds(node);
    }

    public void inASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperWildcardBounds(ASuperWildcardBounds node)
    {
        inASuperWildcardBounds(node);
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outASuperWildcardBounds(node);
    }

    public void inAName(AName node)
    {
        defaultIn(node);
    }

    public void outAName(AName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAName(AName node)
    {
        inAName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PNameTail> copy = new ArrayList<PNameTail>(node.getNameTail());
            for(PNameTail e : copy)
            {
                e.apply(this);
            }
        }
        outAName(node);
    }

    public void inANameTail(ANameTail node)
    {
        defaultIn(node);
    }

    public void outANameTail(ANameTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameTail(ANameTail node)
    {
        inANameTail(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANameTail(node);
    }

    public void inACompilationUnit(ACompilationUnit node)
    {
        defaultIn(node);
    }

    public void outACompilationUnit(ACompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        inACompilationUnit(node);
        if(node.getPackageDeclaration() != null)
        {
            node.getPackageDeclaration().apply(this);
        }
        if(node.getImportDeclarations() != null)
        {
            node.getImportDeclarations().apply(this);
        }
        if(node.getTypeDeclarations() != null)
        {
            node.getTypeDeclarations().apply(this);
        }
        outACompilationUnit(node);
    }

    public void inADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        inADeclarationImportDeclarations(node);
        if(node.getImportDeclaration() != null)
        {
            node.getImportDeclaration().apply(this);
        }
        outADeclarationImportDeclarations(node);
    }

    public void inADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        inADeclarationsImportDeclarations(node);
        if(node.getImportDeclarations() != null)
        {
            node.getImportDeclarations().apply(this);
        }
        if(node.getImportDeclaration() != null)
        {
            node.getImportDeclaration().apply(this);
        }
        outADeclarationsImportDeclarations(node);
    }

    public void inADeclarationTypeDeclarations(ADeclarationTypeDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationTypeDeclarations(ADeclarationTypeDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationTypeDeclarations(ADeclarationTypeDeclarations node)
    {
        inADeclarationTypeDeclarations(node);
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outADeclarationTypeDeclarations(node);
    }

    public void inADeclarationsTypeDeclarations(ADeclarationsTypeDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsTypeDeclarations(ADeclarationsTypeDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsTypeDeclarations(ADeclarationsTypeDeclarations node)
    {
        inADeclarationsTypeDeclarations(node);
        if(node.getTypeDeclarations() != null)
        {
            node.getTypeDeclarations().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outADeclarationsTypeDeclarations(node);
    }

    public void inAPackageDeclaration(APackageDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPackageDeclaration(APackageDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        inAPackageDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getPackageKeyword() != null)
        {
            node.getPackageKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPackageDeclaration(node);
    }

    public void inASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        inASingleImportDeclaration(node);
        if(node.getSingleTypeImportDeclaration() != null)
        {
            node.getSingleTypeImportDeclaration().apply(this);
        }
        outASingleImportDeclaration(node);
    }

    public void inATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        inATypeImportDeclaration(node);
        if(node.getTypeImportOnDemandDeclaration() != null)
        {
            node.getTypeImportOnDemandDeclaration().apply(this);
        }
        outATypeImportDeclaration(node);
    }

    public void inAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        inAStaticImportDeclaration(node);
        if(node.getSingleStaticImportDeclaration() != null)
        {
            node.getSingleStaticImportDeclaration().apply(this);
        }
        outAStaticImportDeclaration(node);
    }

    public void inADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADemandImportDeclaration(ADemandImportDeclaration node)
    {
        inADemandImportDeclaration(node);
        if(node.getStaticImportOnDemandDeclaration() != null)
        {
            node.getStaticImportOnDemandDeclaration().apply(this);
        }
        outADemandImportDeclaration(node);
    }

    public void inASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        inASingleTypeImportDeclaration(node);
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASingleTypeImportDeclaration(node);
    }

    public void inATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        inATypeImportOnDemandDeclaration(node);
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outATypeImportOnDemandDeclaration(node);
    }

    public void inASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        inASingleStaticImportDeclaration(node);
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        if(node.getStaticKeyword() != null)
        {
            node.getStaticKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASingleStaticImportDeclaration(node);
    }

    public void inAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        inAStaticImportOnDemandDeclaration(node);
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        if(node.getStaticKeyword() != null)
        {
            node.getStaticKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStaticImportOnDemandDeclaration(node);
    }

    public void inAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        inAClassTypeDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassTypeDeclaration(node);
    }

    public void inAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        inAInterfaceTypeDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceTypeDeclaration(node);
    }

    public void inAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortTypeDeclaration(APortTypeDeclaration node)
    {
        inAPortTypeDeclaration(node);
        if(node.getPortDeclaration() != null)
        {
            node.getPortDeclaration().apply(this);
        }
        outAPortTypeDeclaration(node);
    }

    public void inAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        inAEventTypeDeclaration(node);
        if(node.getEventDeclaration() != null)
        {
            node.getEventDeclaration().apply(this);
        }
        outAEventTypeDeclaration(node);
    }

    public void inAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        inAComponentTypeDeclaration(node);
        if(node.getComponentDeclaration() != null)
        {
            node.getComponentDeclaration().apply(this);
        }
        outAComponentTypeDeclaration(node);
    }

    public void inASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        inASemiTypeDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiTypeDeclaration(node);
    }

    public void inAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassClassDeclaration(AClassClassDeclaration node)
    {
        inAClassClassDeclaration(node);
        if(node.getNormalClassDeclaration() != null)
        {
            node.getNormalClassDeclaration().apply(this);
        }
        outAClassClassDeclaration(node);
    }

    public void inAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        inAEnumClassDeclaration(node);
        if(node.getEnumDeclaration() != null)
        {
            node.getEnumDeclaration().apply(this);
        }
        outAEnumClassDeclaration(node);
    }

    public void inANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        inANormalClassDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getClassKeyword() != null)
        {
            node.getClassKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        if(node.getInterfaces() != null)
        {
            node.getInterfaces().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outANormalClassDeclaration(node);
    }

    public void inAModifierModifiers(AModifierModifiers node)
    {
        defaultIn(node);
    }

    public void outAModifierModifiers(AModifierModifiers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModifierModifiers(AModifierModifiers node)
    {
        inAModifierModifiers(node);
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outAModifierModifiers(node);
    }

    public void inAModifiersModifiers(AModifiersModifiers node)
    {
        defaultIn(node);
    }

    public void outAModifiersModifiers(AModifiersModifiers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModifiersModifiers(AModifiersModifiers node)
    {
        inAModifiersModifiers(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outAModifiersModifiers(node);
    }

    public void inAAnnotationModifier(AAnnotationModifier node)
    {
        defaultIn(node);
    }

    public void outAAnnotationModifier(AAnnotationModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        inAAnnotationModifier(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationModifier(node);
    }

    public void inAPublicModifier(APublicModifier node)
    {
        defaultIn(node);
    }

    public void outAPublicModifier(APublicModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        inAPublicModifier(node);
        if(node.getPublicKeyword() != null)
        {
            node.getPublicKeyword().apply(this);
        }
        outAPublicModifier(node);
    }

    public void inAProtectedModifier(AProtectedModifier node)
    {
        defaultIn(node);
    }

    public void outAProtectedModifier(AProtectedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtectedModifier(AProtectedModifier node)
    {
        inAProtectedModifier(node);
        if(node.getProtectedKeyword() != null)
        {
            node.getProtectedKeyword().apply(this);
        }
        outAProtectedModifier(node);
    }

    public void inAPrivateModifier(APrivateModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivateModifier(APrivateModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        inAPrivateModifier(node);
        if(node.getPrivateKeyword() != null)
        {
            node.getPrivateKeyword().apply(this);
        }
        outAPrivateModifier(node);
    }

    public void inAAbstractModifier(AAbstractModifier node)
    {
        defaultIn(node);
    }

    public void outAAbstractModifier(AAbstractModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractModifier(AAbstractModifier node)
    {
        inAAbstractModifier(node);
        if(node.getAbstractKeyword() != null)
        {
            node.getAbstractKeyword().apply(this);
        }
        outAAbstractModifier(node);
    }

    public void inAStaticModifier(AStaticModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticModifier(AStaticModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        inAStaticModifier(node);
        if(node.getStaticKeyword() != null)
        {
            node.getStaticKeyword().apply(this);
        }
        outAStaticModifier(node);
    }

    public void inAFinalModifier(AFinalModifier node)
    {
        defaultIn(node);
    }

    public void outAFinalModifier(AFinalModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalModifier(AFinalModifier node)
    {
        inAFinalModifier(node);
        if(node.getFinalKeyword() != null)
        {
            node.getFinalKeyword().apply(this);
        }
        outAFinalModifier(node);
    }

    public void inAStrictfpModifier(AStrictfpModifier node)
    {
        defaultIn(node);
    }

    public void outAStrictfpModifier(AStrictfpModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        inAStrictfpModifier(node);
        if(node.getStrictfpKeyword() != null)
        {
            node.getStrictfpKeyword().apply(this);
        }
        outAStrictfpModifier(node);
    }

    public void inATransientModifier(ATransientModifier node)
    {
        defaultIn(node);
    }

    public void outATransientModifier(ATransientModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransientModifier(ATransientModifier node)
    {
        inATransientModifier(node);
        if(node.getTransientKeyword() != null)
        {
            node.getTransientKeyword().apply(this);
        }
        outATransientModifier(node);
    }

    public void inAVolatileModifier(AVolatileModifier node)
    {
        defaultIn(node);
    }

    public void outAVolatileModifier(AVolatileModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVolatileModifier(AVolatileModifier node)
    {
        inAVolatileModifier(node);
        if(node.getVolatileKeyword() != null)
        {
            node.getVolatileKeyword().apply(this);
        }
        outAVolatileModifier(node);
    }

    public void inASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultIn(node);
    }

    public void outASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        inASynchronizedModifier(node);
        if(node.getSynchronizedKeyword() != null)
        {
            node.getSynchronizedKeyword().apply(this);
        }
        outASynchronizedModifier(node);
    }

    public void inANativeModifier(ANativeModifier node)
    {
        defaultIn(node);
    }

    public void outANativeModifier(ANativeModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativeModifier(ANativeModifier node)
    {
        inANativeModifier(node);
        if(node.getNativeKeyword() != null)
        {
            node.getNativeKeyword().apply(this);
        }
        outANativeModifier(node);
    }

    public void inATypeParameters(ATypeParameters node)
    {
        defaultIn(node);
    }

    public void outATypeParameters(ATypeParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameters(ATypeParameters node)
    {
        inATypeParameters(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outATypeParameters(node);
    }

    public void inAListTypeParameterList(AListTypeParameterList node)
    {
        defaultIn(node);
    }

    public void outAListTypeParameterList(AListTypeParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListTypeParameterList(AListTypeParameterList node)
    {
        inAListTypeParameterList(node);
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeParameter() != null)
        {
            node.getTypeParameter().apply(this);
        }
        outAListTypeParameterList(node);
    }

    public void inAParameterTypeParameterList(AParameterTypeParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterTypeParameterList(AParameterTypeParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterTypeParameterList(AParameterTypeParameterList node)
    {
        inAParameterTypeParameterList(node);
        if(node.getTypeParameter() != null)
        {
            node.getTypeParameter().apply(this);
        }
        outAParameterTypeParameterList(node);
    }

    public void inASuper(ASuper node)
    {
        defaultIn(node);
    }

    public void outASuper(ASuper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuper(ASuper node)
    {
        inASuper(node);
        if(node.getExtendsKeyword() != null)
        {
            node.getExtendsKeyword().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outASuper(node);
    }

    public void inAInterfaces(AInterfaces node)
    {
        defaultIn(node);
    }

    public void outAInterfaces(AInterfaces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaces(AInterfaces node)
    {
        inAInterfaces(node);
        if(node.getImplementsKeyword() != null)
        {
            node.getImplementsKeyword().apply(this);
        }
        if(node.getInterfaceTypeList() != null)
        {
            node.getInterfaceTypeList().apply(this);
        }
        outAInterfaces(node);
    }

    public void inATypeInterfaceTypeList(ATypeInterfaceTypeList node)
    {
        defaultIn(node);
    }

    public void outATypeInterfaceTypeList(ATypeInterfaceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeInterfaceTypeList(ATypeInterfaceTypeList node)
    {
        inATypeInterfaceTypeList(node);
        if(node.getInterfaceType() != null)
        {
            node.getInterfaceType().apply(this);
        }
        outATypeInterfaceTypeList(node);
    }

    public void inAListInterfaceTypeList(AListInterfaceTypeList node)
    {
        defaultIn(node);
    }

    public void outAListInterfaceTypeList(AListInterfaceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListInterfaceTypeList(AListInterfaceTypeList node)
    {
        inAListInterfaceTypeList(node);
        if(node.getInterfaceTypeList() != null)
        {
            node.getInterfaceTypeList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInterfaceType() != null)
        {
            node.getInterfaceType().apply(this);
        }
        outAListInterfaceTypeList(node);
    }

    public void inAClassBody(AClassBody node)
    {
        defaultIn(node);
    }

    public void outAClassBody(AClassBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        inAClassBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getClassBodyDeclarations() != null)
        {
            node.getClassBodyDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAClassBody(node);
    }

    public void inADeclarationClassBodyDeclarations(ADeclarationClassBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationClassBodyDeclarations(ADeclarationClassBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationClassBodyDeclarations(ADeclarationClassBodyDeclarations node)
    {
        inADeclarationClassBodyDeclarations(node);
        if(node.getClassBodyDeclaration() != null)
        {
            node.getClassBodyDeclaration().apply(this);
        }
        outADeclarationClassBodyDeclarations(node);
    }

    public void inADeclarationsClassBodyDeclarations(ADeclarationsClassBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsClassBodyDeclarations(ADeclarationsClassBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsClassBodyDeclarations(ADeclarationsClassBodyDeclarations node)
    {
        inADeclarationsClassBodyDeclarations(node);
        if(node.getClassBodyDeclarations() != null)
        {
            node.getClassBodyDeclarations().apply(this);
        }
        if(node.getClassBodyDeclaration() != null)
        {
            node.getClassBodyDeclaration().apply(this);
        }
        outADeclarationsClassBodyDeclarations(node);
    }

    public void inAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        inAMemberClassBodyDeclaration(node);
        if(node.getClassMemberDeclaration() != null)
        {
            node.getClassMemberDeclaration().apply(this);
        }
        outAMemberClassBodyDeclaration(node);
    }

    public void inAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        inAInstanceClassBodyDeclaration(node);
        if(node.getInstanceInitializer() != null)
        {
            node.getInstanceInitializer().apply(this);
        }
        outAInstanceClassBodyDeclaration(node);
    }

    public void inAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        inAStaticClassBodyDeclaration(node);
        if(node.getStaticInitializer() != null)
        {
            node.getStaticInitializer().apply(this);
        }
        outAStaticClassBodyDeclaration(node);
    }

    public void inAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        inAConstructorClassBodyDeclaration(node);
        if(node.getConstructorDeclaration() != null)
        {
            node.getConstructorDeclaration().apply(this);
        }
        outAConstructorClassBodyDeclaration(node);
    }

    public void inAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        inAFieldClassMemberDeclaration(node);
        if(node.getFieldDeclaration() != null)
        {
            node.getFieldDeclaration().apply(this);
        }
        outAFieldClassMemberDeclaration(node);
    }

    public void inAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        inAMethodClassMemberDeclaration(node);
        if(node.getMethodDeclaration() != null)
        {
            node.getMethodDeclaration().apply(this);
        }
        outAMethodClassMemberDeclaration(node);
    }

    public void inAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        inAClassClassMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassClassMemberDeclaration(node);
    }

    public void inAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        inAInterfaceClassMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceClassMemberDeclaration(node);
    }

    public void inASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        inASemiClassMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiClassMemberDeclaration(node);
    }

    public void inAFieldDeclaration(AFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFieldDeclaration(AFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldDeclaration(AFieldDeclaration node)
    {
        inAFieldDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFieldDeclaration(node);
    }

    public void inADeclaratorVariableDeclarators(ADeclaratorVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outADeclaratorVariableDeclarators(ADeclaratorVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorVariableDeclarators(ADeclaratorVariableDeclarators node)
    {
        inADeclaratorVariableDeclarators(node);
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        outADeclaratorVariableDeclarators(node);
    }

    public void inADeclaratorsVariableDeclarators(ADeclaratorsVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outADeclaratorsVariableDeclarators(ADeclaratorsVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaratorsVariableDeclarators(ADeclaratorsVariableDeclarators node)
    {
        inADeclaratorsVariableDeclarators(node);
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        outADeclaratorsVariableDeclarators(node);
    }

    public void inAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        inAIdVariableDeclarator(node);
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outAIdVariableDeclarator(node);
    }

    public void inAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        inAInitializerVariableDeclarator(node);
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVariableInitializerNoName() != null)
        {
            node.getVariableInitializerNoName().apply(this);
        }
        outAInitializerVariableDeclarator(node);
    }

    public void inAInitializerNameVariableDeclarator(AInitializerNameVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAInitializerNameVariableDeclarator(AInitializerNameVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerNameVariableDeclarator(AInitializerNameVariableDeclarator node)
    {
        inAInitializerNameVariableDeclarator(node);
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAInitializerNameVariableDeclarator(node);
    }

    public void inAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        inAVariableDeclaratorId(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAVariableDeclaratorId(node);
    }

    public void inAExpressionVariableInitializerNoName(AExpressionVariableInitializerNoName node)
    {
        defaultIn(node);
    }

    public void outAExpressionVariableInitializerNoName(AExpressionVariableInitializerNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionVariableInitializerNoName(AExpressionVariableInitializerNoName node)
    {
        inAExpressionVariableInitializerNoName(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAExpressionVariableInitializerNoName(node);
    }

    public void inAInitializerVariableInitializerNoName(AInitializerVariableInitializerNoName node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableInitializerNoName(AInitializerVariableInitializerNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableInitializerNoName(AInitializerVariableInitializerNoName node)
    {
        inAInitializerVariableInitializerNoName(node);
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAInitializerVariableInitializerNoName(node);
    }

    public void inAMethodDeclaration(AMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclaration(AMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        inAMethodDeclaration(node);
        if(node.getMethodHeader() != null)
        {
            node.getMethodHeader().apply(this);
        }
        if(node.getMethodBody() != null)
        {
            node.getMethodBody().apply(this);
        }
        outAMethodDeclaration(node);
    }

    public void inAMethodHeader(AMethodHeader node)
    {
        defaultIn(node);
    }

    public void outAMethodHeader(AMethodHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHeader(AMethodHeader node)
    {
        inAMethodHeader(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        outAMethodHeader(node);
    }

    public void inAMethodDeclarator(AMethodDeclarator node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclarator(AMethodDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        inAMethodDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAMethodDeclarator(node);
    }

    public void inAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        inAParameterFormalParameterList(node);
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAParameterFormalParameterList(node);
    }

    public void inAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        inAParametersFormalParameterList(node);
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAParametersFormalParameterList(node);
    }

    public void inAParameterFormalParameters(AParameterFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAParameterFormalParameters(AParameterFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterFormalParameters(AParameterFormalParameters node)
    {
        inAParameterFormalParameters(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAParameterFormalParameters(node);
    }

    public void inAParametersFormalParameters(AParametersFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAParametersFormalParameters(AParametersFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersFormalParameters(AParametersFormalParameters node)
    {
        inAParametersFormalParameters(node);
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAParametersFormalParameters(node);
    }

    public void inAFormalParameter(AFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAFormalParameter(AFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalParameter(AFormalParameter node)
    {
        inAFormalParameter(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outAFormalParameter(node);
    }

    public void inAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        inAVariableLastFormalParameter(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outAVariableLastFormalParameter(node);
    }

    public void inAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        inAFormalLastFormalParameter(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAFormalLastFormalParameter(node);
    }

    public void inATypeResult(ATypeResult node)
    {
        defaultIn(node);
    }

    public void outATypeResult(ATypeResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeResult(ATypeResult node)
    {
        inATypeResult(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeResult(node);
    }

    public void inAVoidResult(AVoidResult node)
    {
        defaultIn(node);
    }

    public void outAVoidResult(AVoidResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidResult(AVoidResult node)
    {
        inAVoidResult(node);
        if(node.getVoidKeyword() != null)
        {
            node.getVoidKeyword().apply(this);
        }
        outAVoidResult(node);
    }

    public void inAThrows(AThrows node)
    {
        defaultIn(node);
    }

    public void outAThrows(AThrows node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrows(AThrows node)
    {
        inAThrows(node);
        if(node.getThrowsKeyword() != null)
        {
            node.getThrowsKeyword().apply(this);
        }
        if(node.getExceptionTypeList() != null)
        {
            node.getExceptionTypeList().apply(this);
        }
        outAThrows(node);
    }

    public void inATypeExceptionTypeList(ATypeExceptionTypeList node)
    {
        defaultIn(node);
    }

    public void outATypeExceptionTypeList(ATypeExceptionTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeExceptionTypeList(ATypeExceptionTypeList node)
    {
        inATypeExceptionTypeList(node);
        if(node.getExceptionType() != null)
        {
            node.getExceptionType().apply(this);
        }
        outATypeExceptionTypeList(node);
    }

    public void inAListExceptionTypeList(AListExceptionTypeList node)
    {
        defaultIn(node);
    }

    public void outAListExceptionTypeList(AListExceptionTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExceptionTypeList(AListExceptionTypeList node)
    {
        inAListExceptionTypeList(node);
        if(node.getExceptionTypeList() != null)
        {
            node.getExceptionTypeList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExceptionType() != null)
        {
            node.getExceptionType().apply(this);
        }
        outAListExceptionTypeList(node);
    }

    public void inAExceptionType(AExceptionType node)
    {
        defaultIn(node);
    }

    public void outAExceptionType(AExceptionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExceptionType(AExceptionType node)
    {
        inAExceptionType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAExceptionType(node);
    }

    public void inABlockMethodBody(ABlockMethodBody node)
    {
        defaultIn(node);
    }

    public void outABlockMethodBody(ABlockMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        inABlockMethodBody(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockMethodBody(node);
    }

    public void inASemiMethodBody(ASemiMethodBody node)
    {
        defaultIn(node);
    }

    public void outASemiMethodBody(ASemiMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiMethodBody(ASemiMethodBody node)
    {
        inASemiMethodBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiMethodBody(node);
    }

    public void inAInstanceInitializer(AInstanceInitializer node)
    {
        defaultIn(node);
    }

    public void outAInstanceInitializer(AInstanceInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        inAInstanceInitializer(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAInstanceInitializer(node);
    }

    public void inAStaticInitializer(AStaticInitializer node)
    {
        defaultIn(node);
    }

    public void outAStaticInitializer(AStaticInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticInitializer(AStaticInitializer node)
    {
        inAStaticInitializer(node);
        if(node.getStaticKeyword() != null)
        {
            node.getStaticKeyword().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAStaticInitializer(node);
    }

    public void inAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        inAConstructorDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getConstructorDeclarator() != null)
        {
            node.getConstructorDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getConstructorBody() != null)
        {
            node.getConstructorBody().apply(this);
        }
        outAConstructorDeclaration(node);
    }

    public void inAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        inAConstructorDeclarator(node);
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getSimpleTypeName() != null)
        {
            node.getSimpleTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAConstructorDeclarator(node);
    }

    public void inASimpleTypeName(ASimpleTypeName node)
    {
        defaultIn(node);
    }

    public void outASimpleTypeName(ASimpleTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        inASimpleTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleTypeName(node);
    }

    public void inAConstructorBody(AConstructorBody node)
    {
        defaultIn(node);
    }

    public void outAConstructorBody(AConstructorBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorBody(AConstructorBody node)
    {
        inAConstructorBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getExplicitConstructorInvocation() != null)
        {
            node.getExplicitConstructorInvocation().apply(this);
        }
        if(node.getBlockStatements() != null)
        {
            node.getBlockStatements().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAConstructorBody(node);
    }

    public void inAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        inAThisExplicitConstructorInvocation(node);
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getThisKeyword() != null)
        {
            node.getThisKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAThisExplicitConstructorInvocation(node);
    }

    public void inASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        inASuperExplicitConstructorInvocation(node);
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASuperExplicitConstructorInvocation(node);
    }

    public void inAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        inAPrimaryExplicitConstructorInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPrimaryExplicitConstructorInvocation(node);
    }

    public void inANonWildTypeArguments(ANonWildTypeArguments node)
    {
        defaultIn(node);
    }

    public void outANonWildTypeArguments(ANonWildTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonWildTypeArguments(ANonWildTypeArguments node)
    {
        inANonWildTypeArguments(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outANonWildTypeArguments(node);
    }

    public void inATypeReferenceTypeList(ATypeReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outATypeReferenceTypeList(ATypeReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeReferenceTypeList(ATypeReferenceTypeList node)
    {
        inATypeReferenceTypeList(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outATypeReferenceTypeList(node);
    }

    public void inAListReferenceTypeList(AListReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outAListReferenceTypeList(AListReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListReferenceTypeList(AListReferenceTypeList node)
    {
        inAListReferenceTypeList(node);
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAListReferenceTypeList(node);
    }

    public void inAEnumDeclaration(AEnumDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclaration(AEnumDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        inAEnumDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getEnumKeyword() != null)
        {
            node.getEnumKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInterfaces() != null)
        {
            node.getInterfaces().apply(this);
        }
        if(node.getEnumBody() != null)
        {
            node.getEnumBody().apply(this);
        }
        outAEnumDeclaration(node);
    }

    public void inAEnumBody(AEnumBody node)
    {
        defaultIn(node);
    }

    public void outAEnumBody(AEnumBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumBody(AEnumBody node)
    {
        inAEnumBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getEnumConstants() != null)
        {
            node.getEnumConstants().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEnumBodyDeclarations() != null)
        {
            node.getEnumBodyDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAEnumBody(node);
    }

    public void inAConstantEnumConstants(AConstantEnumConstants node)
    {
        defaultIn(node);
    }

    public void outAConstantEnumConstants(AConstantEnumConstants node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantEnumConstants(AConstantEnumConstants node)
    {
        inAConstantEnumConstants(node);
        if(node.getEnumConstant() != null)
        {
            node.getEnumConstant().apply(this);
        }
        outAConstantEnumConstants(node);
    }

    public void inAConstantsEnumConstants(AConstantsEnumConstants node)
    {
        defaultIn(node);
    }

    public void outAConstantsEnumConstants(AConstantsEnumConstants node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantsEnumConstants(AConstantsEnumConstants node)
    {
        inAConstantsEnumConstants(node);
        if(node.getEnumConstants() != null)
        {
            node.getEnumConstants().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEnumConstant() != null)
        {
            node.getEnumConstant().apply(this);
        }
        outAConstantsEnumConstants(node);
    }

    public void inAEnumConstant(AEnumConstant node)
    {
        defaultIn(node);
    }

    public void outAEnumConstant(AEnumConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumConstant(AEnumConstant node)
    {
        inAEnumConstant(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAEnumConstant(node);
    }

    public void inAArguments(AArguments node)
    {
        defaultIn(node);
    }

    public void outAArguments(AArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        inAArguments(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAArguments(node);
    }

    public void inAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        inAEnumBodyDeclarations(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getClassBodyDeclarations() != null)
        {
            node.getClassBodyDeclarations().apply(this);
        }
        outAEnumBodyDeclarations(node);
    }

    public void inAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        inAInterfaceInterfaceDeclaration(node);
        if(node.getNormalInterfaceDeclaration() != null)
        {
            node.getNormalInterfaceDeclaration().apply(this);
        }
        outAInterfaceInterfaceDeclaration(node);
    }

    public void inAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        inAAnnotationInterfaceDeclaration(node);
        if(node.getAnnotationTypeDeclaration() != null)
        {
            node.getAnnotationTypeDeclaration().apply(this);
        }
        outAAnnotationInterfaceDeclaration(node);
    }

    public void inANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        inANormalInterfaceDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getInterfaceKeyword() != null)
        {
            node.getInterfaceKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getExtendsInterfaces() != null)
        {
            node.getExtendsInterfaces().apply(this);
        }
        if(node.getInterfaceBody() != null)
        {
            node.getInterfaceBody().apply(this);
        }
        outANormalInterfaceDeclaration(node);
    }

    public void inAExtendsInterfaces(AExtendsInterfaces node)
    {
        defaultIn(node);
    }

    public void outAExtendsInterfaces(AExtendsInterfaces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsInterfaces(AExtendsInterfaces node)
    {
        inAExtendsInterfaces(node);
        if(node.getExtendsKeyword() != null)
        {
            node.getExtendsKeyword().apply(this);
        }
        if(node.getInterfaceTypeList() != null)
        {
            node.getInterfaceTypeList().apply(this);
        }
        outAExtendsInterfaces(node);
    }

    public void inAInterfaceBody(AInterfaceBody node)
    {
        defaultIn(node);
    }

    public void outAInterfaceBody(AInterfaceBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceBody(AInterfaceBody node)
    {
        inAInterfaceBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getInterfaceMemberDeclarations() != null)
        {
            node.getInterfaceMemberDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAInterfaceBody(node);
    }

    public void inADeclarationInterfaceMemberDeclarations(ADeclarationInterfaceMemberDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationInterfaceMemberDeclarations(ADeclarationInterfaceMemberDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationInterfaceMemberDeclarations(ADeclarationInterfaceMemberDeclarations node)
    {
        inADeclarationInterfaceMemberDeclarations(node);
        if(node.getInterfaceMemberDeclaration() != null)
        {
            node.getInterfaceMemberDeclaration().apply(this);
        }
        outADeclarationInterfaceMemberDeclarations(node);
    }

    public void inADeclarationsInterfaceMemberDeclarations(ADeclarationsInterfaceMemberDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsInterfaceMemberDeclarations(ADeclarationsInterfaceMemberDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsInterfaceMemberDeclarations(ADeclarationsInterfaceMemberDeclarations node)
    {
        inADeclarationsInterfaceMemberDeclarations(node);
        if(node.getInterfaceMemberDeclarations() != null)
        {
            node.getInterfaceMemberDeclarations().apply(this);
        }
        if(node.getInterfaceMemberDeclaration() != null)
        {
            node.getInterfaceMemberDeclaration().apply(this);
        }
        outADeclarationsInterfaceMemberDeclarations(node);
    }

    public void inAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        inAConstantInterfaceMemberDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantInterfaceMemberDeclaration(node);
    }

    public void inAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        inAMethodInterfaceMemberDeclaration(node);
        if(node.getAbstractMethodDeclaration() != null)
        {
            node.getAbstractMethodDeclaration().apply(this);
        }
        outAMethodInterfaceMemberDeclaration(node);
    }

    public void inAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        inAClassInterfaceMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassInterfaceMemberDeclaration(node);
    }

    public void inAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        inAInterfaceInterfaceMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceInterfaceMemberDeclaration(node);
    }

    public void inASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        inASemiInterfaceMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiInterfaceMemberDeclaration(node);
    }

    public void inAConstantDeclaration(AConstantDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantDeclaration(AConstantDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDeclaration(AConstantDeclaration node)
    {
        inAConstantDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAConstantDeclaration(node);
    }

    public void inAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        inAAbstractMethodDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAbstractMethodDeclaration(node);
    }

    public void inAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        inAAnnotationTypeDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getInterfaceKeyword() != null)
        {
            node.getInterfaceKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAnnotationTypeBody() != null)
        {
            node.getAnnotationTypeBody().apply(this);
        }
        outAAnnotationTypeDeclaration(node);
    }

    public void inAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        inAAnnotationTypeBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getAnnotationTypeElementDeclarations() != null)
        {
            node.getAnnotationTypeElementDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAAnnotationTypeBody(node);
    }

    public void inADeclarationAnnotationTypeElementDeclarations(ADeclarationAnnotationTypeElementDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationAnnotationTypeElementDeclarations(ADeclarationAnnotationTypeElementDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationAnnotationTypeElementDeclarations(ADeclarationAnnotationTypeElementDeclarations node)
    {
        inADeclarationAnnotationTypeElementDeclarations(node);
        if(node.getAnnotationTypeElementDeclaration() != null)
        {
            node.getAnnotationTypeElementDeclaration().apply(this);
        }
        outADeclarationAnnotationTypeElementDeclarations(node);
    }

    public void inADeclarationsAnnotationTypeElementDeclarations(ADeclarationsAnnotationTypeElementDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsAnnotationTypeElementDeclarations(ADeclarationsAnnotationTypeElementDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsAnnotationTypeElementDeclarations(ADeclarationsAnnotationTypeElementDeclarations node)
    {
        inADeclarationsAnnotationTypeElementDeclarations(node);
        if(node.getAnnotationTypeElementDeclarations() != null)
        {
            node.getAnnotationTypeElementDeclarations().apply(this);
        }
        if(node.getAnnotationTypeElementDeclaration() != null)
        {
            node.getAnnotationTypeElementDeclaration().apply(this);
        }
        outADeclarationsAnnotationTypeElementDeclarations(node);
    }

    public void inAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        inAAbstractAnnotationTypeElementDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDefaultValue() != null)
        {
            node.getDefaultValue().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAbstractAnnotationTypeElementDeclaration(node);
    }

    public void inAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        inAConstantAnnotationTypeElementDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantAnnotationTypeElementDeclaration(node);
    }

    public void inAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        inAClassAnnotationTypeElementDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassAnnotationTypeElementDeclaration(node);
    }

    public void inAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        inAInterfaceAnnotationTypeElementDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceAnnotationTypeElementDeclaration(node);
    }

    public void inASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        inASemiAnnotationTypeElementDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiAnnotationTypeElementDeclaration(node);
    }

    public void inADefaultValue(ADefaultValue node)
    {
        defaultIn(node);
    }

    public void outADefaultValue(ADefaultValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultValue(ADefaultValue node)
    {
        inADefaultValue(node);
        if(node.getDefaultKeyword() != null)
        {
            node.getDefaultKeyword().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outADefaultValue(node);
    }

    public void inAAnnotationAnnotations(AAnnotationAnnotations node)
    {
        defaultIn(node);
    }

    public void outAAnnotationAnnotations(AAnnotationAnnotations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationAnnotations(AAnnotationAnnotations node)
    {
        inAAnnotationAnnotations(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationAnnotations(node);
    }

    public void inAAnnotationsAnnotations(AAnnotationsAnnotations node)
    {
        defaultIn(node);
    }

    public void outAAnnotationsAnnotations(AAnnotationsAnnotations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationsAnnotations(AAnnotationsAnnotations node)
    {
        inAAnnotationsAnnotations(node);
        if(node.getAnnotations() != null)
        {
            node.getAnnotations().apply(this);
        }
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationsAnnotations(node);
    }

    public void inANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        inANormalAnnotationAnnotation(node);
        if(node.getNormalAnnotation() != null)
        {
            node.getNormalAnnotation().apply(this);
        }
        outANormalAnnotationAnnotation(node);
    }

    public void inAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        inAMarkerAnnotationAnnotation(node);
        if(node.getMarkerAnnotation() != null)
        {
            node.getMarkerAnnotation().apply(this);
        }
        outAMarkerAnnotationAnnotation(node);
    }

    public void inASingleAnnotation(ASingleAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleAnnotation(ASingleAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAnnotation(ASingleAnnotation node)
    {
        inASingleAnnotation(node);
        if(node.getSingleElementAnnotation() != null)
        {
            node.getSingleElementAnnotation().apply(this);
        }
        outASingleAnnotation(node);
    }

    public void inANormalAnnotation(ANormalAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotation(ANormalAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        inANormalAnnotation(node);
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getElementValuePairs() != null)
        {
            node.getElementValuePairs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outANormalAnnotation(node);
    }

    public void inAPairElementValuePairs(APairElementValuePairs node)
    {
        defaultIn(node);
    }

    public void outAPairElementValuePairs(APairElementValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPairElementValuePairs(APairElementValuePairs node)
    {
        inAPairElementValuePairs(node);
        if(node.getElementValuePair() != null)
        {
            node.getElementValuePair().apply(this);
        }
        outAPairElementValuePairs(node);
    }

    public void inAPairsElementValuePairs(APairsElementValuePairs node)
    {
        defaultIn(node);
    }

    public void outAPairsElementValuePairs(APairsElementValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPairsElementValuePairs(APairsElementValuePairs node)
    {
        inAPairsElementValuePairs(node);
        if(node.getElementValuePairs() != null)
        {
            node.getElementValuePairs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getElementValuePair() != null)
        {
            node.getElementValuePair().apply(this);
        }
        outAPairsElementValuePairs(node);
    }

    public void inAElementValuePair(AElementValuePair node)
    {
        defaultIn(node);
    }

    public void outAElementValuePair(AElementValuePair node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValuePair(AElementValuePair node)
    {
        inAElementValuePair(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outAElementValuePair(node);
    }

    public void inAConditionalElementValue(AConditionalElementValue node)
    {
        defaultIn(node);
    }

    public void outAConditionalElementValue(AConditionalElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        inAConditionalElementValue(node);
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outAConditionalElementValue(node);
    }

    public void inANameElementValue(ANameElementValue node)
    {
        defaultIn(node);
    }

    public void outANameElementValue(ANameElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameElementValue(ANameElementValue node)
    {
        inANameElementValue(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameElementValue(node);
    }

    public void inAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultIn(node);
    }

    public void outAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        inAAnnotationElementValue(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationElementValue(node);
    }

    public void inAArrayElementValue(AArrayElementValue node)
    {
        defaultIn(node);
    }

    public void outAArrayElementValue(AArrayElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayElementValue(AArrayElementValue node)
    {
        inAArrayElementValue(node);
        if(node.getElementValueArrayInitializer() != null)
        {
            node.getElementValueArrayInitializer().apply(this);
        }
        outAArrayElementValue(node);
    }

    public void inAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        inAElementValueArrayInitializer(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getElementValues() != null)
        {
            node.getElementValues().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAElementValueArrayInitializer(node);
    }

    public void inAValueElementValues(AValueElementValues node)
    {
        defaultIn(node);
    }

    public void outAValueElementValues(AValueElementValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueElementValues(AValueElementValues node)
    {
        inAValueElementValues(node);
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outAValueElementValues(node);
    }

    public void inAValuesElementValues(AValuesElementValues node)
    {
        defaultIn(node);
    }

    public void outAValuesElementValues(AValuesElementValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesElementValues(AValuesElementValues node)
    {
        inAValuesElementValues(node);
        if(node.getElementValues() != null)
        {
            node.getElementValues().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outAValuesElementValues(node);
    }

    public void inAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        inAMarkerAnnotation(node);
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMarkerAnnotation(node);
    }

    public void inASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        inASingleElementAnnotation(node);
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASingleElementAnnotation(node);
    }

    public void inAVariableArrayInitializer(AVariableArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAVariableArrayInitializer(AVariableArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableArrayInitializer(AVariableArrayInitializer node)
    {
        inAVariableArrayInitializer(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getVariableInitializersNoName() != null)
        {
            node.getVariableInitializersNoName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAVariableArrayInitializer(node);
    }

    public void inANameArrayInitializer(ANameArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outANameArrayInitializer(ANameArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameArrayInitializer(ANameArrayInitializer node)
    {
        inANameArrayInitializer(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outANameArrayInitializer(node);
    }

    public void inAVariableVariableInitializersNoName(AVariableVariableInitializersNoName node)
    {
        defaultIn(node);
    }

    public void outAVariableVariableInitializersNoName(AVariableVariableInitializersNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableVariableInitializersNoName(AVariableVariableInitializersNoName node)
    {
        inAVariableVariableInitializersNoName(node);
        if(node.getVariableInitializerNoName() != null)
        {
            node.getVariableInitializerNoName().apply(this);
        }
        {
            List<PVariableInitializersTail> copy = new ArrayList<PVariableInitializersTail>(node.getVariableInitializersTail());
            for(PVariableInitializersTail e : copy)
            {
                e.apply(this);
            }
        }
        outAVariableVariableInitializersNoName(node);
    }

    public void inANameVariableInitializersNoName(ANameVariableInitializersNoName node)
    {
        defaultIn(node);
    }

    public void outANameVariableInitializersNoName(ANameVariableInitializersNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameVariableInitializersNoName(ANameVariableInitializersNoName node)
    {
        inANameVariableInitializersNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PVariableInitializersTail> copy = new ArrayList<PVariableInitializersTail>(node.getVariableInitializersTail());
            for(PVariableInitializersTail e : copy)
            {
                e.apply(this);
            }
        }
        outANameVariableInitializersNoName(node);
    }

    public void inAVariableVariableInitializersTail(AVariableVariableInitializersTail node)
    {
        defaultIn(node);
    }

    public void outAVariableVariableInitializersTail(AVariableVariableInitializersTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableVariableInitializersTail(AVariableVariableInitializersTail node)
    {
        inAVariableVariableInitializersTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableInitializerNoName() != null)
        {
            node.getVariableInitializerNoName().apply(this);
        }
        outAVariableVariableInitializersTail(node);
    }

    public void inANameVariableInitializersTail(ANameVariableInitializersTail node)
    {
        defaultIn(node);
    }

    public void outANameVariableInitializersTail(ANameVariableInitializersTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameVariableInitializersTail(ANameVariableInitializersTail node)
    {
        inANameVariableInitializersTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameVariableInitializersTail(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getBlockStatements() != null)
        {
            node.getBlockStatements().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outABlock(node);
    }

    public void inAStatementBlockStatements(AStatementBlockStatements node)
    {
        defaultIn(node);
    }

    public void outAStatementBlockStatements(AStatementBlockStatements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlockStatements(AStatementBlockStatements node)
    {
        inAStatementBlockStatements(node);
        if(node.getBlockStatement() != null)
        {
            node.getBlockStatement().apply(this);
        }
        outAStatementBlockStatements(node);
    }

    public void inAStatementsBlockStatements(AStatementsBlockStatements node)
    {
        defaultIn(node);
    }

    public void outAStatementsBlockStatements(AStatementsBlockStatements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementsBlockStatements(AStatementsBlockStatements node)
    {
        inAStatementsBlockStatements(node);
        if(node.getBlockStatements() != null)
        {
            node.getBlockStatements().apply(this);
        }
        if(node.getBlockStatement() != null)
        {
            node.getBlockStatement().apply(this);
        }
        outAStatementsBlockStatements(node);
    }

    public void inAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableBlockStatement(AVariableBlockStatement node)
    {
        inAVariableBlockStatement(node);
        if(node.getLocalVariableDeclarationStatement() != null)
        {
            node.getLocalVariableDeclarationStatement().apply(this);
        }
        outAVariableBlockStatement(node);
    }

    public void inAClassBlockStatement(AClassBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAClassBlockStatement(AClassBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBlockStatement(AClassBlockStatement node)
    {
        inAClassBlockStatement(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassBlockStatement(node);
    }

    public void inAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        inAStatementBlockStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementBlockStatement(node);
    }

    public void inALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        inALocalVariableDeclarationStatement(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outALocalVariableDeclarationStatement(node);
    }

    public void inALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        inALocalVariableDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        outALocalVariableDeclaration(node);
    }

    public void inAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        inAWithoutTrailingSubstatementStatement(node);
        if(node.getStatementWithoutTrailingSubstatement() != null)
        {
            node.getStatementWithoutTrailingSubstatement().apply(this);
        }
        outAWithoutTrailingSubstatementStatement(node);
    }

    public void inALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementStatement(ALabeledStatementStatement node)
    {
        inALabeledStatementStatement(node);
        if(node.getLabeledStatement() != null)
        {
            node.getLabeledStatement().apply(this);
        }
        outALabeledStatementStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfThenStatement() != null)
        {
            node.getIfThenStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        if(node.getForStatement() != null)
        {
            node.getForStatement().apply(this);
        }
        outAForStatementStatement(node);
    }

    public void inABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        inABlockStatementWithoutTrailingSubstatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatementWithoutTrailingSubstatement(node);
    }

    public void inAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        inAEmptyStatementStatementWithoutTrailingSubstatement(node);
        if(node.getEmptyStatement() != null)
        {
            node.getEmptyStatement().apply(this);
        }
        outAEmptyStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        inAExpressionStatementStatementWithoutTrailingSubstatement(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        inAAssertStatementStatementWithoutTrailingSubstatement(node);
        if(node.getAssertStatement() != null)
        {
            node.getAssertStatement().apply(this);
        }
        outAAssertStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        inASwitchStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSwitchStatement() != null)
        {
            node.getSwitchStatement().apply(this);
        }
        outASwitchStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        inADoStatementStatementWithoutTrailingSubstatement(node);
        if(node.getDoStatement() != null)
        {
            node.getDoStatement().apply(this);
        }
        outADoStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        inABreakStatementStatementWithoutTrailingSubstatement(node);
        if(node.getBreakStatement() != null)
        {
            node.getBreakStatement().apply(this);
        }
        outABreakStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        inAContinueStatementStatementWithoutTrailingSubstatement(node);
        if(node.getContinueStatement() != null)
        {
            node.getContinueStatement().apply(this);
        }
        outAContinueStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        inAReturnStatementStatementWithoutTrailingSubstatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAReturnStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        inASynchronizedStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSynchronizedStatement() != null)
        {
            node.getSynchronizedStatement().apply(this);
        }
        outASynchronizedStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        inAThrowStatementStatementWithoutTrailingSubstatement(node);
        if(node.getThrowStatement() != null)
        {
            node.getThrowStatement().apply(this);
        }
        outAThrowStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        inATryStatementStatementWithoutTrailingSubstatement(node);
        if(node.getTryStatement() != null)
        {
            node.getTryStatement().apply(this);
        }
        outATryStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        inAConnectStatementWithoutTrailingSubstatement(node);
        if(node.getConnectStatement() != null)
        {
            node.getConnectStatement().apply(this);
        }
        outAConnectStatementWithoutTrailingSubstatement(node);
    }

    public void inADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        inADisconnectStatementWithoutTrailingSubstatement(node);
        if(node.getDisconnectStatement() != null)
        {
            node.getDisconnectStatement().apply(this);
        }
        outADisconnectStatementWithoutTrailingSubstatement(node);
    }

    public void inASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        inASubscribeStatementWithoutTrailingSubstatement(node);
        if(node.getSubscribeStatement() != null)
        {
            node.getSubscribeStatement().apply(this);
        }
        outASubscribeStatementWithoutTrailingSubstatement(node);
    }

    public void inAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        inAUnsubscribeStatementWithoutTrailingSubstatement(node);
        if(node.getUnsubscribeStatement() != null)
        {
            node.getUnsubscribeStatement().apply(this);
        }
        outAUnsubscribeStatementWithoutTrailingSubstatement(node);
    }

    public void inATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        inATriggerStatementWithoutTrailingSubstatement(node);
        if(node.getTriggerStatement() != null)
        {
            node.getTriggerStatement().apply(this);
        }
        outATriggerStatementWithoutTrailingSubstatement(node);
    }

    public void inAWithoutTrailingSubstatementStatementNoShortIf(AWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWithoutTrailingSubstatementStatementNoShortIf(AWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatementNoShortIf(AWithoutTrailingSubstatementStatementNoShortIf node)
    {
        inAWithoutTrailingSubstatementStatementNoShortIf(node);
        if(node.getStatementWithoutTrailingSubstatement() != null)
        {
            node.getStatementWithoutTrailingSubstatement().apply(this);
        }
        outAWithoutTrailingSubstatementStatementNoShortIf(node);
    }

    public void inALabeledStatementStatementNoShortIf(ALabeledStatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementStatementNoShortIf(ALabeledStatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementStatementNoShortIf(ALabeledStatementStatementNoShortIf node)
    {
        inALabeledStatementStatementNoShortIf(node);
        if(node.getLabeledStatementNoShortIf() != null)
        {
            node.getLabeledStatementNoShortIf().apply(this);
        }
        outALabeledStatementStatementNoShortIf(node);
    }

    public void inAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        inAIfStatementNoShortIf(node);
        if(node.getIfThenElseStatementNoShortIf() != null)
        {
            node.getIfThenElseStatementNoShortIf().apply(this);
        }
        outAIfStatementNoShortIf(node);
    }

    public void inAWhileStatementStatementNoShortIf(AWhileStatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatementNoShortIf(AWhileStatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementStatementNoShortIf(AWhileStatementStatementNoShortIf node)
    {
        inAWhileStatementStatementNoShortIf(node);
        if(node.getWhileStatementNoShortIf() != null)
        {
            node.getWhileStatementNoShortIf().apply(this);
        }
        outAWhileStatementStatementNoShortIf(node);
    }

    public void inAForStatementStatementNoShortIf(AForStatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatementNoShortIf(AForStatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatementStatementNoShortIf(AForStatementStatementNoShortIf node)
    {
        inAForStatementStatementNoShortIf(node);
        if(node.getForStatementNoShortIf() != null)
        {
            node.getForStatementNoShortIf().apply(this);
        }
        outAForStatementStatementNoShortIf(node);
    }

    public void inAEmptyStatement(AEmptyStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatement(AEmptyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        inAEmptyStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyStatement(node);
    }

    public void inALabeledStatement(ALabeledStatement node)
    {
        defaultIn(node);
    }

    public void outALabeledStatement(ALabeledStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatement(ALabeledStatement node)
    {
        inALabeledStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outALabeledStatement(node);
    }

    public void inALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        inALabeledStatementNoShortIf(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        outALabeledStatementNoShortIf(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        inAAssignmentStatementExpression(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStatementExpression(node);
    }

    public void inAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        inAPreIncrementStatementExpression(node);
        if(node.getPreIncrementExpression() != null)
        {
            node.getPreIncrementExpression().apply(this);
        }
        outAPreIncrementStatementExpression(node);
    }

    public void inAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        inAPreDecrementStatementExpression(node);
        if(node.getPreDecrementExpression() != null)
        {
            node.getPreDecrementExpression().apply(this);
        }
        outAPreDecrementStatementExpression(node);
    }

    public void inAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        inAPostIncrementStatementExpression(node);
        if(node.getPostIncrementExpression() != null)
        {
            node.getPostIncrementExpression().apply(this);
        }
        outAPostIncrementStatementExpression(node);
    }

    public void inAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        inAPostDecrementStatementExpression(node);
        if(node.getPostDecrementExpression() != null)
        {
            node.getPostDecrementExpression().apply(this);
        }
        outAPostDecrementStatementExpression(node);
    }

    public void inAMethodStatementExpression(AMethodStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodStatementExpression(AMethodStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodStatementExpression(AMethodStatementExpression node)
    {
        inAMethodStatementExpression(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodStatementExpression(node);
    }

    public void inAClassStatementExpression(AClassStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAClassStatementExpression(AClassStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassStatementExpression(AClassStatementExpression node)
    {
        inAClassStatementExpression(node);
        if(node.getClassInstanceCreationExpression() != null)
        {
            node.getClassInstanceCreationExpression().apply(this);
        }
        outAClassStatementExpression(node);
    }

    public void inAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        inAExpressionIfThenStatement(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAExpressionIfThenStatement(node);
    }

    public void inANameIfThenStatement(ANameIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outANameIfThenStatement(ANameIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameIfThenStatement(ANameIfThenStatement node)
    {
        inANameIfThenStatement(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANameIfThenStatement(node);
    }

    public void inAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        inAExpressionIfThenElseStatement(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getElseKeyword() != null)
        {
            node.getElseKeyword().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAExpressionIfThenElseStatement(node);
    }

    public void inANameIfThenElseStatement(ANameIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outANameIfThenElseStatement(ANameIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameIfThenElseStatement(ANameIfThenElseStatement node)
    {
        inANameIfThenElseStatement(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getElseKeyword() != null)
        {
            node.getElseKeyword().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANameIfThenElseStatement(node);
    }

    public void inAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        inAExpressionIfThenElseStatementNoShortIf(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getThenStatement() != null)
        {
            node.getThenStatement().apply(this);
        }
        if(node.getElseKeyword() != null)
        {
            node.getElseKeyword().apply(this);
        }
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outAExpressionIfThenElseStatementNoShortIf(node);
    }

    public void inANameIfThenElseStatementNoShortIf(ANameIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outANameIfThenElseStatementNoShortIf(ANameIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameIfThenElseStatementNoShortIf(ANameIfThenElseStatementNoShortIf node)
    {
        inANameIfThenElseStatementNoShortIf(node);
        if(node.getIfKeyword() != null)
        {
            node.getIfKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getThenStatement() != null)
        {
            node.getThenStatement().apply(this);
        }
        if(node.getElseKeyword() != null)
        {
            node.getElseKeyword().apply(this);
        }
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outANameIfThenElseStatementNoShortIf(node);
    }

    public void inAAssertAssertStatement(AAssertAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertAssertStatement(AAssertAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertAssertStatement(AAssertAssertStatement node)
    {
        inAAssertAssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssertAssertStatement(node);
    }

    public void inAAssertNameAssertStatement(AAssertNameAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertNameAssertStatement(AAssertNameAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertNameAssertStatement(AAssertNameAssertStatement node)
    {
        inAAssertNameAssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssertNameAssertStatement(node);
    }

    public void inAExpressionAssertStatement(AExpressionAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionAssertStatement(AExpressionAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionAssertStatement(AExpressionAssertStatement node)
    {
        inAExpressionAssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionAssertStatement(node);
    }

    public void inAExpressionName2AssertStatement(AExpressionName2AssertStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionName2AssertStatement(AExpressionName2AssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionName2AssertStatement(AExpressionName2AssertStatement node)
    {
        inAExpressionName2AssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionName2AssertStatement(node);
    }

    public void inAExpressionName1AssertStatement(AExpressionName1AssertStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionName1AssertStatement(AExpressionName1AssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionName1AssertStatement(AExpressionName1AssertStatement node)
    {
        inAExpressionName1AssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionName1AssertStatement(node);
    }

    public void inAExpressionName1Name2AssertStatement(AExpressionName1Name2AssertStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionName1Name2AssertStatement(AExpressionName1Name2AssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionName1Name2AssertStatement(AExpressionName1Name2AssertStatement node)
    {
        inAExpressionName1Name2AssertStatement(node);
        if(node.getAssertKeyword() != null)
        {
            node.getAssertKeyword().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionName1Name2AssertStatement(node);
    }

    public void inAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        inAExpressionSwitchStatement(node);
        if(node.getSwitchKeyword() != null)
        {
            node.getSwitchKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        outAExpressionSwitchStatement(node);
    }

    public void inANameSwitchStatement(ANameSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outANameSwitchStatement(ANameSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameSwitchStatement(ANameSwitchStatement node)
    {
        inANameSwitchStatement(node);
        if(node.getSwitchKeyword() != null)
        {
            node.getSwitchKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        outANameSwitchStatement(node);
    }

    public void inASwitchBlock(ASwitchBlock node)
    {
        defaultIn(node);
    }

    public void outASwitchBlock(ASwitchBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        inASwitchBlock(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getSwitchBlockStatementGroups() != null)
        {
            node.getSwitchBlockStatementGroups().apply(this);
        }
        if(node.getSwitchLabels() != null)
        {
            node.getSwitchLabels().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outASwitchBlock(node);
    }

    public void inAGroupSwitchBlockStatementGroups(AGroupSwitchBlockStatementGroups node)
    {
        defaultIn(node);
    }

    public void outAGroupSwitchBlockStatementGroups(AGroupSwitchBlockStatementGroups node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGroupSwitchBlockStatementGroups(AGroupSwitchBlockStatementGroups node)
    {
        inAGroupSwitchBlockStatementGroups(node);
        if(node.getSwitchBlockStatementGroup() != null)
        {
            node.getSwitchBlockStatementGroup().apply(this);
        }
        outAGroupSwitchBlockStatementGroups(node);
    }

    public void inAGroupsSwitchBlockStatementGroups(AGroupsSwitchBlockStatementGroups node)
    {
        defaultIn(node);
    }

    public void outAGroupsSwitchBlockStatementGroups(AGroupsSwitchBlockStatementGroups node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGroupsSwitchBlockStatementGroups(AGroupsSwitchBlockStatementGroups node)
    {
        inAGroupsSwitchBlockStatementGroups(node);
        if(node.getSwitchBlockStatementGroups() != null)
        {
            node.getSwitchBlockStatementGroups().apply(this);
        }
        if(node.getSwitchBlockStatementGroup() != null)
        {
            node.getSwitchBlockStatementGroup().apply(this);
        }
        outAGroupsSwitchBlockStatementGroups(node);
    }

    public void inASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultIn(node);
    }

    public void outASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        inASwitchBlockStatementGroup(node);
        if(node.getSwitchLabels() != null)
        {
            node.getSwitchLabels().apply(this);
        }
        if(node.getBlockStatements() != null)
        {
            node.getBlockStatements().apply(this);
        }
        outASwitchBlockStatementGroup(node);
    }

    public void inALabelSwitchLabels(ALabelSwitchLabels node)
    {
        defaultIn(node);
    }

    public void outALabelSwitchLabels(ALabelSwitchLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelSwitchLabels(ALabelSwitchLabels node)
    {
        inALabelSwitchLabels(node);
        if(node.getSwitchLabel() != null)
        {
            node.getSwitchLabel().apply(this);
        }
        outALabelSwitchLabels(node);
    }

    public void inALabelsSwitchLabels(ALabelsSwitchLabels node)
    {
        defaultIn(node);
    }

    public void outALabelsSwitchLabels(ALabelsSwitchLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelsSwitchLabels(ALabelsSwitchLabels node)
    {
        inALabelsSwitchLabels(node);
        if(node.getSwitchLabels() != null)
        {
            node.getSwitchLabels().apply(this);
        }
        if(node.getSwitchLabel() != null)
        {
            node.getSwitchLabel().apply(this);
        }
        outALabelsSwitchLabels(node);
    }

    public void inAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        inAConstantSwitchLabel(node);
        if(node.getCaseKeyword() != null)
        {
            node.getCaseKeyword().apply(this);
        }
        if(node.getConstantExpressionNoName() != null)
        {
            node.getConstantExpressionNoName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAConstantSwitchLabel(node);
    }

    public void inAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        inAConstantNameSwitchLabel(node);
        if(node.getCaseKeyword() != null)
        {
            node.getCaseKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAConstantNameSwitchLabel(node);
    }

    public void inADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        inADefaultSwitchLabel(node);
        if(node.getDefaultKeyword() != null)
        {
            node.getDefaultKeyword().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outADefaultSwitchLabel(node);
    }

    public void inAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        inAExpressionWhileStatement(node);
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAExpressionWhileStatement(node);
    }

    public void inANameWhileStatement(ANameWhileStatement node)
    {
        defaultIn(node);
    }

    public void outANameWhileStatement(ANameWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameWhileStatement(ANameWhileStatement node)
    {
        inANameWhileStatement(node);
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANameWhileStatement(node);
    }

    public void inAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        inAExpressionWhileStatementNoShortIf(node);
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        outAExpressionWhileStatementNoShortIf(node);
    }

    public void inANameWhileStatementNoShortIf(ANameWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outANameWhileStatementNoShortIf(ANameWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameWhileStatementNoShortIf(ANameWhileStatementNoShortIf node)
    {
        inANameWhileStatementNoShortIf(node);
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        outANameWhileStatementNoShortIf(node);
    }

    public void inAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDoStatement(AExpressionDoStatement node)
    {
        inAExpressionDoStatement(node);
        if(node.getDoKeyword() != null)
        {
            node.getDoKeyword().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionDoStatement(node);
    }

    public void inANameDoStatement(ANameDoStatement node)
    {
        defaultIn(node);
    }

    public void outANameDoStatement(ANameDoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameDoStatement(ANameDoStatement node)
    {
        inANameDoStatement(node);
        if(node.getDoKeyword() != null)
        {
            node.getDoKeyword().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getWhileKeyword() != null)
        {
            node.getWhileKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANameDoStatement(node);
    }

    public void inABasicForForStatement(ABasicForForStatement node)
    {
        defaultIn(node);
    }

    public void outABasicForForStatement(ABasicForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        inABasicForForStatement(node);
        if(node.getBasicForStatement() != null)
        {
            node.getBasicForStatement().apply(this);
        }
        outABasicForForStatement(node);
    }

    public void inAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultIn(node);
    }

    public void outAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        inAEnhancedForForStatement(node);
        if(node.getEnhancedForStatement() != null)
        {
            node.getEnhancedForStatement().apply(this);
        }
        outAEnhancedForForStatement(node);
    }

    public void inAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        inAExpressionBasicForStatement(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAExpressionBasicForStatement(node);
    }

    public void inANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBasicForStatement(ANameBasicForStatement node)
    {
        inANameBasicForStatement(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANameBasicForStatement(node);
    }

    public void inAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        inAExpressionForStatementNoShortIf(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        outAExpressionForStatementNoShortIf(node);
    }

    public void inANameForStatementNoShortIf(ANameForStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outANameForStatementNoShortIf(ANameForStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameForStatementNoShortIf(ANameForStatementNoShortIf node)
    {
        inANameForStatementNoShortIf(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        outANameForStatementNoShortIf(node);
    }

    public void inAStatementForInit(AStatementForInit node)
    {
        defaultIn(node);
    }

    public void outAStatementForInit(AStatementForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementForInit(AStatementForInit node)
    {
        inAStatementForInit(node);
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        outAStatementForInit(node);
    }

    public void inALocalForInit(ALocalForInit node)
    {
        defaultIn(node);
    }

    public void outALocalForInit(ALocalForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalForInit(ALocalForInit node)
    {
        inALocalForInit(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        outALocalForInit(node);
    }

    public void inAForUpdate(AForUpdate node)
    {
        defaultIn(node);
    }

    public void outAForUpdate(AForUpdate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForUpdate(AForUpdate node)
    {
        inAForUpdate(node);
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        outAForUpdate(node);
    }

    public void inAExpressionStatementExpressionList(AExpressionStatementExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementExpressionList(AExpressionStatementExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementExpressionList(AExpressionStatementExpressionList node)
    {
        inAExpressionStatementExpressionList(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        outAExpressionStatementExpressionList(node);
    }

    public void inAListStatementExpressionList(AListStatementExpressionList node)
    {
        defaultIn(node);
    }

    public void outAListStatementExpressionList(AListStatementExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListStatementExpressionList(AListStatementExpressionList node)
    {
        inAListStatementExpressionList(node);
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        outAListStatementExpressionList(node);
    }

    public void inAExpressionEnhancedForStatement(AExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionEnhancedForStatement(AExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionEnhancedForStatement(AExpressionEnhancedForStatement node)
    {
        inAExpressionEnhancedForStatement(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAExpressionEnhancedForStatement(node);
    }

    public void inANameEnhancedForStatement(ANameEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outANameEnhancedForStatement(ANameEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameEnhancedForStatement(ANameEnhancedForStatement node)
    {
        inANameEnhancedForStatement(node);
        if(node.getForKeyword() != null)
        {
            node.getForKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANameEnhancedForStatement(node);
    }

    public void inABreakStatement(ABreakStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatement(ABreakStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        inABreakStatement(node);
        if(node.getBreakKeyword() != null)
        {
            node.getBreakKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outABreakStatement(node);
    }

    public void inAContinueStatement(AContinueStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStatement(AContinueStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStatement(AContinueStatement node)
    {
        inAContinueStatement(node);
        if(node.getContinueKeyword() != null)
        {
            node.getContinueKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAContinueStatement(node);
    }

    public void inAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        inAExpressionReturnStatement(node);
        if(node.getReturnKeyword() != null)
        {
            node.getReturnKeyword().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionReturnStatement(node);
    }

    public void inANameReturnStatement(ANameReturnStatement node)
    {
        defaultIn(node);
    }

    public void outANameReturnStatement(ANameReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameReturnStatement(ANameReturnStatement node)
    {
        inANameReturnStatement(node);
        if(node.getReturnKeyword() != null)
        {
            node.getReturnKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANameReturnStatement(node);
    }

    public void inAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        inAExpressionThrowStatement(node);
        if(node.getThrowKeyword() != null)
        {
            node.getThrowKeyword().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionThrowStatement(node);
    }

    public void inANameThrowStatement(ANameThrowStatement node)
    {
        defaultIn(node);
    }

    public void outANameThrowStatement(ANameThrowStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameThrowStatement(ANameThrowStatement node)
    {
        inANameThrowStatement(node);
        if(node.getThrowKeyword() != null)
        {
            node.getThrowKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANameThrowStatement(node);
    }

    public void inAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        inAExpressionSynchronizedStatement(node);
        if(node.getSynchronizedKeyword() != null)
        {
            node.getSynchronizedKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAExpressionSynchronizedStatement(node);
    }

    public void inANameSynchronizedStatement(ANameSynchronizedStatement node)
    {
        defaultIn(node);
    }

    public void outANameSynchronizedStatement(ANameSynchronizedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameSynchronizedStatement(ANameSynchronizedStatement node)
    {
        inANameSynchronizedStatement(node);
        if(node.getSynchronizedKeyword() != null)
        {
            node.getSynchronizedKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outANameSynchronizedStatement(node);
    }

    public void inACatchTryStatement(ACatchTryStatement node)
    {
        defaultIn(node);
    }

    public void outACatchTryStatement(ACatchTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        inACatchTryStatement(node);
        if(node.getTryKeyword() != null)
        {
            node.getTryKeyword().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getCatches() != null)
        {
            node.getCatches().apply(this);
        }
        outACatchTryStatement(node);
    }

    public void inAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultIn(node);
    }

    public void outAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        inAFinallyTryStatement(node);
        if(node.getTryKeyword() != null)
        {
            node.getTryKeyword().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getCatches() != null)
        {
            node.getCatches().apply(this);
        }
        if(node.getFinally() != null)
        {
            node.getFinally().apply(this);
        }
        outAFinallyTryStatement(node);
    }

    public void inAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultIn(node);
    }

    public void outAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourcesTryStatement(AResourcesTryStatement node)
    {
        inAResourcesTryStatement(node);
        if(node.getTryWithResourcesStatement() != null)
        {
            node.getTryWithResourcesStatement().apply(this);
        }
        outAResourcesTryStatement(node);
    }

    public void inAClauseCatches(AClauseCatches node)
    {
        defaultIn(node);
    }

    public void outAClauseCatches(AClauseCatches node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClauseCatches(AClauseCatches node)
    {
        inAClauseCatches(node);
        if(node.getCatchClause() != null)
        {
            node.getCatchClause().apply(this);
        }
        outAClauseCatches(node);
    }

    public void inACatchesCatches(ACatchesCatches node)
    {
        defaultIn(node);
    }

    public void outACatchesCatches(ACatchesCatches node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchesCatches(ACatchesCatches node)
    {
        inACatchesCatches(node);
        if(node.getCatches() != null)
        {
            node.getCatches().apply(this);
        }
        if(node.getCatchClause() != null)
        {
            node.getCatchClause().apply(this);
        }
        outACatchesCatches(node);
    }

    public void inACatchClause(ACatchClause node)
    {
        defaultIn(node);
    }

    public void outACatchClause(ACatchClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchClause(ACatchClause node)
    {
        inACatchClause(node);
        if(node.getCatchKeyword() != null)
        {
            node.getCatchKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCatchFormalParameter() != null)
        {
            node.getCatchFormalParameter().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outACatchClause(node);
    }

    public void inACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultIn(node);
    }

    public void outACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchFormalParameter(ACatchFormalParameter node)
    {
        inACatchFormalParameter(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outACatchFormalParameter(node);
    }

    public void inAClassCatchType(AClassCatchType node)
    {
        defaultIn(node);
    }

    public void outAClassCatchType(AClassCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassCatchType(AClassCatchType node)
    {
        inAClassCatchType(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outAClassCatchType(node);
    }

    public void inACatchCatchType(ACatchCatchType node)
    {
        defaultIn(node);
    }

    public void outACatchCatchType(ACatchCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchCatchType(ACatchCatchType node)
    {
        inACatchCatchType(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        outACatchCatchType(node);
    }

    public void inAFinally(AFinally node)
    {
        defaultIn(node);
    }

    public void outAFinally(AFinally node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinally(AFinally node)
    {
        inAFinally(node);
        if(node.getFinallyKeyword() != null)
        {
            node.getFinallyKeyword().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFinally(node);
    }

    public void inATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultIn(node);
    }

    public void outATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        inATryWithResourcesStatement(node);
        if(node.getTryKeyword() != null)
        {
            node.getTryKeyword().apply(this);
        }
        if(node.getResourceSpecification() != null)
        {
            node.getResourceSpecification().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getCatches() != null)
        {
            node.getCatches().apply(this);
        }
        if(node.getFinally() != null)
        {
            node.getFinally().apply(this);
        }
        outATryWithResourcesStatement(node);
    }

    public void inAResourceSpecification(AResourceSpecification node)
    {
        defaultIn(node);
    }

    public void outAResourceSpecification(AResourceSpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourceSpecification(AResourceSpecification node)
    {
        inAResourceSpecification(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getResources() != null)
        {
            node.getResources().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAResourceSpecification(node);
    }

    public void inAResourceResources(AResourceResources node)
    {
        defaultIn(node);
    }

    public void outAResourceResources(AResourceResources node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourceResources(AResourceResources node)
    {
        inAResourceResources(node);
        if(node.getResource() != null)
        {
            node.getResource().apply(this);
        }
        outAResourceResources(node);
    }

    public void inAResourcesResources(AResourcesResources node)
    {
        defaultIn(node);
    }

    public void outAResourcesResources(AResourcesResources node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourcesResources(AResourcesResources node)
    {
        inAResourcesResources(node);
        if(node.getResources() != null)
        {
            node.getResources().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getResource() != null)
        {
            node.getResource().apply(this);
        }
        outAResourcesResources(node);
    }

    public void inAExpressionResource(AExpressionResource node)
    {
        defaultIn(node);
    }

    public void outAExpressionResource(AExpressionResource node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionResource(AExpressionResource node)
    {
        inAExpressionResource(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAExpressionResource(node);
    }

    public void inANameResource(ANameResource node)
    {
        defaultIn(node);
    }

    public void outANameResource(ANameResource node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameResource(ANameResource node)
    {
        inANameResource(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameResource(node);
    }

    public void inAPrimaryPrimary(APrimaryPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryPrimary(APrimaryPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryPrimary(APrimaryPrimary node)
    {
        inAPrimaryPrimary(node);
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        outAPrimaryPrimary(node);
    }

    public void inAArrayPrimary(AArrayPrimary node)
    {
        defaultIn(node);
    }

    public void outAArrayPrimary(AArrayPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayPrimary(AArrayPrimary node)
    {
        inAArrayPrimary(node);
        if(node.getArrayCreationExpression() != null)
        {
            node.getArrayCreationExpression().apply(this);
        }
        outAArrayPrimary(node);
    }

    public void inALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        inALiteralPrimaryNoNewArray(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryNoNewArray(node);
    }

    public void inATypePrimaryNoNewArray(ATypePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outATypePrimaryNoNewArray(ATypePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypePrimaryNoNewArray(ATypePrimaryNoNewArray node)
    {
        inATypePrimaryNoNewArray(node);
        if(node.getTypeNoArguments() != null)
        {
            node.getTypeNoArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getClassKeyword() != null)
        {
            node.getClassKeyword().apply(this);
        }
        outATypePrimaryNoNewArray(node);
    }

    public void inAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        inAVoidPrimaryNoNewArray(node);
        if(node.getVoidKeyword() != null)
        {
            node.getVoidKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getClassKeyword() != null)
        {
            node.getClassKeyword().apply(this);
        }
        outAVoidPrimaryNoNewArray(node);
    }

    public void inAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        inAThisPrimaryNoNewArray(node);
        if(node.getThisKeyword() != null)
        {
            node.getThisKeyword().apply(this);
        }
        outAThisPrimaryNoNewArray(node);
    }

    public void inAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        inAClassPrimaryNoNewArray(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getThisKeyword() != null)
        {
            node.getThisKeyword().apply(this);
        }
        outAClassPrimaryNoNewArray(node);
    }

    public void inAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        inAExpressionPrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExpressionPrimaryNoNewArray(node);
    }

    public void inAExpressionNamePrimaryNoNewArray(AExpressionNamePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAExpressionNamePrimaryNoNewArray(AExpressionNamePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionNamePrimaryNoNewArray(AExpressionNamePrimaryNoNewArray node)
    {
        inAExpressionNamePrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExpressionNamePrimaryNoNewArray(node);
    }

    public void inAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        inAInstancePrimaryNoNewArray(node);
        if(node.getClassInstanceCreationExpression() != null)
        {
            node.getClassInstanceCreationExpression().apply(this);
        }
        outAInstancePrimaryNoNewArray(node);
    }

    public void inAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        inAFieldPrimaryNoNewArray(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldPrimaryNoNewArray(node);
    }

    public void inAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        inAMethodPrimaryNoNewArray(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodPrimaryNoNewArray(node);
    }

    public void inAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        inAArrayPrimaryNoNewArray(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayPrimaryNoNewArray(node);
    }

    public void inAClassName(AClassName node)
    {
        defaultIn(node);
    }

    public void outAClassName(AClassName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassName(AClassName node)
    {
        inAClassName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAClassName(node);
    }

    public void inANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        inANewClassInstanceCreationExpression(node);
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArgumentsOrDiamond() != null)
        {
            node.getTypeArgumentsOrDiamond().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outANewClassInstanceCreationExpression(node);
    }

    public void inAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        inAPrimaryClassInstanceCreationExpression(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeArgumentsOrDiamond() != null)
        {
            node.getTypeArgumentsOrDiamond().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAPrimaryClassInstanceCreationExpression(node);
    }

    public void inATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        inATypeArgumentsTypeArgumentsOrDiamond(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outATypeArgumentsTypeArgumentsOrDiamond(node);
    }

    public void inADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultIn(node);
    }

    public void outADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        inADiamondTypeArgumentsOrDiamond(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outADiamondTypeArgumentsOrDiamond(node);
    }

    public void inAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        inAExpressionArgumentList(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        {
            List<PArgumentListTail> copy = new ArrayList<PArgumentListTail>(node.getArgumentListTail());
            for(PArgumentListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAExpressionArgumentList(node);
    }

    public void inANameArgumentList(ANameArgumentList node)
    {
        defaultIn(node);
    }

    public void outANameArgumentList(ANameArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameArgumentList(ANameArgumentList node)
    {
        inANameArgumentList(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PArgumentListTail> copy = new ArrayList<PArgumentListTail>(node.getArgumentListTail());
            for(PArgumentListTail e : copy)
            {
                e.apply(this);
            }
        }
        outANameArgumentList(node);
    }

    public void inAExpressionArgumentListTail(AExpressionArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgumentListTail(AExpressionArgumentListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgumentListTail(AExpressionArgumentListTail node)
    {
        inAExpressionArgumentListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAExpressionArgumentListTail(node);
    }

    public void inANameArgumentListTail(ANameArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outANameArgumentListTail(ANameArgumentListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameArgumentListTail(ANameArgumentListTail node)
    {
        inANameArgumentListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameArgumentListTail(node);
    }

    public void inAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        inAPrimitiveArrayCreationExpression(node);
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getDimExprs() != null)
        {
            node.getDimExprs().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayCreationExpression(node);
    }

    public void inAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        inAClassArrayCreationExpression(node);
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        if(node.getDimExprs() != null)
        {
            node.getDimExprs().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayCreationExpression(node);
    }

    public void inAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        inAPrimitiveInitializerArrayCreationExpression(node);
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAPrimitiveInitializerArrayCreationExpression(node);
    }

    public void inAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        inAClassInitializerArrayCreationExpression(node);
        if(node.getNewKeyword() != null)
        {
            node.getNewKeyword().apply(this);
        }
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAClassInitializerArrayCreationExpression(node);
    }

    public void inAExprDimExprs(AExprDimExprs node)
    {
        defaultIn(node);
    }

    public void outAExprDimExprs(AExprDimExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprDimExprs(AExprDimExprs node)
    {
        inAExprDimExprs(node);
        if(node.getDimExpr() != null)
        {
            node.getDimExpr().apply(this);
        }
        outAExprDimExprs(node);
    }

    public void inAExprsDimExprs(AExprsDimExprs node)
    {
        defaultIn(node);
    }

    public void outAExprsDimExprs(AExprsDimExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprsDimExprs(AExprsDimExprs node)
    {
        inAExprsDimExprs(node);
        if(node.getDimExprs() != null)
        {
            node.getDimExprs().apply(this);
        }
        if(node.getDimExpr() != null)
        {
            node.getDimExpr().apply(this);
        }
        outAExprsDimExprs(node);
    }

    public void inAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDimExpr(AExpressionDimExpr node)
    {
        inAExpressionDimExpr(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAExpressionDimExpr(node);
    }

    public void inANameDimExpr(ANameDimExpr node)
    {
        defaultIn(node);
    }

    public void outANameDimExpr(ANameDimExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameDimExpr(ANameDimExpr node)
    {
        inANameDimExpr(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outANameDimExpr(node);
    }

    public void inADim(ADim node)
    {
        defaultIn(node);
    }

    public void outADim(ADim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        inADim(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outADim(node);
    }

    public void inAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        inAPrimaryFieldAccess(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPrimaryFieldAccess(node);
    }

    public void inASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultIn(node);
    }

    public void outASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        inASuperFieldAccess(node);
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASuperFieldAccess(node);
    }

    public void inAClassFieldAccess(AClassFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAClassFieldAccess(AClassFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassFieldAccess(AClassFieldAccess node)
    {
        inAClassFieldAccess(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getDot1() != null)
        {
            node.getDot1().apply(this);
        }
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getDot2() != null)
        {
            node.getDot2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassFieldAccess(node);
    }

    public void inAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        inAMethodMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMethodMethodInvocation(node);
    }

    public void inAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        inAPrimaryMethodInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPrimaryMethodInvocation(node);
    }

    public void inASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        inASuperMethodInvocation(node);
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASuperMethodInvocation(node);
    }

    public void inAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassMethodInvocation(AClassMethodInvocation node)
    {
        inAClassMethodInvocation(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getDot1() != null)
        {
            node.getDot1().apply(this);
        }
        if(node.getSuperKeyword() != null)
        {
            node.getSuperKeyword().apply(this);
        }
        if(node.getDot2() != null)
        {
            node.getDot2().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAClassMethodInvocation(node);
    }

    public void inATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeMethodInvocation(ATypeMethodInvocation node)
    {
        inATypeMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATypeMethodInvocation(node);
    }

    public void inAExpressionArrayAccess(AExpressionArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAExpressionArrayAccess(AExpressionArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArrayAccess(AExpressionArrayAccess node)
    {
        inAExpressionArrayAccess(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAExpressionArrayAccess(node);
    }

    public void inAExpressionNameArrayAccess(AExpressionNameArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAExpressionNameArrayAccess(AExpressionNameArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionNameArrayAccess(AExpressionNameArrayAccess node)
    {
        inAExpressionNameArrayAccess(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAExpressionNameArrayAccess(node);
    }

    public void inAPrimaryArrayAccess(APrimaryArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryArrayAccess(APrimaryArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryArrayAccess(APrimaryArrayAccess node)
    {
        inAPrimaryArrayAccess(node);
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAPrimaryArrayAccess(node);
    }

    public void inAPrimaryNameArrayAccess(APrimaryNameArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryNameArrayAccess(APrimaryNameArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryNameArrayAccess(APrimaryNameArrayAccess node)
    {
        inAPrimaryNameArrayAccess(node);
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAPrimaryNameArrayAccess(node);
    }

    public void inAPrimaryPostfixExpressionNoName(APrimaryPostfixExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPrimaryPostfixExpressionNoName(APrimaryPostfixExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryPostfixExpressionNoName(APrimaryPostfixExpressionNoName node)
    {
        inAPrimaryPostfixExpressionNoName(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryPostfixExpressionNoName(node);
    }

    public void inAIncrementPostfixExpressionNoName(AIncrementPostfixExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAIncrementPostfixExpressionNoName(AIncrementPostfixExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementPostfixExpressionNoName(AIncrementPostfixExpressionNoName node)
    {
        inAIncrementPostfixExpressionNoName(node);
        if(node.getPostIncrementExpression() != null)
        {
            node.getPostIncrementExpression().apply(this);
        }
        outAIncrementPostfixExpressionNoName(node);
    }

    public void inADecrementPostfixExpressionNoName(ADecrementPostfixExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outADecrementPostfixExpressionNoName(ADecrementPostfixExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementPostfixExpressionNoName(ADecrementPostfixExpressionNoName node)
    {
        inADecrementPostfixExpressionNoName(node);
        if(node.getPostDecrementExpression() != null)
        {
            node.getPostDecrementExpression().apply(this);
        }
        outADecrementPostfixExpressionNoName(node);
    }

    public void inAPostfixPostIncrementExpression(APostfixPostIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixPostIncrementExpression(APostfixPostIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixPostIncrementExpression(APostfixPostIncrementExpression node)
    {
        inAPostfixPostIncrementExpression(node);
        if(node.getPostfixExpressionNoName() != null)
        {
            node.getPostfixExpressionNoName().apply(this);
        }
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        outAPostfixPostIncrementExpression(node);
    }

    public void inANamePostIncrementExpression(ANamePostIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outANamePostIncrementExpression(ANamePostIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePostIncrementExpression(ANamePostIncrementExpression node)
    {
        inANamePostIncrementExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        outANamePostIncrementExpression(node);
    }

    public void inAPostfixPostDecrementExpression(APostfixPostDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixPostDecrementExpression(APostfixPostDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixPostDecrementExpression(APostfixPostDecrementExpression node)
    {
        inAPostfixPostDecrementExpression(node);
        if(node.getPostfixExpressionNoName() != null)
        {
            node.getPostfixExpressionNoName().apply(this);
        }
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        outAPostfixPostDecrementExpression(node);
    }

    public void inANamePostDecrementExpression(ANamePostDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outANamePostDecrementExpression(ANamePostDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePostDecrementExpression(ANamePostDecrementExpression node)
    {
        inANamePostDecrementExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        outANamePostDecrementExpression(node);
    }

    public void inAIncrementUnaryExpressionNoName(AIncrementUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAIncrementUnaryExpressionNoName(AIncrementUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementUnaryExpressionNoName(AIncrementUnaryExpressionNoName node)
    {
        inAIncrementUnaryExpressionNoName(node);
        if(node.getPreIncrementExpression() != null)
        {
            node.getPreIncrementExpression().apply(this);
        }
        outAIncrementUnaryExpressionNoName(node);
    }

    public void inADecrementUnaryExpressionNoName(ADecrementUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outADecrementUnaryExpressionNoName(ADecrementUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementUnaryExpressionNoName(ADecrementUnaryExpressionNoName node)
    {
        inADecrementUnaryExpressionNoName(node);
        if(node.getPreDecrementExpression() != null)
        {
            node.getPreDecrementExpression().apply(this);
        }
        outADecrementUnaryExpressionNoName(node);
    }

    public void inAPlusUnaryExpressionNoName(APlusUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryExpressionNoName(APlusUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusUnaryExpressionNoName(APlusUnaryExpressionNoName node)
    {
        inAPlusUnaryExpressionNoName(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAPlusUnaryExpressionNoName(node);
    }

    public void inAPlusNameUnaryExpressionNoName(APlusNameUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPlusNameUnaryExpressionNoName(APlusNameUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusNameUnaryExpressionNoName(APlusNameUnaryExpressionNoName node)
    {
        inAPlusNameUnaryExpressionNoName(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPlusNameUnaryExpressionNoName(node);
    }

    public void inAMinusUnaryExpressionNoName(AMinusUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryExpressionNoName(AMinusUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryExpressionNoName(AMinusUnaryExpressionNoName node)
    {
        inAMinusUnaryExpressionNoName(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAMinusUnaryExpressionNoName(node);
    }

    public void inAMinusNameUnaryExpressionNoName(AMinusNameUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMinusNameUnaryExpressionNoName(AMinusNameUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusNameUnaryExpressionNoName(AMinusNameUnaryExpressionNoName node)
    {
        inAMinusNameUnaryExpressionNoName(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAMinusNameUnaryExpressionNoName(node);
    }

    public void inAUnaryUnaryExpressionNoName(AUnaryUnaryExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUnaryUnaryExpressionNoName(AUnaryUnaryExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryUnaryExpressionNoName(AUnaryUnaryExpressionNoName node)
    {
        inAUnaryUnaryExpressionNoName(node);
        if(node.getUnaryExpressionNotPlusMinusNoName() != null)
        {
            node.getUnaryExpressionNotPlusMinusNoName().apply(this);
        }
        outAUnaryUnaryExpressionNoName(node);
    }

    public void inAUnaryPreIncrementExpression(AUnaryPreIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryPreIncrementExpression(AUnaryPreIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryPreIncrementExpression(AUnaryPreIncrementExpression node)
    {
        inAUnaryPreIncrementExpression(node);
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAUnaryPreIncrementExpression(node);
    }

    public void inANamePreIncrementExpression(ANamePreIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outANamePreIncrementExpression(ANamePreIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePreIncrementExpression(ANamePreIncrementExpression node)
    {
        inANamePreIncrementExpression(node);
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePreIncrementExpression(node);
    }

    public void inAUnaryPreDecrementExpression(AUnaryPreDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryPreDecrementExpression(AUnaryPreDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryPreDecrementExpression(AUnaryPreDecrementExpression node)
    {
        inAUnaryPreDecrementExpression(node);
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAUnaryPreDecrementExpression(node);
    }

    public void inANamePreDecrementExpression(ANamePreDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outANamePreDecrementExpression(ANamePreDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePreDecrementExpression(ANamePreDecrementExpression node)
    {
        inANamePreDecrementExpression(node);
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePreDecrementExpression(node);
    }

    public void inAPostfixUnaryExpressionNotPlusMinusNoName(APostfixUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outAPostfixUnaryExpressionNotPlusMinusNoName(APostfixUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixUnaryExpressionNotPlusMinusNoName(APostfixUnaryExpressionNotPlusMinusNoName node)
    {
        inAPostfixUnaryExpressionNotPlusMinusNoName(node);
        if(node.getPostfixExpressionNoName() != null)
        {
            node.getPostfixExpressionNoName().apply(this);
        }
        outAPostfixUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inATildeUnaryExpressionNotPlusMinusNoName(ATildeUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outATildeUnaryExpressionNotPlusMinusNoName(ATildeUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildeUnaryExpressionNotPlusMinusNoName(ATildeUnaryExpressionNotPlusMinusNoName node)
    {
        inATildeUnaryExpressionNotPlusMinusNoName(node);
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outATildeUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inATildeNameUnaryExpressionNotPlusMinusNoName(ATildeNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outATildeNameUnaryExpressionNotPlusMinusNoName(ATildeNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildeNameUnaryExpressionNotPlusMinusNoName(ATildeNameUnaryExpressionNotPlusMinusNoName node)
    {
        inATildeNameUnaryExpressionNotPlusMinusNoName(node);
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATildeNameUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inAEmarkUnaryExpressionNotPlusMinusNoName(AEmarkUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outAEmarkUnaryExpressionNotPlusMinusNoName(AEmarkUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmarkUnaryExpressionNotPlusMinusNoName(AEmarkUnaryExpressionNotPlusMinusNoName node)
    {
        inAEmarkUnaryExpressionNotPlusMinusNoName(node);
        if(node.getEmark() != null)
        {
            node.getEmark().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAEmarkUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inAEmarkNameUnaryExpressionNotPlusMinusNoName(AEmarkNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outAEmarkNameUnaryExpressionNotPlusMinusNoName(AEmarkNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmarkNameUnaryExpressionNotPlusMinusNoName(AEmarkNameUnaryExpressionNotPlusMinusNoName node)
    {
        inAEmarkNameUnaryExpressionNotPlusMinusNoName(node);
        if(node.getEmark() != null)
        {
            node.getEmark().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAEmarkNameUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inACastUnaryExpressionNotPlusMinusNoName(ACastUnaryExpressionNotPlusMinusNoName node)
    {
        defaultIn(node);
    }

    public void outACastUnaryExpressionNotPlusMinusNoName(ACastUnaryExpressionNotPlusMinusNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastUnaryExpressionNotPlusMinusNoName(ACastUnaryExpressionNotPlusMinusNoName node)
    {
        inACastUnaryExpressionNotPlusMinusNoName(node);
        if(node.getCastExpression() != null)
        {
            node.getCastExpression().apply(this);
        }
        outACastUnaryExpressionNotPlusMinusNoName(node);
    }

    public void inAPrimitiveCastExpression(APrimitiveCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveCastExpression(APrimitiveCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveCastExpression(APrimitiveCastExpression node)
    {
        inAPrimitiveCastExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAPrimitiveCastExpression(node);
    }

    public void inAPrimitiveNameCastExpression(APrimitiveNameCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveNameCastExpression(APrimitiveNameCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveNameCastExpression(APrimitiveNameCastExpression node)
    {
        inAPrimitiveNameCastExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPrimitiveNameCastExpression(node);
    }

    public void inAReferenceCastExpression(AReferenceCastExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceCastExpression(AReferenceCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceCastExpression(AReferenceCastExpression node)
    {
        inAReferenceCastExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getUnaryExpressionNotPlusMinusNoName() != null)
        {
            node.getUnaryExpressionNotPlusMinusNoName().apply(this);
        }
        outAReferenceCastExpression(node);
    }

    public void inAReferenceNameCastExpression(AReferenceNameCastExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceNameCastExpression(AReferenceNameCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceNameCastExpression(AReferenceNameCastExpression node)
    {
        inAReferenceNameCastExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAReferenceNameCastExpression(node);
    }

    public void inAUnaryMultiplicativeExpressionNoName(AUnaryMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUnaryMultiplicativeExpressionNoName(AUnaryMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryMultiplicativeExpressionNoName(AUnaryMultiplicativeExpressionNoName node)
    {
        inAUnaryMultiplicativeExpressionNoName(node);
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAUnaryMultiplicativeExpressionNoName(node);
    }

    public void inAStarMultiplicativeExpressionNoName(AStarMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAStarMultiplicativeExpressionNoName(AStarMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMultiplicativeExpressionNoName(AStarMultiplicativeExpressionNoName node)
    {
        inAStarMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAStarMultiplicativeExpressionNoName(node);
    }

    public void inAStarNameMultiplicativeExpressionNoName(AStarNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAStarNameMultiplicativeExpressionNoName(AStarNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarNameMultiplicativeExpressionNoName(AStarNameMultiplicativeExpressionNoName node)
    {
        inAStarNameMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAStarNameMultiplicativeExpressionNoName(node);
    }

    public void inANameStarMultiplicativeExpressionNoName(ANameStarMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameStarMultiplicativeExpressionNoName(ANameStarMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameStarMultiplicativeExpressionNoName(ANameStarMultiplicativeExpressionNoName node)
    {
        inANameStarMultiplicativeExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outANameStarMultiplicativeExpressionNoName(node);
    }

    public void inANameStarNameMultiplicativeExpressionNoName(ANameStarNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameStarNameMultiplicativeExpressionNoName(ANameStarNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameStarNameMultiplicativeExpressionNoName(ANameStarNameMultiplicativeExpressionNoName node)
    {
        inANameStarNameMultiplicativeExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameStarNameMultiplicativeExpressionNoName(node);
    }

    public void inASlashMultiplicativeExpressionNoName(ASlashMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outASlashMultiplicativeExpressionNoName(ASlashMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashMultiplicativeExpressionNoName(ASlashMultiplicativeExpressionNoName node)
    {
        inASlashMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outASlashMultiplicativeExpressionNoName(node);
    }

    public void inASlashNameMultiplicativeExpressionNoName(ASlashNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outASlashNameMultiplicativeExpressionNoName(ASlashNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashNameMultiplicativeExpressionNoName(ASlashNameMultiplicativeExpressionNoName node)
    {
        inASlashNameMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASlashNameMultiplicativeExpressionNoName(node);
    }

    public void inANameSlashMultiplicativeExpressionNoName(ANameSlashMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameSlashMultiplicativeExpressionNoName(ANameSlashMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameSlashMultiplicativeExpressionNoName(ANameSlashMultiplicativeExpressionNoName node)
    {
        inANameSlashMultiplicativeExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outANameSlashMultiplicativeExpressionNoName(node);
    }

    public void inANameSlashNameMultiplicativeExpressionNoName(ANameSlashNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameSlashNameMultiplicativeExpressionNoName(ANameSlashNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameSlashNameMultiplicativeExpressionNoName(ANameSlashNameMultiplicativeExpressionNoName node)
    {
        inANameSlashNameMultiplicativeExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameSlashNameMultiplicativeExpressionNoName(node);
    }

    public void inAPercentMultiplicativeExpressionNoName(APercentMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPercentMultiplicativeExpressionNoName(APercentMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentMultiplicativeExpressionNoName(APercentMultiplicativeExpressionNoName node)
    {
        inAPercentMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outAPercentMultiplicativeExpressionNoName(node);
    }

    public void inAPercentNameMultiplicativeExpressionNoName(APercentNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPercentNameMultiplicativeExpressionNoName(APercentNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentNameMultiplicativeExpressionNoName(APercentNameMultiplicativeExpressionNoName node)
    {
        inAPercentNameMultiplicativeExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPercentNameMultiplicativeExpressionNoName(node);
    }

    public void inANamePercentMultiplicativeExpressionNoName(ANamePercentMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANamePercentMultiplicativeExpressionNoName(ANamePercentMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePercentMultiplicativeExpressionNoName(ANamePercentMultiplicativeExpressionNoName node)
    {
        inANamePercentMultiplicativeExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getUnaryExpressionNoName() != null)
        {
            node.getUnaryExpressionNoName().apply(this);
        }
        outANamePercentMultiplicativeExpressionNoName(node);
    }

    public void inANamePercentNameMultiplicativeExpressionNoName(ANamePercentNameMultiplicativeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANamePercentNameMultiplicativeExpressionNoName(ANamePercentNameMultiplicativeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePercentNameMultiplicativeExpressionNoName(ANamePercentNameMultiplicativeExpressionNoName node)
    {
        inANamePercentNameMultiplicativeExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANamePercentNameMultiplicativeExpressionNoName(node);
    }

    public void inAMultiplicativeAdditiveExpressionNoName(AMultiplicativeAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeAdditiveExpressionNoName(AMultiplicativeAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicativeAdditiveExpressionNoName(AMultiplicativeAdditiveExpressionNoName node)
    {
        inAMultiplicativeAdditiveExpressionNoName(node);
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        outAMultiplicativeAdditiveExpressionNoName(node);
    }

    public void inAPlusAdditiveExpressionNoName(APlusAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveExpressionNoName(APlusAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveExpressionNoName(APlusAdditiveExpressionNoName node)
    {
        inAPlusAdditiveExpressionNoName(node);
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        outAPlusAdditiveExpressionNoName(node);
    }

    public void inAPlusNameAdditiveExpressionNoName(APlusNameAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPlusNameAdditiveExpressionNoName(APlusNameAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusNameAdditiveExpressionNoName(APlusNameAdditiveExpressionNoName node)
    {
        inAPlusNameAdditiveExpressionNoName(node);
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPlusNameAdditiveExpressionNoName(node);
    }

    public void inANamePlusAdditiveExpressionNoName(ANamePlusAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANamePlusAdditiveExpressionNoName(ANamePlusAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePlusAdditiveExpressionNoName(ANamePlusAdditiveExpressionNoName node)
    {
        inANamePlusAdditiveExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        outANamePlusAdditiveExpressionNoName(node);
    }

    public void inANamePlusNameAdditiveExpressionNoName(ANamePlusNameAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANamePlusNameAdditiveExpressionNoName(ANamePlusNameAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePlusNameAdditiveExpressionNoName(ANamePlusNameAdditiveExpressionNoName node)
    {
        inANamePlusNameAdditiveExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANamePlusNameAdditiveExpressionNoName(node);
    }

    public void inAMinusAdditiveExpressionNoName(AMinusAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveExpressionNoName(AMinusAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveExpressionNoName(AMinusAdditiveExpressionNoName node)
    {
        inAMinusAdditiveExpressionNoName(node);
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        outAMinusAdditiveExpressionNoName(node);
    }

    public void inAMinusNameAdditiveExpressionNoName(AMinusNameAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMinusNameAdditiveExpressionNoName(AMinusNameAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusNameAdditiveExpressionNoName(AMinusNameAdditiveExpressionNoName node)
    {
        inAMinusNameAdditiveExpressionNoName(node);
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAMinusNameAdditiveExpressionNoName(node);
    }

    public void inANameMinusAdditiveExpressionNoName(ANameMinusAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameMinusAdditiveExpressionNoName(ANameMinusAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameMinusAdditiveExpressionNoName(ANameMinusAdditiveExpressionNoName node)
    {
        inANameMinusAdditiveExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpressionNoName() != null)
        {
            node.getMultiplicativeExpressionNoName().apply(this);
        }
        outANameMinusAdditiveExpressionNoName(node);
    }

    public void inANameMinusNameAdditiveExpressionNoName(ANameMinusNameAdditiveExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameMinusNameAdditiveExpressionNoName(ANameMinusNameAdditiveExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameMinusNameAdditiveExpressionNoName(ANameMinusNameAdditiveExpressionNoName node)
    {
        inANameMinusNameAdditiveExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameMinusNameAdditiveExpressionNoName(node);
    }

    public void inAAdditiveShiftExpressionNoName(AAdditiveShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAdditiveShiftExpressionNoName(AAdditiveShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveShiftExpressionNoName(AAdditiveShiftExpressionNoName node)
    {
        inAAdditiveShiftExpressionNoName(node);
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outAAdditiveShiftExpressionNoName(node);
    }

    public void inAShlShiftExpressionNoName(AShlShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShlShiftExpressionNoName(AShlShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlShiftExpressionNoName(AShlShiftExpressionNoName node)
    {
        inAShlShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outAShlShiftExpressionNoName(node);
    }

    public void inAShlNameShiftExpressionNoName(AShlNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShlNameShiftExpressionNoName(AShlNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlNameShiftExpressionNoName(AShlNameShiftExpressionNoName node)
    {
        inAShlNameShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAShlNameShiftExpressionNoName(node);
    }

    public void inANameShlShiftExpressionNoName(ANameShlShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameShlShiftExpressionNoName(ANameShlShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameShlShiftExpressionNoName(ANameShlShiftExpressionNoName node)
    {
        inANameShlShiftExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outANameShlShiftExpressionNoName(node);
    }

    public void inANameShlNameShiftExpressionNoName(ANameShlNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameShlNameShiftExpressionNoName(ANameShlNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameShlNameShiftExpressionNoName(ANameShlNameShiftExpressionNoName node)
    {
        inANameShlNameShiftExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameShlNameShiftExpressionNoName(node);
    }

    public void inAShrShiftExpressionNoName(AShrShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShrShiftExpressionNoName(AShrShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrShiftExpressionNoName(AShrShiftExpressionNoName node)
    {
        inAShrShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outAShrShiftExpressionNoName(node);
    }

    public void inAShrNameShiftExpressionNoName(AShrNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShrNameShiftExpressionNoName(AShrNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrNameShiftExpressionNoName(AShrNameShiftExpressionNoName node)
    {
        inAShrNameShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAShrNameShiftExpressionNoName(node);
    }

    public void inANameShrShiftExpressionNoName(ANameShrShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameShrShiftExpressionNoName(ANameShrShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameShrShiftExpressionNoName(ANameShrShiftExpressionNoName node)
    {
        inANameShrShiftExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outANameShrShiftExpressionNoName(node);
    }

    public void inANameShrNameShiftExpressionNoName(ANameShrNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameShrNameShiftExpressionNoName(ANameShrNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameShrNameShiftExpressionNoName(ANameShrNameShiftExpressionNoName node)
    {
        inANameShrNameShiftExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameShrNameShiftExpressionNoName(node);
    }

    public void inAUshrShiftExpressionNoName(AUshrShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUshrShiftExpressionNoName(AUshrShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrShiftExpressionNoName(AUshrShiftExpressionNoName node)
    {
        inAUshrShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outAUshrShiftExpressionNoName(node);
    }

    public void inAUshrNameShiftExpressionNoName(AUshrNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUshrNameShiftExpressionNoName(AUshrNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrNameShiftExpressionNoName(AUshrNameShiftExpressionNoName node)
    {
        inAUshrNameShiftExpressionNoName(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAUshrNameShiftExpressionNoName(node);
    }

    public void inANameUshrShiftExpressionNoName(ANameUshrShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameUshrShiftExpressionNoName(ANameUshrShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameUshrShiftExpressionNoName(ANameUshrShiftExpressionNoName node)
    {
        inANameUshrShiftExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getAdditiveExpressionNoName() != null)
        {
            node.getAdditiveExpressionNoName().apply(this);
        }
        outANameUshrShiftExpressionNoName(node);
    }

    public void inANameUshrNameShiftExpressionNoName(ANameUshrNameShiftExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameUshrNameShiftExpressionNoName(ANameUshrNameShiftExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameUshrNameShiftExpressionNoName(ANameUshrNameShiftExpressionNoName node)
    {
        inANameUshrNameShiftExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameUshrNameShiftExpressionNoName(node);
    }

    public void inANoInstanceofRelationalExpressionNoName(ANoInstanceofRelationalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANoInstanceofRelationalExpressionNoName(ANoInstanceofRelationalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoInstanceofRelationalExpressionNoName(ANoInstanceofRelationalExpressionNoName node)
    {
        inANoInstanceofRelationalExpressionNoName(node);
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outANoInstanceofRelationalExpressionNoName(node);
    }

    public void inAInstanceofRelationalExpressionNoName(AInstanceofRelationalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAInstanceofRelationalExpressionNoName(AInstanceofRelationalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofRelationalExpressionNoName(AInstanceofRelationalExpressionNoName node)
    {
        inAInstanceofRelationalExpressionNoName(node);
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        if(node.getInstanceofKeyword() != null)
        {
            node.getInstanceofKeyword().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAInstanceofRelationalExpressionNoName(node);
    }

    public void inANameInstanceofRelationalExpressionNoName(ANameInstanceofRelationalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameInstanceofRelationalExpressionNoName(ANameInstanceofRelationalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameInstanceofRelationalExpressionNoName(ANameInstanceofRelationalExpressionNoName node)
    {
        inANameInstanceofRelationalExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getInstanceofKeyword() != null)
        {
            node.getInstanceofKeyword().apply(this);
        }
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outANameInstanceofRelationalExpressionNoName(node);
    }

    public void inAShiftRelationalExpressionNoNameNoInstanceof(AShiftRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outAShiftRelationalExpressionNoNameNoInstanceof(AShiftRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShiftRelationalExpressionNoNameNoInstanceof(AShiftRelationalExpressionNoNameNoInstanceof node)
    {
        inAShiftRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        outAShiftRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inALtRelationalExpressionNoNameNoInstanceof(ALtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outALtRelationalExpressionNoNameNoInstanceof(ALtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtRelationalExpressionNoNameNoInstanceof(ALtRelationalExpressionNoNameNoInstanceof node)
    {
        inALtRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outALtRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inALtNameRelationalExpressionNoNameNoInstanceof(ALtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outALtNameRelationalExpressionNoNameNoInstanceof(ALtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtNameRelationalExpressionNoNameNoInstanceof(ALtNameRelationalExpressionNoNameNoInstanceof node)
    {
        inALtNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outALtNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameLtRelationalExpressionNoNameNoInstanceof(ANameLtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameLtRelationalExpressionNoNameNoInstanceof(ANameLtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameLtRelationalExpressionNoNameNoInstanceof(ANameLtRelationalExpressionNoNameNoInstanceof node)
    {
        inANameLtRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outANameLtRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameLtNameRelationalExpressionNoNameNoInstanceof(ANameLtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameLtNameRelationalExpressionNoNameNoInstanceof(ANameLtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameLtNameRelationalExpressionNoNameNoInstanceof(ANameLtNameRelationalExpressionNoNameNoInstanceof node)
    {
        inANameLtNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameLtNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inAGtRelationalExpressionNoNameNoInstanceof(AGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outAGtRelationalExpressionNoNameNoInstanceof(AGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtRelationalExpressionNoNameNoInstanceof(AGtRelationalExpressionNoNameNoInstanceof node)
    {
        inAGtRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outAGtRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inAGtNameRelationalExpressionNoNameNoInstanceof(AGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outAGtNameRelationalExpressionNoNameNoInstanceof(AGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtNameRelationalExpressionNoNameNoInstanceof(AGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        inAGtNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAGtNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameGtRelationalExpressionNoNameNoInstanceof(ANameGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameGtRelationalExpressionNoNameNoInstanceof(ANameGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameGtRelationalExpressionNoNameNoInstanceof(ANameGtRelationalExpressionNoNameNoInstanceof node)
    {
        inANameGtRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outANameGtRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameGtNameRelationalExpressionNoNameNoInstanceof(ANameGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameGtNameRelationalExpressionNoNameNoInstanceof(ANameGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameGtNameRelationalExpressionNoNameNoInstanceof(ANameGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        inANameGtNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameGtNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inALteqRelationalExpressionNoNameNoInstanceof(ALteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outALteqRelationalExpressionNoNameNoInstanceof(ALteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqRelationalExpressionNoNameNoInstanceof(ALteqRelationalExpressionNoNameNoInstanceof node)
    {
        inALteqRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outALteqRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inALteqNameRelationalExpressionNoNameNoInstanceof(ALteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outALteqNameRelationalExpressionNoNameNoInstanceof(ALteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqNameRelationalExpressionNoNameNoInstanceof(ALteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        inALteqNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outALteqNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameLteqRelationalExpressionNoNameNoInstanceof(ANameLteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameLteqRelationalExpressionNoNameNoInstanceof(ANameLteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameLteqRelationalExpressionNoNameNoInstanceof(ANameLteqRelationalExpressionNoNameNoInstanceof node)
    {
        inANameLteqRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outANameLteqRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameLteqNameRelationalExpressionNoNameNoInstanceof(ANameLteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameLteqNameRelationalExpressionNoNameNoInstanceof(ANameLteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameLteqNameRelationalExpressionNoNameNoInstanceof(ANameLteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        inANameLteqNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameLteqNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inAGteqRelationalExpressionNoNameNoInstanceof(AGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outAGteqRelationalExpressionNoNameNoInstanceof(AGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqRelationalExpressionNoNameNoInstanceof(AGteqRelationalExpressionNoNameNoInstanceof node)
    {
        inAGteqRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outAGteqRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inAGteqNameRelationalExpressionNoNameNoInstanceof(AGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outAGteqNameRelationalExpressionNoNameNoInstanceof(AGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqNameRelationalExpressionNoNameNoInstanceof(AGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        inAGteqNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getShiftExpressionNoName() != null)
        {
            node.getShiftExpressionNoName().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAGteqNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameGteqRelationalExpressionNoNameNoInstanceof(ANameGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameGteqRelationalExpressionNoNameNoInstanceof(ANameGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameGteqRelationalExpressionNoNameNoInstanceof(ANameGteqRelationalExpressionNoNameNoInstanceof node)
    {
        inANameGteqRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getRelationalExpressionNoNameNoInstanceof() != null)
        {
            node.getRelationalExpressionNoNameNoInstanceof().apply(this);
        }
        outANameGteqRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inANameGteqNameRelationalExpressionNoNameNoInstanceof(ANameGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultIn(node);
    }

    public void outANameGteqNameRelationalExpressionNoNameNoInstanceof(ANameGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameGteqNameRelationalExpressionNoNameNoInstanceof(ANameGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        inANameGteqNameRelationalExpressionNoNameNoInstanceof(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameGteqNameRelationalExpressionNoNameNoInstanceof(node);
    }

    public void inARelationalEqualityExpressionNoName(ARelationalEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outARelationalEqualityExpressionNoName(ARelationalEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationalEqualityExpressionNoName(ARelationalEqualityExpressionNoName node)
    {
        inARelationalEqualityExpressionNoName(node);
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        outARelationalEqualityExpressionNoName(node);
    }

    public void inAEqEqualityExpressionNoName(AEqEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEqEqualityExpressionNoName(AEqEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqEqualityExpressionNoName(AEqEqualityExpressionNoName node)
    {
        inAEqEqualityExpressionNoName(node);
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        outAEqEqualityExpressionNoName(node);
    }

    public void inAEqNameEqualityExpressionNoName(AEqNameEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEqNameEqualityExpressionNoName(AEqNameEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqNameEqualityExpressionNoName(AEqNameEqualityExpressionNoName node)
    {
        inAEqNameEqualityExpressionNoName(node);
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAEqNameEqualityExpressionNoName(node);
    }

    public void inANameEqEqualityExpressionNoName(ANameEqEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameEqEqualityExpressionNoName(ANameEqEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameEqEqualityExpressionNoName(ANameEqEqualityExpressionNoName node)
    {
        inANameEqEqualityExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        outANameEqEqualityExpressionNoName(node);
    }

    public void inANameEqNameEqualityExpressionNoName(ANameEqNameEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameEqNameEqualityExpressionNoName(ANameEqNameEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameEqNameEqualityExpressionNoName(ANameEqNameEqualityExpressionNoName node)
    {
        inANameEqNameEqualityExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameEqNameEqualityExpressionNoName(node);
    }

    public void inANeqEqualityExpressionNoName(ANeqEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANeqEqualityExpressionNoName(ANeqEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqEqualityExpressionNoName(ANeqEqualityExpressionNoName node)
    {
        inANeqEqualityExpressionNoName(node);
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        outANeqEqualityExpressionNoName(node);
    }

    public void inANeqNameEqualityExpressionNoName(ANeqNameEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANeqNameEqualityExpressionNoName(ANeqNameEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqNameEqualityExpressionNoName(ANeqNameEqualityExpressionNoName node)
    {
        inANeqNameEqualityExpressionNoName(node);
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANeqNameEqualityExpressionNoName(node);
    }

    public void inANameNeqEqualityExpressionNoName(ANameNeqEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameNeqEqualityExpressionNoName(ANameNeqEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameNeqEqualityExpressionNoName(ANameNeqEqualityExpressionNoName node)
    {
        inANameNeqEqualityExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getRelationalExpressionNoName() != null)
        {
            node.getRelationalExpressionNoName().apply(this);
        }
        outANameNeqEqualityExpressionNoName(node);
    }

    public void inANameNeqNameEqualityExpressionNoName(ANameNeqNameEqualityExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameNeqNameEqualityExpressionNoName(ANameNeqNameEqualityExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameNeqNameEqualityExpressionNoName(ANameNeqNameEqualityExpressionNoName node)
    {
        inANameNeqNameEqualityExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameNeqNameEqualityExpressionNoName(node);
    }

    public void inAEqualityAndExpressionNoName(AEqualityAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEqualityAndExpressionNoName(AEqualityAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualityAndExpressionNoName(AEqualityAndExpressionNoName node)
    {
        inAEqualityAndExpressionNoName(node);
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        outAEqualityAndExpressionNoName(node);
    }

    public void inAAmpAndExpressionNoName(AAmpAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAmpAndExpressionNoName(AAmpAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAndExpressionNoName(AAmpAndExpressionNoName node)
    {
        inAAmpAndExpressionNoName(node);
        if(node.getAndExpressionNoName() != null)
        {
            node.getAndExpressionNoName().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        outAAmpAndExpressionNoName(node);
    }

    public void inAAmpNameAndExpressionNoName(AAmpNameAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAmpNameAndExpressionNoName(AAmpNameAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpNameAndExpressionNoName(AAmpNameAndExpressionNoName node)
    {
        inAAmpNameAndExpressionNoName(node);
        if(node.getAndExpressionNoName() != null)
        {
            node.getAndExpressionNoName().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAmpNameAndExpressionNoName(node);
    }

    public void inANameAmpAndExpressionNoName(ANameAmpAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameAmpAndExpressionNoName(ANameAmpAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAmpAndExpressionNoName(ANameAmpAndExpressionNoName node)
    {
        inANameAmpAndExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getEqualityExpressionNoName() != null)
        {
            node.getEqualityExpressionNoName().apply(this);
        }
        outANameAmpAndExpressionNoName(node);
    }

    public void inANameAmpNameAndExpressionNoName(ANameAmpNameAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameAmpNameAndExpressionNoName(ANameAmpNameAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAmpNameAndExpressionNoName(ANameAmpNameAndExpressionNoName node)
    {
        inANameAmpNameAndExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameAmpNameAndExpressionNoName(node);
    }

    public void inAAndExclusiveOrExpressionNoName(AAndExclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAndExclusiveOrExpressionNoName(AAndExclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExclusiveOrExpressionNoName(AAndExclusiveOrExpressionNoName node)
    {
        inAAndExclusiveOrExpressionNoName(node);
        if(node.getAndExpressionNoName() != null)
        {
            node.getAndExpressionNoName().apply(this);
        }
        outAAndExclusiveOrExpressionNoName(node);
    }

    public void inACaretExclusiveOrExpressionNoName(ACaretExclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outACaretExclusiveOrExpressionNoName(ACaretExclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretExclusiveOrExpressionNoName(ACaretExclusiveOrExpressionNoName node)
    {
        inACaretExclusiveOrExpressionNoName(node);
        if(node.getExclusiveOrExpressionNoName() != null)
        {
            node.getExclusiveOrExpressionNoName().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getAndExpressionNoName() != null)
        {
            node.getAndExpressionNoName().apply(this);
        }
        outACaretExclusiveOrExpressionNoName(node);
    }

    public void inACaretNameExclusiveOrExpressionNoName(ACaretNameExclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outACaretNameExclusiveOrExpressionNoName(ACaretNameExclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretNameExclusiveOrExpressionNoName(ACaretNameExclusiveOrExpressionNoName node)
    {
        inACaretNameExclusiveOrExpressionNoName(node);
        if(node.getExclusiveOrExpressionNoName() != null)
        {
            node.getExclusiveOrExpressionNoName().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outACaretNameExclusiveOrExpressionNoName(node);
    }

    public void inANameCaretExclusiveOrExpressionNoName(ANameCaretExclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameCaretExclusiveOrExpressionNoName(ANameCaretExclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameCaretExclusiveOrExpressionNoName(ANameCaretExclusiveOrExpressionNoName node)
    {
        inANameCaretExclusiveOrExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getAndExpressionNoName() != null)
        {
            node.getAndExpressionNoName().apply(this);
        }
        outANameCaretExclusiveOrExpressionNoName(node);
    }

    public void inANameCaretNameExclusiveOrExpressionNoName(ANameCaretNameExclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameCaretNameExclusiveOrExpressionNoName(ANameCaretNameExclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameCaretNameExclusiveOrExpressionNoName(ANameCaretNameExclusiveOrExpressionNoName node)
    {
        inANameCaretNameExclusiveOrExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameCaretNameExclusiveOrExpressionNoName(node);
    }

    public void inAOrInclusiveOrExpressionNoName(AOrInclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAOrInclusiveOrExpressionNoName(AOrInclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrInclusiveOrExpressionNoName(AOrInclusiveOrExpressionNoName node)
    {
        inAOrInclusiveOrExpressionNoName(node);
        if(node.getExclusiveOrExpressionNoName() != null)
        {
            node.getExclusiveOrExpressionNoName().apply(this);
        }
        outAOrInclusiveOrExpressionNoName(node);
    }

    public void inABarInclusiveOrExpressionNoName(ABarInclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outABarInclusiveOrExpressionNoName(ABarInclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarInclusiveOrExpressionNoName(ABarInclusiveOrExpressionNoName node)
    {
        inABarInclusiveOrExpressionNoName(node);
        if(node.getInclusiveOrExpressionNoName() != null)
        {
            node.getInclusiveOrExpressionNoName().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExclusiveOrExpressionNoName() != null)
        {
            node.getExclusiveOrExpressionNoName().apply(this);
        }
        outABarInclusiveOrExpressionNoName(node);
    }

    public void inABarNameInclusiveOrExpressionNoName(ABarNameInclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outABarNameInclusiveOrExpressionNoName(ABarNameInclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarNameInclusiveOrExpressionNoName(ABarNameInclusiveOrExpressionNoName node)
    {
        inABarNameInclusiveOrExpressionNoName(node);
        if(node.getInclusiveOrExpressionNoName() != null)
        {
            node.getInclusiveOrExpressionNoName().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outABarNameInclusiveOrExpressionNoName(node);
    }

    public void inANameBarInclusiveOrExpressionNoName(ANameBarInclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameBarInclusiveOrExpressionNoName(ANameBarInclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBarInclusiveOrExpressionNoName(ANameBarInclusiveOrExpressionNoName node)
    {
        inANameBarInclusiveOrExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExclusiveOrExpressionNoName() != null)
        {
            node.getExclusiveOrExpressionNoName().apply(this);
        }
        outANameBarInclusiveOrExpressionNoName(node);
    }

    public void inANameBarNameInclusiveOrExpressionNoName(ANameBarNameInclusiveOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameBarNameInclusiveOrExpressionNoName(ANameBarNameInclusiveOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBarNameInclusiveOrExpressionNoName(ANameBarNameInclusiveOrExpressionNoName node)
    {
        inANameBarNameInclusiveOrExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameBarNameInclusiveOrExpressionNoName(node);
    }

    public void inAOrConditionalAndExpressionNoName(AOrConditionalAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAOrConditionalAndExpressionNoName(AOrConditionalAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrConditionalAndExpressionNoName(AOrConditionalAndExpressionNoName node)
    {
        inAOrConditionalAndExpressionNoName(node);
        if(node.getInclusiveOrExpressionNoName() != null)
        {
            node.getInclusiveOrExpressionNoName().apply(this);
        }
        outAOrConditionalAndExpressionNoName(node);
    }

    public void inAAmpConditionalAndExpressionNoName(AAmpConditionalAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAmpConditionalAndExpressionNoName(AAmpConditionalAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpConditionalAndExpressionNoName(AAmpConditionalAndExpressionNoName node)
    {
        inAAmpConditionalAndExpressionNoName(node);
        if(node.getConditionalAndExpressionNoName() != null)
        {
            node.getConditionalAndExpressionNoName().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getInclusiveOrExpressionNoName() != null)
        {
            node.getInclusiveOrExpressionNoName().apply(this);
        }
        outAAmpConditionalAndExpressionNoName(node);
    }

    public void inAAmpNameConditionalAndExpressionNoName(AAmpNameConditionalAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAmpNameConditionalAndExpressionNoName(AAmpNameConditionalAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpNameConditionalAndExpressionNoName(AAmpNameConditionalAndExpressionNoName node)
    {
        inAAmpNameConditionalAndExpressionNoName(node);
        if(node.getConditionalAndExpressionNoName() != null)
        {
            node.getConditionalAndExpressionNoName().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAmpNameConditionalAndExpressionNoName(node);
    }

    public void inANameAmpConditionalAndExpressionNoName(ANameAmpConditionalAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameAmpConditionalAndExpressionNoName(ANameAmpConditionalAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAmpConditionalAndExpressionNoName(ANameAmpConditionalAndExpressionNoName node)
    {
        inANameAmpConditionalAndExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getInclusiveOrExpressionNoName() != null)
        {
            node.getInclusiveOrExpressionNoName().apply(this);
        }
        outANameAmpConditionalAndExpressionNoName(node);
    }

    public void inANameAmpNameConditionalAndExpressionNoName(ANameAmpNameConditionalAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameAmpNameConditionalAndExpressionNoName(ANameAmpNameConditionalAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAmpNameConditionalAndExpressionNoName(ANameAmpNameConditionalAndExpressionNoName node)
    {
        inANameAmpNameConditionalAndExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameAmpNameConditionalAndExpressionNoName(node);
    }

    public void inAAndConditionalOrExpressionNoName(AAndConditionalOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAndConditionalOrExpressionNoName(AAndConditionalOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndConditionalOrExpressionNoName(AAndConditionalOrExpressionNoName node)
    {
        inAAndConditionalOrExpressionNoName(node);
        if(node.getConditionalAndExpressionNoName() != null)
        {
            node.getConditionalAndExpressionNoName().apply(this);
        }
        outAAndConditionalOrExpressionNoName(node);
    }

    public void inABarConditionalOrExpressionNoName(ABarConditionalOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outABarConditionalOrExpressionNoName(ABarConditionalOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarConditionalOrExpressionNoName(ABarConditionalOrExpressionNoName node)
    {
        inABarConditionalOrExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalAndExpressionNoName() != null)
        {
            node.getConditionalAndExpressionNoName().apply(this);
        }
        outABarConditionalOrExpressionNoName(node);
    }

    public void inABarNameConditionalOrExpressionNoName(ABarNameConditionalOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outABarNameConditionalOrExpressionNoName(ABarNameConditionalOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarNameConditionalOrExpressionNoName(ABarNameConditionalOrExpressionNoName node)
    {
        inABarNameConditionalOrExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outABarNameConditionalOrExpressionNoName(node);
    }

    public void inANameBarConditionalOrExpressionNoName(ANameBarConditionalOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameBarConditionalOrExpressionNoName(ANameBarConditionalOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBarConditionalOrExpressionNoName(ANameBarConditionalOrExpressionNoName node)
    {
        inANameBarConditionalOrExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalAndExpressionNoName() != null)
        {
            node.getConditionalAndExpressionNoName().apply(this);
        }
        outANameBarConditionalOrExpressionNoName(node);
    }

    public void inANameBarNameConditionalOrExpressionNoName(ANameBarNameConditionalOrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameBarNameConditionalOrExpressionNoName(ANameBarNameConditionalOrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBarNameConditionalOrExpressionNoName(ANameBarNameConditionalOrExpressionNoName node)
    {
        inANameBarNameConditionalOrExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameBarNameConditionalOrExpressionNoName(node);
    }

    public void inAOrConditionalExpressionNoName(AOrConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAOrConditionalExpressionNoName(AOrConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrConditionalExpressionNoName(AOrConditionalExpressionNoName node)
    {
        inAOrConditionalExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        outAOrConditionalExpressionNoName(node);
    }

    public void inAQmarkColonConditionalExpressionNoName(AQmarkColonConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAQmarkColonConditionalExpressionNoName(AQmarkColonConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkColonConditionalExpressionNoName(AQmarkColonConditionalExpressionNoName node)
    {
        inAQmarkColonConditionalExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outAQmarkColonConditionalExpressionNoName(node);
    }

    public void inAQmarkNameColonConditionalExpressionNoName(AQmarkNameColonConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAQmarkNameColonConditionalExpressionNoName(AQmarkNameColonConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkNameColonConditionalExpressionNoName(AQmarkNameColonConditionalExpressionNoName node)
    {
        inAQmarkNameColonConditionalExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outAQmarkNameColonConditionalExpressionNoName(node);
    }

    public void inAQmarkColonNameConditionalExpressionNoName(AQmarkColonNameConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAQmarkColonNameConditionalExpressionNoName(AQmarkColonNameConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkColonNameConditionalExpressionNoName(AQmarkColonNameConditionalExpressionNoName node)
    {
        inAQmarkColonNameConditionalExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAQmarkColonNameConditionalExpressionNoName(node);
    }

    public void inAQmarkNameColonNameConditionalExpressionNoName(AQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAQmarkNameColonNameConditionalExpressionNoName(AQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkNameColonNameConditionalExpressionNoName(AQmarkNameColonNameConditionalExpressionNoName node)
    {
        inAQmarkNameColonNameConditionalExpressionNoName(node);
        if(node.getConditionalOrExpressionNoName() != null)
        {
            node.getConditionalOrExpressionNoName().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outAQmarkNameColonNameConditionalExpressionNoName(node);
    }

    public void inANameQmarkColonConditionalExpressionNoName(ANameQmarkColonConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameQmarkColonConditionalExpressionNoName(ANameQmarkColonConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameQmarkColonConditionalExpressionNoName(ANameQmarkColonConditionalExpressionNoName node)
    {
        inANameQmarkColonConditionalExpressionNoName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outANameQmarkColonConditionalExpressionNoName(node);
    }

    public void inANameQmarkNameColonConditionalExpressionNoName(ANameQmarkNameColonConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameQmarkNameColonConditionalExpressionNoName(ANameQmarkNameColonConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameQmarkNameColonConditionalExpressionNoName(ANameQmarkNameColonConditionalExpressionNoName node)
    {
        inANameQmarkNameColonConditionalExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outANameQmarkNameColonConditionalExpressionNoName(node);
    }

    public void inANameQmarkColonNameConditionalExpressionNoName(ANameQmarkColonNameConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameQmarkColonNameConditionalExpressionNoName(ANameQmarkColonNameConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameQmarkColonNameConditionalExpressionNoName(ANameQmarkColonNameConditionalExpressionNoName node)
    {
        inANameQmarkColonNameConditionalExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        outANameQmarkColonNameConditionalExpressionNoName(node);
    }

    public void inANameQmarkNameColonNameConditionalExpressionNoName(ANameQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANameQmarkNameColonNameConditionalExpressionNoName(ANameQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameQmarkNameColonNameConditionalExpressionNoName(ANameQmarkNameColonNameConditionalExpressionNoName node)
    {
        inANameQmarkNameColonNameConditionalExpressionNoName(node);
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getName2() != null)
        {
            node.getName2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName3() != null)
        {
            node.getName3().apply(this);
        }
        outANameQmarkNameColonNameConditionalExpressionNoName(node);
    }

    public void inAExpressionAssignmentExpressionNoName(AExpressionAssignmentExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAExpressionAssignmentExpressionNoName(AExpressionAssignmentExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionAssignmentExpressionNoName(AExpressionAssignmentExpressionNoName node)
    {
        inAExpressionAssignmentExpressionNoName(node);
        if(node.getConditionalExpressionNoName() != null)
        {
            node.getConditionalExpressionNoName().apply(this);
        }
        outAExpressionAssignmentExpressionNoName(node);
    }

    public void inAAssignmentAssignmentExpressionNoName(AAssignmentAssignmentExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignmentExpressionNoName(AAssignmentAssignmentExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignmentExpressionNoName(AAssignmentAssignmentExpressionNoName node)
    {
        inAAssignmentAssignmentExpressionNoName(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentAssignmentExpressionNoName(node);
    }

    public void inAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignment(AAssignmentAssignment node)
    {
        inAAssignmentAssignment(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getAssignmentExpressionNoName() != null)
        {
            node.getAssignmentExpressionNoName().apply(this);
        }
        outAAssignmentAssignment(node);
    }

    public void inANameAssignment(ANameAssignment node)
    {
        defaultIn(node);
    }

    public void outANameAssignment(ANameAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAssignment(ANameAssignment node)
    {
        inANameAssignment(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameAssignment(node);
    }

    public void inAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        inAExpressionLeftHandSide(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAExpressionLeftHandSide(node);
    }

    public void inAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        inAFieldLeftHandSide(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldLeftHandSide(node);
    }

    public void inAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        inAArrayLeftHandSide(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayLeftHandSide(node);
    }

    public void inAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        inAAssignAssignmentOperator(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignAssignmentOperator(node);
    }

    public void inAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        inAStarAssignAssignmentOperator(node);
        if(node.getStarAssign() != null)
        {
            node.getStarAssign().apply(this);
        }
        outAStarAssignAssignmentOperator(node);
    }

    public void inASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        inASlashAssignAssignmentOperator(node);
        if(node.getSlashAssign() != null)
        {
            node.getSlashAssign().apply(this);
        }
        outASlashAssignAssignmentOperator(node);
    }

    public void inAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        inAPercentAssignAssignmentOperator(node);
        if(node.getPercentAssign() != null)
        {
            node.getPercentAssign().apply(this);
        }
        outAPercentAssignAssignmentOperator(node);
    }

    public void inAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        inAPlusAssignAssignmentOperator(node);
        if(node.getPlusAssign() != null)
        {
            node.getPlusAssign().apply(this);
        }
        outAPlusAssignAssignmentOperator(node);
    }

    public void inAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        inAMinusAssignAssignmentOperator(node);
        if(node.getMinusAssign() != null)
        {
            node.getMinusAssign().apply(this);
        }
        outAMinusAssignAssignmentOperator(node);
    }

    public void inAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        inAShlAssignAssignmentOperator(node);
        if(node.getShlAssign() != null)
        {
            node.getShlAssign().apply(this);
        }
        outAShlAssignAssignmentOperator(node);
    }

    public void inAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        inAShrAssignAssignmentOperator(node);
        if(node.getShrAssign() != null)
        {
            node.getShrAssign().apply(this);
        }
        outAShrAssignAssignmentOperator(node);
    }

    public void inAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        inAUshrAssignAssignmentOperator(node);
        if(node.getUshrAssign() != null)
        {
            node.getUshrAssign().apply(this);
        }
        outAUshrAssignAssignmentOperator(node);
    }

    public void inAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        inAAmpAssignAssignmentOperator(node);
        if(node.getAmpAssign() != null)
        {
            node.getAmpAssign().apply(this);
        }
        outAAmpAssignAssignmentOperator(node);
    }

    public void inACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        inACaretAssignAssignmentOperator(node);
        if(node.getCaretAssign() != null)
        {
            node.getCaretAssign().apply(this);
        }
        outACaretAssignAssignmentOperator(node);
    }

    public void inABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        inABarAssignAssignmentOperator(node);
        if(node.getBarAssign() != null)
        {
            node.getBarAssign().apply(this);
        }
        outABarAssignAssignmentOperator(node);
    }

    public void inAExpressionNoName(AExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAExpressionNoName(AExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionNoName(AExpressionNoName node)
    {
        inAExpressionNoName(node);
        if(node.getAssignmentExpressionNoName() != null)
        {
            node.getAssignmentExpressionNoName().apply(this);
        }
        outAExpressionNoName(node);
    }

    public void inAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        inAConstantExpressionNoName(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAConstantExpressionNoName(node);
    }

    public void inAPortDeclaration(APortDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortDeclaration(APortDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortDeclaration(APortDeclaration node)
    {
        inAPortDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getPortKeyword() != null)
        {
            node.getPortKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPortBody() != null)
        {
            node.getPortBody().apply(this);
        }
        outAPortDeclaration(node);
    }

    public void inAEventDeclaration(AEventDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEventDeclaration(AEventDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventDeclaration(AEventDeclaration node)
    {
        inAEventDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getEventKeyword() != null)
        {
            node.getEventKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getHeaderFields() != null)
        {
            node.getHeaderFields().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        if(node.getInterfaces() != null)
        {
            node.getInterfaces().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAEventDeclaration(node);
    }

    public void inAComponentDeclaration(AComponentDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentDeclaration(AComponentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentDeclaration(AComponentDeclaration node)
    {
        inAComponentDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getComponentKeyword() != null)
        {
            node.getComponentKeyword().apply(this);
        }
        if(node.getDefinitionKeyword() != null)
        {
            node.getDefinitionKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getComponentBody() != null)
        {
            node.getComponentBody().apply(this);
        }
        outAComponentDeclaration(node);
    }

    public void inAPortBody(APortBody node)
    {
        defaultIn(node);
    }

    public void outAPortBody(APortBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortBody(APortBody node)
    {
        inAPortBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getPortBodyDeclarations() != null)
        {
            node.getPortBodyDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAPortBody(node);
    }

    public void inADeclarationPortBodyDeclarations(ADeclarationPortBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationPortBodyDeclarations(ADeclarationPortBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationPortBodyDeclarations(ADeclarationPortBodyDeclarations node)
    {
        inADeclarationPortBodyDeclarations(node);
        if(node.getPortBodyDeclaration() != null)
        {
            node.getPortBodyDeclaration().apply(this);
        }
        outADeclarationPortBodyDeclarations(node);
    }

    public void inADeclarationsPortBodyDeclarations(ADeclarationsPortBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsPortBodyDeclarations(ADeclarationsPortBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsPortBodyDeclarations(ADeclarationsPortBodyDeclarations node)
    {
        inADeclarationsPortBodyDeclarations(node);
        if(node.getPortBodyDeclarations() != null)
        {
            node.getPortBodyDeclarations().apply(this);
        }
        if(node.getPortBodyDeclaration() != null)
        {
            node.getPortBodyDeclaration().apply(this);
        }
        outADeclarationsPortBodyDeclarations(node);
    }

    public void inAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        inAIndicationPortBodyDeclaration(node);
        if(node.getIndicationsDeclaration() != null)
        {
            node.getIndicationsDeclaration().apply(this);
        }
        outAIndicationPortBodyDeclaration(node);
    }

    public void inARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        inARequestPortBodyDeclaration(node);
        if(node.getRequestsDeclaration() != null)
        {
            node.getRequestsDeclaration().apply(this);
        }
        outARequestPortBodyDeclaration(node);
    }

    public void inAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        inAIndicationsDeclaration(node);
        if(node.getIndicationKeyword() != null)
        {
            node.getIndicationKeyword().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getIndicationDeclarations() != null)
        {
            node.getIndicationDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAIndicationsDeclaration(node);
    }

    public void inADeclarationIndicationDeclarations(ADeclarationIndicationDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationIndicationDeclarations(ADeclarationIndicationDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationIndicationDeclarations(ADeclarationIndicationDeclarations node)
    {
        inADeclarationIndicationDeclarations(node);
        if(node.getIndicationDeclaration() != null)
        {
            node.getIndicationDeclaration().apply(this);
        }
        outADeclarationIndicationDeclarations(node);
    }

    public void inADeclarationsIndicationDeclarations(ADeclarationsIndicationDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsIndicationDeclarations(ADeclarationsIndicationDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsIndicationDeclarations(ADeclarationsIndicationDeclarations node)
    {
        inADeclarationsIndicationDeclarations(node);
        if(node.getIndicationDeclarations() != null)
        {
            node.getIndicationDeclarations().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIndicationDeclaration() != null)
        {
            node.getIndicationDeclaration().apply(this);
        }
        outADeclarationsIndicationDeclarations(node);
    }

    public void inAIndicationDeclaration(AIndicationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIndicationDeclaration(AIndicationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicationDeclaration(AIndicationDeclaration node)
    {
        inAIndicationDeclaration(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outAIndicationDeclaration(node);
    }

    public void inARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequestsDeclaration(ARequestsDeclaration node)
    {
        inARequestsDeclaration(node);
        if(node.getRequestKeyword() != null)
        {
            node.getRequestKeyword().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRequestDeclarations() != null)
        {
            node.getRequestDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outARequestsDeclaration(node);
    }

    public void inADeclarationRequestDeclarations(ADeclarationRequestDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationRequestDeclarations(ADeclarationRequestDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationRequestDeclarations(ADeclarationRequestDeclarations node)
    {
        inADeclarationRequestDeclarations(node);
        if(node.getRequestDeclaration() != null)
        {
            node.getRequestDeclaration().apply(this);
        }
        outADeclarationRequestDeclarations(node);
    }

    public void inADeclarationsRequestDeclarations(ADeclarationsRequestDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsRequestDeclarations(ADeclarationsRequestDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsRequestDeclarations(ADeclarationsRequestDeclarations node)
    {
        inADeclarationsRequestDeclarations(node);
        if(node.getRequestDeclarations() != null)
        {
            node.getRequestDeclarations().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRequestDeclaration() != null)
        {
            node.getRequestDeclaration().apply(this);
        }
        outADeclarationsRequestDeclarations(node);
    }

    public void inARequestDeclaration(ARequestDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequestDeclaration(ARequestDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequestDeclaration(ARequestDeclaration node)
    {
        inARequestDeclaration(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outARequestDeclaration(node);
    }

    public void inAHeaderFields(AHeaderFields node)
    {
        defaultIn(node);
    }

    public void outAHeaderFields(AHeaderFields node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderFields(AHeaderFields node)
    {
        inAHeaderFields(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAHeaderFields(node);
    }

    public void inAComponentBody(AComponentBody node)
    {
        defaultIn(node);
    }

    public void outAComponentBody(AComponentBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentBody(AComponentBody node)
    {
        inAComponentBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getComponentBodyDeclarations() != null)
        {
            node.getComponentBodyDeclarations().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAComponentBody(node);
    }

    public void inADeclarationComponentBodyDeclarations(ADeclarationComponentBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationComponentBodyDeclarations(ADeclarationComponentBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationComponentBodyDeclarations(ADeclarationComponentBodyDeclarations node)
    {
        inADeclarationComponentBodyDeclarations(node);
        if(node.getComponentBodyDeclaration() != null)
        {
            node.getComponentBodyDeclaration().apply(this);
        }
        outADeclarationComponentBodyDeclarations(node);
    }

    public void inADeclarationsComponentBodyDeclarations(ADeclarationsComponentBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsComponentBodyDeclarations(ADeclarationsComponentBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsComponentBodyDeclarations(ADeclarationsComponentBodyDeclarations node)
    {
        inADeclarationsComponentBodyDeclarations(node);
        if(node.getComponentBodyDeclarations() != null)
        {
            node.getComponentBodyDeclarations().apply(this);
        }
        if(node.getComponentBodyDeclaration() != null)
        {
            node.getComponentBodyDeclaration().apply(this);
        }
        outADeclarationsComponentBodyDeclarations(node);
    }

    public void inAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        inAMemberComponentBodyDeclaration(node);
        if(node.getClassMemberDeclaration() != null)
        {
            node.getClassMemberDeclaration().apply(this);
        }
        outAMemberComponentBodyDeclaration(node);
    }

    public void inAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        inAInstanceComponentBodyDeclaration(node);
        if(node.getInstanceInitializer() != null)
        {
            node.getInstanceInitializer().apply(this);
        }
        outAInstanceComponentBodyDeclaration(node);
    }

    public void inAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        inAStaticComponentBodyDeclaration(node);
        if(node.getStaticInitializer() != null)
        {
            node.getStaticInitializer().apply(this);
        }
        outAStaticComponentBodyDeclaration(node);
    }

    public void inAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        inAConstuctorComponentBodyDeclaration(node);
        if(node.getConstructorDeclaration() != null)
        {
            node.getConstructorDeclaration().apply(this);
        }
        outAConstuctorComponentBodyDeclaration(node);
    }

    public void inAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        inAInitComponentBodyDeclaration(node);
        if(node.getInitDeclaration() != null)
        {
            node.getInitDeclaration().apply(this);
        }
        outAInitComponentBodyDeclaration(node);
    }

    public void inAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        inAPortComponentBodyDeclaration(node);
        if(node.getPortFieldDeclaration() != null)
        {
            node.getPortFieldDeclaration().apply(this);
        }
        outAPortComponentBodyDeclaration(node);
    }

    public void inAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        inAComponentComponentBodyDeclaration(node);
        if(node.getChildDeclaration() != null)
        {
            node.getChildDeclaration().apply(this);
        }
        outAComponentComponentBodyDeclaration(node);
    }

    public void inAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        inAHandlingComponentBodyDeclaration(node);
        if(node.getHandlingDeclaration() != null)
        {
            node.getHandlingDeclaration().apply(this);
        }
        outAHandlingComponentBodyDeclaration(node);
    }

    public void inAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        inAHandleHandlingDeclaration(node);
        if(node.getHandleDeclaration() != null)
        {
            node.getHandleDeclaration().apply(this);
        }
        outAHandleHandlingDeclaration(node);
    }

    public void inAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        inAHandlerHandlingDeclaration(node);
        if(node.getHandlerDeclaration() != null)
        {
            node.getHandlerDeclaration().apply(this);
        }
        outAHandlerHandlingDeclaration(node);
    }

    public void inAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        inAConnectHandlingDeclaration(node);
        if(node.getConnectStatement() != null)
        {
            node.getConnectStatement().apply(this);
        }
        outAConnectHandlingDeclaration(node);
    }

    public void inASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        inASubscribeHandlingDeclaration(node);
        if(node.getSubscribeStatement() != null)
        {
            node.getSubscribeStatement().apply(this);
        }
        outASubscribeHandlingDeclaration(node);
    }

    public void inADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        inADisconnectHandlingDeclaration(node);
        if(node.getDisconnectStatement() != null)
        {
            node.getDisconnectStatement().apply(this);
        }
        outADisconnectHandlingDeclaration(node);
    }

    public void inAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        inAUnsubscribeHandlingDeclaration(node);
        if(node.getUnsubscribeStatement() != null)
        {
            node.getUnsubscribeStatement().apply(this);
        }
        outAUnsubscribeHandlingDeclaration(node);
    }

    public void inAInitDeclaration(AInitDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInitDeclaration(AInitDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitDeclaration(AInitDeclaration node)
    {
        inAInitDeclaration(node);
        if(node.getModifiers() != null)
        {
            node.getModifiers().apply(this);
        }
        if(node.getInitKeyword() != null)
        {
            node.getInitKeyword().apply(this);
        }
        if(node.getHeaderFields() != null)
        {
            node.getHeaderFields().apply(this);
        }
        if(node.getConstructorBody() != null)
        {
            node.getConstructorBody().apply(this);
        }
        outAInitDeclaration(node);
    }

    public void inARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        inARequiresPortFieldDeclaration(node);
        if(node.getRequiresPort() != null)
        {
            node.getRequiresPort().apply(this);
        }
        outARequiresPortFieldDeclaration(node);
    }

    public void inAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        inAProvidesPortFieldDeclaration(node);
        if(node.getProvidesPort() != null)
        {
            node.getProvidesPort().apply(this);
        }
        outAProvidesPortFieldDeclaration(node);
    }

    public void inARequiresPort(ARequiresPort node)
    {
        defaultIn(node);
    }

    public void outARequiresPort(ARequiresPort node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequiresPort(ARequiresPort node)
    {
        inARequiresPort(node);
        if(node.getRequiresKeyword() != null)
        {
            node.getRequiresKeyword().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outARequiresPort(node);
    }

    public void inAProvidesPort(AProvidesPort node)
    {
        defaultIn(node);
    }

    public void outAProvidesPort(AProvidesPort node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProvidesPort(AProvidesPort node)
    {
        inAProvidesPort(node);
        if(node.getProvidesKeyword() != null)
        {
            node.getProvidesKeyword().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAProvidesPort(node);
    }

    public void inAChildDeclaration(AChildDeclaration node)
    {
        defaultIn(node);
    }

    public void outAChildDeclaration(AChildDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChildDeclaration(AChildDeclaration node)
    {
        inAChildDeclaration(node);
        if(node.getComponentKeyword() != null)
        {
            node.getComponentKeyword().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getComponentInitialization() != null)
        {
            node.getComponentInitialization().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAChildDeclaration(node);
    }

    public void inAComponentInitialization(AComponentInitialization node)
    {
        defaultIn(node);
    }

    public void outAComponentInitialization(AComponentInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentInitialization(AComponentInitialization node)
    {
        inAComponentInitialization(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAComponentInitialization(node);
    }

    public void inAHandleDeclaration(AHandleDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandleDeclaration(AHandleDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandleDeclaration(AHandleDeclaration node)
    {
        inAHandleDeclaration(node);
        if(node.getHandleKeyword() != null)
        {
            node.getHandleKeyword().apply(this);
        }
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getEventId() != null)
        {
            node.getEventId().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAHandleDeclaration(node);
    }

    public void inAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlerDeclaration(AHandlerDeclaration node)
    {
        inAHandlerDeclaration(node);
        if(node.getHandlerKeyword() != null)
        {
            node.getHandlerKeyword().apply(this);
        }
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getEventId() != null)
        {
            node.getEventId().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAHandlerDeclaration(node);
    }

    public void inAConnectStatement(AConnectStatement node)
    {
        defaultIn(node);
    }

    public void outAConnectStatement(AConnectStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectStatement(AConnectStatement node)
    {
        inAConnectStatement(node);
        if(node.getConnectKeyword() != null)
        {
            node.getConnectKeyword().apply(this);
        }
        if(node.getProvidedId() != null)
        {
            node.getProvidedId().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getRequiredId() != null)
        {
            node.getRequiredId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAConnectStatement(node);
    }

    public void inASubscribeStatement(ASubscribeStatement node)
    {
        defaultIn(node);
    }

    public void outASubscribeStatement(ASubscribeStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeStatement(ASubscribeStatement node)
    {
        inASubscribeStatement(node);
        if(node.getSubscribeKeyword() != null)
        {
            node.getSubscribeKeyword().apply(this);
        }
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASubscribeStatement(node);
    }

    public void inADisconnectStatement(ADisconnectStatement node)
    {
        defaultIn(node);
    }

    public void outADisconnectStatement(ADisconnectStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectStatement(ADisconnectStatement node)
    {
        inADisconnectStatement(node);
        if(node.getDisconnectKeyword() != null)
        {
            node.getDisconnectKeyword().apply(this);
        }
        if(node.getProvidedId() != null)
        {
            node.getProvidedId().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getRequiredId() != null)
        {
            node.getRequiredId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outADisconnectStatement(node);
    }

    public void inAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        inAUnsubscribeStatement(node);
        if(node.getUnsubscribeKeyword() != null)
        {
            node.getUnsubscribeKeyword().apply(this);
        }
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAUnsubscribeStatement(node);
    }

    public void inANameTriggerStatement(ANameTriggerStatement node)
    {
        defaultIn(node);
    }

    public void outANameTriggerStatement(ANameTriggerStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameTriggerStatement(ANameTriggerStatement node)
    {
        inANameTriggerStatement(node);
        if(node.getTriggerKeyword() != null)
        {
            node.getTriggerKeyword().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANameTriggerStatement(node);
    }

    public void inAExpressionTriggerStatement(AExpressionTriggerStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionTriggerStatement(AExpressionTriggerStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionTriggerStatement(AExpressionTriggerStatement node)
    {
        inAExpressionTriggerStatement(node);
        if(node.getTriggerKeyword() != null)
        {
            node.getTriggerKeyword().apply(this);
        }
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionTriggerStatement(node);
    }
}
