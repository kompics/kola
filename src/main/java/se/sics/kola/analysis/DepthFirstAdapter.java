/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.analysis;

import java.util.*;
import se.sics.kola.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPJavaCompilationUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultIn(node);
    }

    public void outAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        inAJavaCompilationUnit(node);
        if(node.getCompilationUnit() != null)
        {
            node.getCompilationUnit().apply(this);
        }
        outAJavaCompilationUnit(node);
    }

    public void inACompilationUnit(ACompilationUnit node)
    {
        defaultIn(node);
    }

    public void outACompilationUnit(ACompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        inACompilationUnit(node);
        if(node.getPackageDeclaration() != null)
        {
            node.getPackageDeclaration().apply(this);
        }
        {
            List<PImportDeclaration> copy = new ArrayList<PImportDeclaration>(node.getImportDeclaration());
            for(PImportDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeDeclaration> copy = new ArrayList<PTypeDeclaration>(node.getTypeDeclaration());
            for(PTypeDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outACompilationUnit(node);
    }

    public void inAPackageDeclaration(APackageDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPackageDeclaration(APackageDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        inAPackageDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPackageDeclaration(node);
    }

    public void inASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        inASingleImportDeclaration(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASingleImportDeclaration(node);
    }

    public void inATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        inATypeImportDeclaration(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATypeImportDeclaration(node);
    }

    public void inAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        inAStaticImportDeclaration(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAStaticImportDeclaration(node);
    }

    public void inADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADemandImportDeclaration(ADemandImportDeclaration node)
    {
        inADemandImportDeclaration(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outADemandImportDeclaration(node);
    }

    public void inAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        inAClassTypeDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassTypeDeclaration(node);
    }

    public void inAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        inAInterfaceTypeDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceTypeDeclaration(node);
    }

    public void inAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortTypeDeclaration(APortTypeDeclaration node)
    {
        inAPortTypeDeclaration(node);
        if(node.getPortDeclaration() != null)
        {
            node.getPortDeclaration().apply(this);
        }
        outAPortTypeDeclaration(node);
    }

    public void inAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        inAEventTypeDeclaration(node);
        if(node.getEventDeclaration() != null)
        {
            node.getEventDeclaration().apply(this);
        }
        outAEventTypeDeclaration(node);
    }

    public void inAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        inAComponentTypeDeclaration(node);
        if(node.getComponentDeclaration() != null)
        {
            node.getComponentDeclaration().apply(this);
        }
        outAComponentTypeDeclaration(node);
    }

    public void inASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        inASemiTypeDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiTypeDeclaration(node);
    }

    public void inAAnnotationModifier(AAnnotationModifier node)
    {
        defaultIn(node);
    }

    public void outAAnnotationModifier(AAnnotationModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        inAAnnotationModifier(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationModifier(node);
    }

    public void inAPublicModifier(APublicModifier node)
    {
        defaultIn(node);
    }

    public void outAPublicModifier(APublicModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        inAPublicModifier(node);
        if(node.getPublicKeyword() != null)
        {
            node.getPublicKeyword().apply(this);
        }
        outAPublicModifier(node);
    }

    public void inAProtectedModifier(AProtectedModifier node)
    {
        defaultIn(node);
    }

    public void outAProtectedModifier(AProtectedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtectedModifier(AProtectedModifier node)
    {
        inAProtectedModifier(node);
        if(node.getProtectedKeyword() != null)
        {
            node.getProtectedKeyword().apply(this);
        }
        outAProtectedModifier(node);
    }

    public void inAPrivateModifier(APrivateModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivateModifier(APrivateModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        inAPrivateModifier(node);
        if(node.getPrivateKeyword() != null)
        {
            node.getPrivateKeyword().apply(this);
        }
        outAPrivateModifier(node);
    }

    public void inAAbstractModifier(AAbstractModifier node)
    {
        defaultIn(node);
    }

    public void outAAbstractModifier(AAbstractModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractModifier(AAbstractModifier node)
    {
        inAAbstractModifier(node);
        if(node.getAbstractKeyword() != null)
        {
            node.getAbstractKeyword().apply(this);
        }
        outAAbstractModifier(node);
    }

    public void inAStaticModifier(AStaticModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticModifier(AStaticModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        inAStaticModifier(node);
        if(node.getStaticKeyword() != null)
        {
            node.getStaticKeyword().apply(this);
        }
        outAStaticModifier(node);
    }

    public void inAFinalModifier(AFinalModifier node)
    {
        defaultIn(node);
    }

    public void outAFinalModifier(AFinalModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalModifier(AFinalModifier node)
    {
        inAFinalModifier(node);
        if(node.getFinalKeyword() != null)
        {
            node.getFinalKeyword().apply(this);
        }
        outAFinalModifier(node);
    }

    public void inAStrictfpModifier(AStrictfpModifier node)
    {
        defaultIn(node);
    }

    public void outAStrictfpModifier(AStrictfpModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        inAStrictfpModifier(node);
        if(node.getStrictfpKeyword() != null)
        {
            node.getStrictfpKeyword().apply(this);
        }
        outAStrictfpModifier(node);
    }

    public void inATransientModifier(ATransientModifier node)
    {
        defaultIn(node);
    }

    public void outATransientModifier(ATransientModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransientModifier(ATransientModifier node)
    {
        inATransientModifier(node);
        if(node.getTransientKeyword() != null)
        {
            node.getTransientKeyword().apply(this);
        }
        outATransientModifier(node);
    }

    public void inAVolatileModifier(AVolatileModifier node)
    {
        defaultIn(node);
    }

    public void outAVolatileModifier(AVolatileModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVolatileModifier(AVolatileModifier node)
    {
        inAVolatileModifier(node);
        if(node.getVolatileKeyword() != null)
        {
            node.getVolatileKeyword().apply(this);
        }
        outAVolatileModifier(node);
    }

    public void inASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultIn(node);
    }

    public void outASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        inASynchronizedModifier(node);
        if(node.getSynchronizedKeyword() != null)
        {
            node.getSynchronizedKeyword().apply(this);
        }
        outASynchronizedModifier(node);
    }

    public void inANativeModifier(ANativeModifier node)
    {
        defaultIn(node);
    }

    public void outANativeModifier(ANativeModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativeModifier(ANativeModifier node)
    {
        inANativeModifier(node);
        if(node.getNativeKeyword() != null)
        {
            node.getNativeKeyword().apply(this);
        }
        outANativeModifier(node);
    }

    public void inAName(AName node)
    {
        defaultIn(node);
    }

    public void outAName(AName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAName(AName node)
    {
        inAName(node);
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getIdentifier());
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAName(node);
    }

    public void inAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassClassDeclaration(AClassClassDeclaration node)
    {
        inAClassClassDeclaration(node);
        if(node.getNormalClassDeclaration() != null)
        {
            node.getNormalClassDeclaration().apply(this);
        }
        outAClassClassDeclaration(node);
    }

    public void inAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        inAEnumClassDeclaration(node);
        if(node.getEnumDeclaration() != null)
        {
            node.getEnumDeclaration().apply(this);
        }
        outAEnumClassDeclaration(node);
    }

    public void inAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        inAInterfaceInterfaceDeclaration(node);
        if(node.getNormalInterfaceDeclaration() != null)
        {
            node.getNormalInterfaceDeclaration().apply(this);
        }
        outAInterfaceInterfaceDeclaration(node);
    }

    public void inAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        inAAnnotationInterfaceDeclaration(node);
        if(node.getAnnotationTypeDeclaration() != null)
        {
            node.getAnnotationTypeDeclaration().apply(this);
        }
        outAAnnotationInterfaceDeclaration(node);
    }

    public void inANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        inANormalAnnotationAnnotation(node);
        if(node.getNormalAnnotation() != null)
        {
            node.getNormalAnnotation().apply(this);
        }
        outANormalAnnotationAnnotation(node);
    }

    public void inAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        inAMarkerAnnotationAnnotation(node);
        if(node.getMarkerAnnotation() != null)
        {
            node.getMarkerAnnotation().apply(this);
        }
        outAMarkerAnnotationAnnotation(node);
    }

    public void inASingleAnnotation(ASingleAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleAnnotation(ASingleAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAnnotation(ASingleAnnotation node)
    {
        inASingleAnnotation(node);
        if(node.getSingleElementAnnotation() != null)
        {
            node.getSingleElementAnnotation().apply(this);
        }
        outASingleAnnotation(node);
    }

    public void inANormalAnnotation(ANormalAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotation(ANormalAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        inANormalAnnotation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PElementValuePair> copy = new ArrayList<PElementValuePair>(node.getElementValuePair());
            for(PElementValuePair e : copy)
            {
                e.apply(this);
            }
        }
        outANormalAnnotation(node);
    }

    public void inAElementValuePair(AElementValuePair node)
    {
        defaultIn(node);
    }

    public void outAElementValuePair(AElementValuePair node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValuePair(AElementValuePair node)
    {
        inAElementValuePair(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outAElementValuePair(node);
    }

    public void inAConditionalElementValue(AConditionalElementValue node)
    {
        defaultIn(node);
    }

    public void outAConditionalElementValue(AConditionalElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        inAConditionalElementValue(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAConditionalElementValue(node);
    }

    public void inAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultIn(node);
    }

    public void outAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        inAAnnotationElementValue(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationElementValue(node);
    }

    public void inAArrayElementValue(AArrayElementValue node)
    {
        defaultIn(node);
    }

    public void outAArrayElementValue(AArrayElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayElementValue(AArrayElementValue node)
    {
        inAArrayElementValue(node);
        if(node.getElementValueArrayInitializer() != null)
        {
            node.getElementValueArrayInitializer().apply(this);
        }
        outAArrayElementValue(node);
    }

    public void inAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        inAElementValueArrayInitializer(node);
        {
            List<PElementValue> copy = new ArrayList<PElementValue>(node.getElementValue());
            for(PElementValue e : copy)
            {
                e.apply(this);
            }
        }
        outAElementValueArrayInitializer(node);
    }

    public void inAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        inAMarkerAnnotation(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMarkerAnnotation(node);
    }

    public void inASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        inASingleElementAnnotation(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outASingleElementAnnotation(node);
    }

    public void inANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        inANormalClassDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParent() != null)
        {
            node.getParent().apply(this);
        }
        {
            List<PInterfaceType> copy = new ArrayList<PInterfaceType>(node.getInterfaceType());
            for(PInterfaceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outANormalClassDeclaration(node);
    }

    public void inAEnumDeclaration(AEnumDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclaration(AEnumDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        inAEnumDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PInterfaceType> copy = new ArrayList<PInterfaceType>(node.getInterfaceType());
            for(PInterfaceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnumBody() != null)
        {
            node.getEnumBody().apply(this);
        }
        outAEnumDeclaration(node);
    }

    public void inANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        inANormalInterfaceDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PInterfaceType> copy = new ArrayList<PInterfaceType>(node.getExtendsInterfaces());
            for(PInterfaceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInterfaceBody() != null)
        {
            node.getInterfaceBody().apply(this);
        }
        outANormalInterfaceDeclaration(node);
    }

    public void inAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        inAAnnotationTypeDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAnnotationTypeBody() != null)
        {
            node.getAnnotationTypeBody().apply(this);
        }
        outAAnnotationTypeDeclaration(node);
    }

    public void inATypeParameter(ATypeParameter node)
    {
        defaultIn(node);
    }

    public void outATypeParameter(ATypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        inATypeParameter(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeBound() != null)
        {
            node.getTypeBound().apply(this);
        }
        outATypeParameter(node);
    }

    public void inATypeBound(ATypeBound node)
    {
        defaultIn(node);
    }

    public void outATypeBound(ATypeBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeBound(ATypeBound node)
    {
        inATypeBound(node);
        {
            List<PInterfaceType> copy = new ArrayList<PInterfaceType>(node.getInterfaceType());
            for(PInterfaceType e : copy)
            {
                e.apply(this);
            }
        }
        outATypeBound(node);
    }

    public void inAPortDeclaration(APortDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortDeclaration(APortDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortDeclaration(APortDeclaration node)
    {
        inAPortDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPortBody() != null)
        {
            node.getPortBody().apply(this);
        }
        outAPortDeclaration(node);
    }

    public void inAEventDeclaration(AEventDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEventDeclaration(AEventDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventDeclaration(AEventDeclaration node)
    {
        inAEventDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeaderFields() != null)
        {
            node.getHeaderFields().apply(this);
        }
        {
            List<PInterfaceType> copy = new ArrayList<PInterfaceType>(node.getInterfaceType());
            for(PInterfaceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAEventDeclaration(node);
    }

    public void inAHeaderFields(AHeaderFields node)
    {
        defaultIn(node);
    }

    public void outAHeaderFields(AHeaderFields node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderFields(AHeaderFields node)
    {
        inAHeaderFields(node);
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        outAHeaderFields(node);
    }

    public void inAComponentDeclaration(AComponentDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentDeclaration(AComponentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentDeclaration(AComponentDeclaration node)
    {
        inAComponentDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComponentBody() != null)
        {
            node.getComponentBody().apply(this);
        }
        outAComponentDeclaration(node);
    }

    public void inAPortBody(APortBody node)
    {
        defaultIn(node);
    }

    public void outAPortBody(APortBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortBody(APortBody node)
    {
        inAPortBody(node);
        {
            List<PPortBodyDeclaration> copy = new ArrayList<PPortBodyDeclaration>(node.getPortBodyDeclaration());
            for(PPortBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAPortBody(node);
    }

    public void inAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        inAIndicationPortBodyDeclaration(node);
        if(node.getIndicationsDeclaration() != null)
        {
            node.getIndicationsDeclaration().apply(this);
        }
        outAIndicationPortBodyDeclaration(node);
    }

    public void inARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        inARequestPortBodyDeclaration(node);
        if(node.getRequestsDeclaration() != null)
        {
            node.getRequestsDeclaration().apply(this);
        }
        outARequestPortBodyDeclaration(node);
    }

    public void inAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        inAIndicationsDeclaration(node);
        {
            List<PClassType> copy = new ArrayList<PClassType>(node.getClassType());
            for(PClassType e : copy)
            {
                e.apply(this);
            }
        }
        outAIndicationsDeclaration(node);
    }

    public void inARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequestsDeclaration(ARequestsDeclaration node)
    {
        inARequestsDeclaration(node);
        {
            List<PClassType> copy = new ArrayList<PClassType>(node.getClassType());
            for(PClassType e : copy)
            {
                e.apply(this);
            }
        }
        outARequestsDeclaration(node);
    }

    public void inAComponentBody(AComponentBody node)
    {
        defaultIn(node);
    }

    public void outAComponentBody(AComponentBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentBody(AComponentBody node)
    {
        inAComponentBody(node);
        {
            List<PComponentBodyDeclaration> copy = new ArrayList<PComponentBodyDeclaration>(node.getComponentBodyDeclaration());
            for(PComponentBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAComponentBody(node);
    }

    public void inAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        inAMemberComponentBodyDeclaration(node);
        if(node.getClassMemberDeclaration() != null)
        {
            node.getClassMemberDeclaration().apply(this);
        }
        outAMemberComponentBodyDeclaration(node);
    }

    public void inAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        inAInstanceComponentBodyDeclaration(node);
        if(node.getInstanceInitializer() != null)
        {
            node.getInstanceInitializer().apply(this);
        }
        outAInstanceComponentBodyDeclaration(node);
    }

    public void inAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        inAStaticComponentBodyDeclaration(node);
        if(node.getStaticInitializer() != null)
        {
            node.getStaticInitializer().apply(this);
        }
        outAStaticComponentBodyDeclaration(node);
    }

    public void inAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        inAConstuctorComponentBodyDeclaration(node);
        if(node.getConstructorDeclaration() != null)
        {
            node.getConstructorDeclaration().apply(this);
        }
        outAConstuctorComponentBodyDeclaration(node);
    }

    public void inAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        inAInitComponentBodyDeclaration(node);
        if(node.getInitDeclaration() != null)
        {
            node.getInitDeclaration().apply(this);
        }
        outAInitComponentBodyDeclaration(node);
    }

    public void inAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        inAPortComponentBodyDeclaration(node);
        if(node.getPortFieldDeclaration() != null)
        {
            node.getPortFieldDeclaration().apply(this);
        }
        outAPortComponentBodyDeclaration(node);
    }

    public void inAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        inAComponentComponentBodyDeclaration(node);
        if(node.getChildDeclaration() != null)
        {
            node.getChildDeclaration().apply(this);
        }
        outAComponentComponentBodyDeclaration(node);
    }

    public void inAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        inAHandlingComponentBodyDeclaration(node);
        if(node.getHandlingDeclaration() != null)
        {
            node.getHandlingDeclaration().apply(this);
        }
        outAHandlingComponentBodyDeclaration(node);
    }

    public void inAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        inAHandleHandlingDeclaration(node);
        if(node.getHandleDeclaration() != null)
        {
            node.getHandleDeclaration().apply(this);
        }
        outAHandleHandlingDeclaration(node);
    }

    public void inAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        inAHandlerHandlingDeclaration(node);
        if(node.getHandlerDeclaration() != null)
        {
            node.getHandlerDeclaration().apply(this);
        }
        outAHandlerHandlingDeclaration(node);
    }

    public void inAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        inAConnectHandlingDeclaration(node);
        if(node.getConnectStatement() != null)
        {
            node.getConnectStatement().apply(this);
        }
        outAConnectHandlingDeclaration(node);
    }

    public void inASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        inASubscribeHandlingDeclaration(node);
        if(node.getSubscribeStatement() != null)
        {
            node.getSubscribeStatement().apply(this);
        }
        outASubscribeHandlingDeclaration(node);
    }

    public void inADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        inADisconnectHandlingDeclaration(node);
        if(node.getDisconnectStatement() != null)
        {
            node.getDisconnectStatement().apply(this);
        }
        outADisconnectHandlingDeclaration(node);
    }

    public void inAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        inAUnsubscribeHandlingDeclaration(node);
        if(node.getUnsubscribeStatement() != null)
        {
            node.getUnsubscribeStatement().apply(this);
        }
        outAUnsubscribeHandlingDeclaration(node);
    }

    public void inAInitDeclaration(AInitDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInitDeclaration(AInitDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitDeclaration(AInitDeclaration node)
    {
        inAInitDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeaderFields() != null)
        {
            node.getHeaderFields().apply(this);
        }
        if(node.getConstructorBody() != null)
        {
            node.getConstructorBody().apply(this);
        }
        outAInitDeclaration(node);
    }

    public void inARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        inARequiresPortFieldDeclaration(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outARequiresPortFieldDeclaration(node);
    }

    public void inAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        inAProvidesPortFieldDeclaration(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAProvidesPortFieldDeclaration(node);
    }

    public void inAChildDeclaration(AChildDeclaration node)
    {
        defaultIn(node);
    }

    public void outAChildDeclaration(AChildDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChildDeclaration(AChildDeclaration node)
    {
        inAChildDeclaration(node);
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getComponentInitialization() != null)
        {
            node.getComponentInitialization().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAChildDeclaration(node);
    }

    public void inAComponentInitialization(AComponentInitialization node)
    {
        defaultIn(node);
    }

    public void outAComponentInitialization(AComponentInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentInitialization(AComponentInitialization node)
    {
        inAComponentInitialization(node);
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAComponentInitialization(node);
    }

    public void inAHandleDeclaration(AHandleDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandleDeclaration(AHandleDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandleDeclaration(AHandleDeclaration node)
    {
        inAHandleDeclaration(node);
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getEventId() != null)
        {
            node.getEventId().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAHandleDeclaration(node);
    }

    public void inAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHandlerDeclaration(AHandlerDeclaration node)
    {
        inAHandlerDeclaration(node);
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        if(node.getEventId() != null)
        {
            node.getEventId().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAHandlerDeclaration(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        inAFloatingPointLiteral(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAFloatingPointLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inACharacterLiteral(ACharacterLiteral node)
    {
        defaultIn(node);
    }

    public void outACharacterLiteral(ACharacterLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        inACharacterLiteral(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outACharacterLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inANullLiteral(ANullLiteral node)
    {
        defaultIn(node);
    }

    public void outANullLiteral(ANullLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        inANullLiteral(node);
        if(node.getNullLiteral() != null)
        {
            node.getNullLiteral().apply(this);
        }
        outANullLiteral(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAClassType(node);
    }

    public void inAInterfaceType(AInterfaceType node)
    {
        defaultIn(node);
    }

    public void outAInterfaceType(AInterfaceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceType(AInterfaceType node)
    {
        inAInterfaceType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAInterfaceType(node);
    }

    public void inAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        inAClassOrInterfaceTypeNoArguments(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAClassOrInterfaceTypeNoArguments(node);
    }

    public void inAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultIn(node);
    }

    public void outAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        inAClassOrInterfaceType(node);
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outAClassOrInterfaceType(node);
    }

    public void inATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultIn(node);
    }

    public void outATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        inATypeDeclSpecifier(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PArgsWithName> copy = new ArrayList<PArgsWithName>(node.getArgsWithName());
            for(PArgsWithName e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDeclSpecifier(node);
    }

    public void inAArgsWithName(AArgsWithName node)
    {
        defaultIn(node);
    }

    public void outAArgsWithName(AArgsWithName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsWithName(AArgsWithName node)
    {
        inAArgsWithName(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAArgsWithName(node);
    }

    public void inAClassName(AClassName node)
    {
        defaultIn(node);
    }

    public void outAClassName(AClassName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassName(AClassName node)
    {
        inAClassName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAClassName(node);
    }

    public void inAGtTypeArguments(AGtTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAGtTypeArguments(AGtTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        inAGtTypeArguments(node);
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTypeArgument());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAGtTypeArguments(node);
    }

    public void inAShrTypeArguments(AShrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAShrTypeArguments(AShrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        inAShrTypeArguments(node);
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTa1s());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTa2s());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAShrTypeArguments(node);
    }

    public void inAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        inAUshrTypeArguments(node);
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTa1s());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSpecifier1() != null)
        {
            node.getSpecifier1().apply(this);
        }
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTa2s());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSpecifier2() != null)
        {
            node.getSpecifier2().apply(this);
        }
        {
            List<PTypeArgument> copy = new ArrayList<PTypeArgument>(node.getTa3s());
            for(PTypeArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAUshrTypeArguments(node);
    }

    public void inAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        inAReferenceTypeArgument(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAReferenceTypeArgument(node);
    }

    public void inAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        inAWildcardTypeArgument(node);
        if(node.getWildcard() != null)
        {
            node.getWildcard().apply(this);
        }
        outAWildcardTypeArgument(node);
    }

    public void inAWildcard(AWildcard node)
    {
        defaultIn(node);
    }

    public void outAWildcard(AWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcard(AWildcard node)
    {
        inAWildcard(node);
        if(node.getWildcardBounds() != null)
        {
            node.getWildcardBounds().apply(this);
        }
        outAWildcard(node);
    }

    public void inAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        inAExtendsWildcardBounds(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAExtendsWildcardBounds(node);
    }

    public void inASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperWildcardBounds(ASuperWildcardBounds node)
    {
        inASuperWildcardBounds(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outASuperWildcardBounds(node);
    }

    public void inANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        inANumericPrimitiveType(node);
        if(node.getNumericType() != null)
        {
            node.getNumericType().apply(this);
        }
        outANumericPrimitiveType(node);
    }

    public void inABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        inABooleanPrimitiveType(node);
        if(node.getBooleanKeyword() != null)
        {
            node.getBooleanKeyword().apply(this);
        }
        outABooleanPrimitiveType(node);
    }

    public void inAIntegralNumericType(AIntegralNumericType node)
    {
        defaultIn(node);
    }

    public void outAIntegralNumericType(AIntegralNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        inAIntegralNumericType(node);
        if(node.getIntegralType() != null)
        {
            node.getIntegralType().apply(this);
        }
        outAIntegralNumericType(node);
    }

    public void inAFloatingNumericType(AFloatingNumericType node)
    {
        defaultIn(node);
    }

    public void outAFloatingNumericType(AFloatingNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        inAFloatingNumericType(node);
        if(node.getFloatingPointType() != null)
        {
            node.getFloatingPointType().apply(this);
        }
        outAFloatingNumericType(node);
    }

    public void inAByteIntegralType(AByteIntegralType node)
    {
        defaultIn(node);
    }

    public void outAByteIntegralType(AByteIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        inAByteIntegralType(node);
        if(node.getByteKeyword() != null)
        {
            node.getByteKeyword().apply(this);
        }
        outAByteIntegralType(node);
    }

    public void inAShortIntegralType(AShortIntegralType node)
    {
        defaultIn(node);
    }

    public void outAShortIntegralType(AShortIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        inAShortIntegralType(node);
        if(node.getShortKeyword() != null)
        {
            node.getShortKeyword().apply(this);
        }
        outAShortIntegralType(node);
    }

    public void inAIntIntegralType(AIntIntegralType node)
    {
        defaultIn(node);
    }

    public void outAIntIntegralType(AIntIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        inAIntIntegralType(node);
        if(node.getIntKeyword() != null)
        {
            node.getIntKeyword().apply(this);
        }
        outAIntIntegralType(node);
    }

    public void inALongIntegralType(ALongIntegralType node)
    {
        defaultIn(node);
    }

    public void outALongIntegralType(ALongIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        inALongIntegralType(node);
        if(node.getLongKeyword() != null)
        {
            node.getLongKeyword().apply(this);
        }
        outALongIntegralType(node);
    }

    public void inACharIntegralType(ACharIntegralType node)
    {
        defaultIn(node);
    }

    public void outACharIntegralType(ACharIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        inACharIntegralType(node);
        if(node.getCharKeyword() != null)
        {
            node.getCharKeyword().apply(this);
        }
        outACharIntegralType(node);
    }

    public void inAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        inAFloatFloatingPointType(node);
        if(node.getFloatKeyword() != null)
        {
            node.getFloatKeyword().apply(this);
        }
        outAFloatFloatingPointType(node);
    }

    public void inADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        inADoubleFloatingPointType(node);
        if(node.getDoubleKeyword() != null)
        {
            node.getDoubleKeyword().apply(this);
        }
        outADoubleFloatingPointType(node);
    }

    public void inAClassReferenceType(AClassReferenceType node)
    {
        defaultIn(node);
    }

    public void outAClassReferenceType(AClassReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassReferenceType(AClassReferenceType node)
    {
        inAClassReferenceType(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        outAClassReferenceType(node);
    }

    public void inAArrayReferenceType(AArrayReferenceType node)
    {
        defaultIn(node);
    }

    public void outAArrayReferenceType(AArrayReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayReferenceType(AArrayReferenceType node)
    {
        inAArrayReferenceType(node);
        if(node.getArrayType() != null)
        {
            node.getArrayType().apply(this);
        }
        outAArrayReferenceType(node);
    }

    public void inAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        inAClassReferenceTypeNoArguments(node);
        if(node.getClassOrInterfaceTypeNoArguments() != null)
        {
            node.getClassOrInterfaceTypeNoArguments().apply(this);
        }
        outAClassReferenceTypeNoArguments(node);
    }

    public void inAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        inAArrayReferenceTypeNoArguments(node);
        if(node.getArrayTypeNoArguments() != null)
        {
            node.getArrayTypeNoArguments().apply(this);
        }
        outAArrayReferenceTypeNoArguments(node);
    }

    public void inAClassArrayType(AClassArrayType node)
    {
        defaultIn(node);
    }

    public void outAClassArrayType(AClassArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayType(AClassArrayType node)
    {
        inAClassArrayType(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayType(node);
    }

    public void inAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayType(APrimitiveArrayType node)
    {
        inAPrimitiveArrayType(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayType(node);
    }

    public void inAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        inAClassArrayTypeNoArguments(node);
        if(node.getClassOrInterfaceTypeNoArguments() != null)
        {
            node.getClassOrInterfaceTypeNoArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayTypeNoArguments(node);
    }

    public void inAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        inAPrimitiveArrayTypeNoArguments(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayTypeNoArguments(node);
    }

    public void inAPrimitiveType(APrimitiveType node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveType(APrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveType(APrimitiveType node)
    {
        inAPrimitiveType(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitiveType(node);
    }

    public void inAReferenceType(AReferenceType node)
    {
        defaultIn(node);
    }

    public void outAReferenceType(AReferenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceType(AReferenceType node)
    {
        inAReferenceType(node);
        if(node.getReferenceType() != null)
        {
            node.getReferenceType().apply(this);
        }
        outAReferenceType(node);
    }

    public void inAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        inAPrimitiveTypeNoArguments(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitiveTypeNoArguments(node);
    }

    public void inAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultIn(node);
    }

    public void outAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        inAReferenceTypeNoArguments(node);
        if(node.getReferenceTypeNoArguments() != null)
        {
            node.getReferenceTypeNoArguments().apply(this);
        }
        outAReferenceTypeNoArguments(node);
    }

    public void inAClassBody(AClassBody node)
    {
        defaultIn(node);
    }

    public void outAClassBody(AClassBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        inAClassBody(node);
        {
            List<PClassBodyDeclaration> copy = new ArrayList<PClassBodyDeclaration>(node.getClassBodyDeclaration());
            for(PClassBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAClassBody(node);
    }

    public void inAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        inAMemberClassBodyDeclaration(node);
        if(node.getClassMemberDeclaration() != null)
        {
            node.getClassMemberDeclaration().apply(this);
        }
        outAMemberClassBodyDeclaration(node);
    }

    public void inAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        inAInstanceClassBodyDeclaration(node);
        if(node.getInstanceInitializer() != null)
        {
            node.getInstanceInitializer().apply(this);
        }
        outAInstanceClassBodyDeclaration(node);
    }

    public void inAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        inAStaticClassBodyDeclaration(node);
        if(node.getStaticInitializer() != null)
        {
            node.getStaticInitializer().apply(this);
        }
        outAStaticClassBodyDeclaration(node);
    }

    public void inAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        inAConstructorClassBodyDeclaration(node);
        if(node.getConstructorDeclaration() != null)
        {
            node.getConstructorDeclaration().apply(this);
        }
        outAConstructorClassBodyDeclaration(node);
    }

    public void inAEnumBody(AEnumBody node)
    {
        defaultIn(node);
    }

    public void outAEnumBody(AEnumBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumBody(AEnumBody node)
    {
        inAEnumBody(node);
        {
            List<PEnumConstant> copy = new ArrayList<PEnumConstant>(node.getEnumConstant());
            for(PEnumConstant e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClassBodyDeclaration> copy = new ArrayList<PClassBodyDeclaration>(node.getClassBodyDeclaration());
            for(PClassBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAEnumBody(node);
    }

    public void inAEnumConstant(AEnumConstant node)
    {
        defaultIn(node);
    }

    public void outAEnumConstant(AEnumConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumConstant(AEnumConstant node)
    {
        inAEnumConstant(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAEnumConstant(node);
    }

    public void inAInterfaceBody(AInterfaceBody node)
    {
        defaultIn(node);
    }

    public void outAInterfaceBody(AInterfaceBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceBody(AInterfaceBody node)
    {
        inAInterfaceBody(node);
        {
            List<PInterfaceMemberDeclaration> copy = new ArrayList<PInterfaceMemberDeclaration>(node.getInterfaceMemberDeclaration());
            for(PInterfaceMemberDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAInterfaceBody(node);
    }

    public void inAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        inAConstantInterfaceMemberDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantInterfaceMemberDeclaration(node);
    }

    public void inAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        inAMethodInterfaceMemberDeclaration(node);
        if(node.getAbstractMethodDeclaration() != null)
        {
            node.getAbstractMethodDeclaration().apply(this);
        }
        outAMethodInterfaceMemberDeclaration(node);
    }

    public void inAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        inAClassInterfaceMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassInterfaceMemberDeclaration(node);
    }

    public void inAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        inAInterfaceInterfaceMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceInterfaceMemberDeclaration(node);
    }

    public void inASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        inASemiInterfaceMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiInterfaceMemberDeclaration(node);
    }

    public void inAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        inAFieldClassMemberDeclaration(node);
        if(node.getFieldDeclaration() != null)
        {
            node.getFieldDeclaration().apply(this);
        }
        outAFieldClassMemberDeclaration(node);
    }

    public void inAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        inAMethodClassMemberDeclaration(node);
        if(node.getMethodDeclaration() != null)
        {
            node.getMethodDeclaration().apply(this);
        }
        outAMethodClassMemberDeclaration(node);
    }

    public void inAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        inAClassClassMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassClassMemberDeclaration(node);
    }

    public void inAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        inAInterfaceClassMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceClassMemberDeclaration(node);
    }

    public void inASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        inASemiClassMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiClassMemberDeclaration(node);
    }

    public void inAConstantDeclaration(AConstantDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantDeclaration(AConstantDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDeclaration(AConstantDeclaration node)
    {
        inAConstantDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PVariableDeclarator> copy = new ArrayList<PVariableDeclarator>(node.getVariableDeclarator());
            for(PVariableDeclarator e : copy)
            {
                e.apply(this);
            }
        }
        outAConstantDeclaration(node);
    }

    public void inAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        inAIdVariableDeclarator(node);
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outAIdVariableDeclarator(node);
    }

    public void inAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        inAInitializerVariableDeclarator(node);
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getVariableInitializer() != null)
        {
            node.getVariableInitializer().apply(this);
        }
        outAInitializerVariableDeclarator(node);
    }

    public void inAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        inAVariableDeclaratorId(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAVariableDeclaratorId(node);
    }

    public void inAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        inAExpressionVariableInitializer(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionVariableInitializer(node);
    }

    public void inAInitializerVariableInitializer(AInitializerVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableInitializer(AInitializerVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableInitializer(AInitializerVariableInitializer node)
    {
        inAInitializerVariableInitializer(node);
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAInitializerVariableInitializer(node);
    }

    public void inAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        inAAbstractMethodDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        outAAbstractMethodDeclaration(node);
    }

    public void inAFieldDeclaration(AFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFieldDeclaration(AFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldDeclaration(AFieldDeclaration node)
    {
        inAFieldDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PVariableDeclarator> copy = new ArrayList<PVariableDeclarator>(node.getVariableDeclarator());
            for(PVariableDeclarator e : copy)
            {
                e.apply(this);
            }
        }
        outAFieldDeclaration(node);
    }

    public void inAMethodDeclaration(AMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclaration(AMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        inAMethodDeclaration(node);
        if(node.getMethodHeader() != null)
        {
            node.getMethodHeader().apply(this);
        }
        if(node.getMethodBody() != null)
        {
            node.getMethodBody().apply(this);
        }
        outAMethodDeclaration(node);
    }

    public void inAMethodHeader(AMethodHeader node)
    {
        defaultIn(node);
    }

    public void outAMethodHeader(AMethodHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHeader(AMethodHeader node)
    {
        inAMethodHeader(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        outAMethodHeader(node);
    }

    public void inAMethodDeclarator(AMethodDeclarator node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclarator(AMethodDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        inAMethodDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAMethodDeclarator(node);
    }

    public void inAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        inAAnnotationTypeBody(node);
        {
            List<PAnnotationTypeElementDeclaration> copy = new ArrayList<PAnnotationTypeElementDeclaration>(node.getAnnotationTypeElementDeclaration());
            for(PAnnotationTypeElementDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAAnnotationTypeBody(node);
    }

    public void inAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        inAAbstractAnnotationTypeElementDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDefaultValue() != null)
        {
            node.getDefaultValue().apply(this);
        }
        outAAbstractAnnotationTypeElementDeclaration(node);
    }

    public void inAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        inAConstantAnnotationTypeElementDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantAnnotationTypeElementDeclaration(node);
    }

    public void inAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        inAClassAnnotationTypeElementDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassAnnotationTypeElementDeclaration(node);
    }

    public void inAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        inAInterfaceAnnotationTypeElementDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceAnnotationTypeElementDeclaration(node);
    }

    public void inASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        inASemiAnnotationTypeElementDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiAnnotationTypeElementDeclaration(node);
    }

    public void inAInstanceInitializer(AInstanceInitializer node)
    {
        defaultIn(node);
    }

    public void outAInstanceInitializer(AInstanceInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        inAInstanceInitializer(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAInstanceInitializer(node);
    }

    public void inAStaticInitializer(AStaticInitializer node)
    {
        defaultIn(node);
    }

    public void outAStaticInitializer(AStaticInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticInitializer(AStaticInitializer node)
    {
        inAStaticInitializer(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAStaticInitializer(node);
    }

    public void inAArrayInitializer(AArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAArrayInitializer(AArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitializer(AArrayInitializer node)
    {
        inAArrayInitializer(node);
        {
            List<PVariableInitializer> copy = new ArrayList<PVariableInitializer>(node.getVariableInitializer());
            for(PVariableInitializer e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayInitializer(node);
    }

    public void inAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        inAConstructorDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getConstructorDeclarator() != null)
        {
            node.getConstructorDeclarator().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getConstructorBody() != null)
        {
            node.getConstructorBody().apply(this);
        }
        outAConstructorDeclaration(node);
    }

    public void inAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        inAConstructorDeclarator(node);
        {
            List<PTypeParameter> copy = new ArrayList<PTypeParameter>(node.getTypeParameter());
            for(PTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSimpleTypeName() != null)
        {
            node.getSimpleTypeName().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        outAConstructorDeclarator(node);
    }

    public void inASimpleTypeName(ASimpleTypeName node)
    {
        defaultIn(node);
    }

    public void outASimpleTypeName(ASimpleTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        inASimpleTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleTypeName(node);
    }

    public void inAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        inAParameterFormalParameterList(node);
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAParameterFormalParameterList(node);
    }

    public void inAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        inAParametersFormalParameterList(node);
        {
            List<PFormalParameter> copy = new ArrayList<PFormalParameter>(node.getFormalParameter());
            for(PFormalParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAParametersFormalParameterList(node);
    }

    public void inAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        inAVariableLastFormalParameter(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAVariableLastFormalParameter(node);
    }

    public void inAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        inAFormalLastFormalParameter(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAFormalLastFormalParameter(node);
    }

    public void inAFormalParameter(AFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAFormalParameter(AFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalParameter(AFormalParameter node)
    {
        inAFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outAFormalParameter(node);
    }

    public void inAExpressionArgument(AExpressionArgument node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgument(AExpressionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgument(AExpressionArgument node)
    {
        inAExpressionArgument(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAExpressionArgument(node);
    }

    public void inANameArgument(ANameArgument node)
    {
        defaultIn(node);
    }

    public void outANameArgument(ANameArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameArgument(ANameArgument node)
    {
        inANameArgument(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameArgument(node);
    }

    public void inATypeResult(ATypeResult node)
    {
        defaultIn(node);
    }

    public void outATypeResult(ATypeResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeResult(ATypeResult node)
    {
        inATypeResult(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeResult(node);
    }

    public void inAVoidResult(AVoidResult node)
    {
        defaultIn(node);
    }

    public void outAVoidResult(AVoidResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidResult(AVoidResult node)
    {
        inAVoidResult(node);
        if(node.getVoidKeyword() != null)
        {
            node.getVoidKeyword().apply(this);
        }
        outAVoidResult(node);
    }

    public void inAThrows(AThrows node)
    {
        defaultIn(node);
    }

    public void outAThrows(AThrows node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrows(AThrows node)
    {
        inAThrows(node);
        {
            List<PExceptionType> copy = new ArrayList<PExceptionType>(node.getExceptionType());
            for(PExceptionType e : copy)
            {
                e.apply(this);
            }
        }
        outAThrows(node);
    }

    public void inAExceptionType(AExceptionType node)
    {
        defaultIn(node);
    }

    public void outAExceptionType(AExceptionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExceptionType(AExceptionType node)
    {
        inAExceptionType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAExceptionType(node);
    }

    public void inABlockMethodBody(ABlockMethodBody node)
    {
        defaultIn(node);
    }

    public void outABlockMethodBody(ABlockMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        inABlockMethodBody(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockMethodBody(node);
    }

    public void inASemiMethodBody(ASemiMethodBody node)
    {
        defaultIn(node);
    }

    public void outASemiMethodBody(ASemiMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiMethodBody(ASemiMethodBody node)
    {
        inASemiMethodBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiMethodBody(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatement());
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        outABlock(node);
    }

    public void inAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableBlockStatement(AVariableBlockStatement node)
    {
        inAVariableBlockStatement(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        outAVariableBlockStatement(node);
    }

    public void inAClassBlockStatement(AClassBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAClassBlockStatement(AClassBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBlockStatement(AClassBlockStatement node)
    {
        inAClassBlockStatement(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassBlockStatement(node);
    }

    public void inAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        inAStatementBlockStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementBlockStatement(node);
    }

    public void inAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        inAWithoutTrailingSubstatementStatement(node);
        if(node.getStatementWithoutTrailingSubstatement() != null)
        {
            node.getStatementWithoutTrailingSubstatement().apply(this);
        }
        outAWithoutTrailingSubstatementStatement(node);
    }

    public void inALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementStatement(ALabeledStatementStatement node)
    {
        inALabeledStatementStatement(node);
        if(node.getLabeledStatement() != null)
        {
            node.getLabeledStatement().apply(this);
        }
        outALabeledStatementStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfThenStatement() != null)
        {
            node.getIfThenStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        if(node.getForStatement() != null)
        {
            node.getForStatement().apply(this);
        }
        outAForStatementStatement(node);
    }

    public void inABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        inABlockStatementWithoutTrailingSubstatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatementWithoutTrailingSubstatement(node);
    }

    public void inAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        inAEmptyStatementStatementWithoutTrailingSubstatement(node);
        outAEmptyStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        inAExpressionStatementStatementWithoutTrailingSubstatement(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        outAExpressionStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        inAAssertStatementStatementWithoutTrailingSubstatement(node);
        if(node.getAssertStatement() != null)
        {
            node.getAssertStatement().apply(this);
        }
        outAAssertStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        inASwitchStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSwitchStatement() != null)
        {
            node.getSwitchStatement().apply(this);
        }
        outASwitchStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        inADoStatementStatementWithoutTrailingSubstatement(node);
        if(node.getDoStatement() != null)
        {
            node.getDoStatement().apply(this);
        }
        outADoStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        inABreakStatementStatementWithoutTrailingSubstatement(node);
        if(node.getBreakStatement() != null)
        {
            node.getBreakStatement().apply(this);
        }
        outABreakStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        inAContinueStatementStatementWithoutTrailingSubstatement(node);
        if(node.getContinueStatement() != null)
        {
            node.getContinueStatement().apply(this);
        }
        outAContinueStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        inAReturnStatementStatementWithoutTrailingSubstatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAReturnStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        inASynchronizedStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSynchronizedStatement() != null)
        {
            node.getSynchronizedStatement().apply(this);
        }
        outASynchronizedStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        inAThrowStatementStatementWithoutTrailingSubstatement(node);
        if(node.getThrowStatement() != null)
        {
            node.getThrowStatement().apply(this);
        }
        outAThrowStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        inATryStatementStatementWithoutTrailingSubstatement(node);
        if(node.getTryStatement() != null)
        {
            node.getTryStatement().apply(this);
        }
        outATryStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        inAConnectStatementWithoutTrailingSubstatement(node);
        if(node.getConnectStatement() != null)
        {
            node.getConnectStatement().apply(this);
        }
        outAConnectStatementWithoutTrailingSubstatement(node);
    }

    public void inADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        inADisconnectStatementWithoutTrailingSubstatement(node);
        if(node.getDisconnectStatement() != null)
        {
            node.getDisconnectStatement().apply(this);
        }
        outADisconnectStatementWithoutTrailingSubstatement(node);
    }

    public void inASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        inASubscribeStatementWithoutTrailingSubstatement(node);
        if(node.getSubscribeStatement() != null)
        {
            node.getSubscribeStatement().apply(this);
        }
        outASubscribeStatementWithoutTrailingSubstatement(node);
    }

    public void inAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        inAUnsubscribeStatementWithoutTrailingSubstatement(node);
        if(node.getUnsubscribeStatement() != null)
        {
            node.getUnsubscribeStatement().apply(this);
        }
        outAUnsubscribeStatementWithoutTrailingSubstatement(node);
    }

    public void inATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        inATriggerStatementWithoutTrailingSubstatement(node);
        if(node.getTriggerStatement() != null)
        {
            node.getTriggerStatement().apply(this);
        }
        outATriggerStatementWithoutTrailingSubstatement(node);
    }

    public void inALabeledStatement(ALabeledStatement node)
    {
        defaultIn(node);
    }

    public void outALabeledStatement(ALabeledStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatement(ALabeledStatement node)
    {
        inALabeledStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outALabeledStatement(node);
    }

    public void inALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        inALocalVariableDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PVariableDeclarator> copy = new ArrayList<PVariableDeclarator>(node.getVariableDeclarator());
            for(PVariableDeclarator e : copy)
            {
                e.apply(this);
            }
        }
        outALocalVariableDeclaration(node);
    }

    public void inAStatementExpression(AStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAStatementExpression(AStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementExpression(AStatementExpression node)
    {
        inAStatementExpression(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAStatementExpression(node);
    }

    public void inAIfThenStatement(AIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenStatement(AIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStatement(AIfThenStatement node)
    {
        inAIfThenStatement(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAIfThenStatement(node);
    }

    public void inAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        inAIfThenElseStatement(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfThenElseStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inABasicForForStatement(ABasicForForStatement node)
    {
        defaultIn(node);
    }

    public void outABasicForForStatement(ABasicForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        inABasicForForStatement(node);
        if(node.getBasicForStatement() != null)
        {
            node.getBasicForStatement().apply(this);
        }
        outABasicForForStatement(node);
    }

    public void inAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultIn(node);
    }

    public void outAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        inAEnhancedForForStatement(node);
        if(node.getEnhancedForStatement() != null)
        {
            node.getEnhancedForStatement().apply(this);
        }
        outAEnhancedForForStatement(node);
    }

    public void inAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        inAExpressionBasicForStatement(node);
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getUpdate() != null)
        {
            node.getUpdate().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outAExpressionBasicForStatement(node);
    }

    public void inANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameBasicForStatement(ANameBasicForStatement node)
    {
        inANameBasicForStatement(node);
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getUpdate() != null)
        {
            node.getUpdate().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outANameBasicForStatement(node);
    }

    public void inAStatementForInit(AStatementForInit node)
    {
        defaultIn(node);
    }

    public void outAStatementForInit(AStatementForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementForInit(AStatementForInit node)
    {
        inAStatementForInit(node);
        {
            List<PExpressionNoName> copy = new ArrayList<PExpressionNoName>(node.getExpressionNoName());
            for(PExpressionNoName e : copy)
            {
                e.apply(this);
            }
        }
        outAStatementForInit(node);
    }

    public void inALocalForInit(ALocalForInit node)
    {
        defaultIn(node);
    }

    public void outALocalForInit(ALocalForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalForInit(ALocalForInit node)
    {
        inALocalForInit(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        outALocalForInit(node);
    }

    public void inAForUpdate(AForUpdate node)
    {
        defaultIn(node);
    }

    public void outAForUpdate(AForUpdate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForUpdate(AForUpdate node)
    {
        inAForUpdate(node);
        {
            List<PExpressionNoName> copy = new ArrayList<PExpressionNoName>(node.getExpressionNoName());
            for(PExpressionNoName e : copy)
            {
                e.apply(this);
            }
        }
        outAForUpdate(node);
    }

    public void inAEnhancedForStatement(AEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAEnhancedForStatement(AEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnhancedForStatement(AEnhancedForStatement node)
    {
        inAEnhancedForStatement(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getIterable() != null)
        {
            node.getIterable().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outAEnhancedForStatement(node);
    }

    public void inASimpleAssertStatement(ASimpleAssertStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleAssertStatement(ASimpleAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAssertStatement(ASimpleAssertStatement node)
    {
        inASimpleAssertStatement(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outASimpleAssertStatement(node);
    }

    public void inADetailsAssertStatement(ADetailsAssertStatement node)
    {
        defaultIn(node);
    }

    public void outADetailsAssertStatement(ADetailsAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADetailsAssertStatement(ADetailsAssertStatement node)
    {
        inADetailsAssertStatement(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getMsg() != null)
        {
            node.getMsg().apply(this);
        }
        outADetailsAssertStatement(node);
    }

    public void inASwitchStatement(ASwitchStatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatement(ASwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatement(ASwitchStatement node)
    {
        inASwitchStatement(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        outASwitchStatement(node);
    }

    public void inASwitchBlock(ASwitchBlock node)
    {
        defaultIn(node);
    }

    public void outASwitchBlock(ASwitchBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        inASwitchBlock(node);
        {
            List<PSwitchBlockStatementGroup> copy = new ArrayList<PSwitchBlockStatementGroup>(node.getSwitchBlockStatementGroup());
            for(PSwitchBlockStatementGroup e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabel());
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchBlock(node);
    }

    public void inASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultIn(node);
    }

    public void outASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        inASwitchBlockStatementGroup(node);
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabel());
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatement());
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchBlockStatementGroup(node);
    }

    public void inAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        inAConstantSwitchLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAConstantSwitchLabel(node);
    }

    public void inAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        inAConstantNameSwitchLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAConstantNameSwitchLabel(node);
    }

    public void inADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        inADefaultSwitchLabel(node);
        if(node.getDefaultKeyword() != null)
        {
            node.getDefaultKeyword().apply(this);
        }
        outADefaultSwitchLabel(node);
    }

    public void inADoStatement(ADoStatement node)
    {
        defaultIn(node);
    }

    public void outADoStatement(ADoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStatement(ADoStatement node)
    {
        inADoStatement(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outADoStatement(node);
    }

    public void inABreakStatement(ABreakStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatement(ABreakStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        inABreakStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outABreakStatement(node);
    }

    public void inAContinueStatement(AContinueStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStatement(AContinueStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStatement(AContinueStatement node)
    {
        inAContinueStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAContinueStatement(node);
    }

    public void inAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        inAExpressionReturnStatement(node);
        if(node.getReturnValue() != null)
        {
            node.getReturnValue().apply(this);
        }
        outAExpressionReturnStatement(node);
    }

    public void inAVoidReturnStatement(AVoidReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAVoidReturnStatement(AVoidReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidReturnStatement(AVoidReturnStatement node)
    {
        inAVoidReturnStatement(node);
        outAVoidReturnStatement(node);
    }

    public void inASynchronizedStatement(ASynchronizedStatement node)
    {
        defaultIn(node);
    }

    public void outASynchronizedStatement(ASynchronizedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedStatement(ASynchronizedStatement node)
    {
        inASynchronizedStatement(node);
        if(node.getLock() != null)
        {
            node.getLock().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outASynchronizedStatement(node);
    }

    public void inAThrowStatement(AThrowStatement node)
    {
        defaultIn(node);
    }

    public void outAThrowStatement(AThrowStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrowStatement(AThrowStatement node)
    {
        inAThrowStatement(node);
        if(node.getThrowable() != null)
        {
            node.getThrowable().apply(this);
        }
        outAThrowStatement(node);
    }

    public void inACatchTryStatement(ACatchTryStatement node)
    {
        defaultIn(node);
    }

    public void outACatchTryStatement(ACatchTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        inACatchTryStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PCatchClause> copy = new ArrayList<PCatchClause>(node.getCatchClause());
            for(PCatchClause e : copy)
            {
                e.apply(this);
            }
        }
        outACatchTryStatement(node);
    }

    public void inAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultIn(node);
    }

    public void outAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        inAFinallyTryStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PCatchClause> copy = new ArrayList<PCatchClause>(node.getCatchClause());
            for(PCatchClause e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFinally() != null)
        {
            node.getFinally().apply(this);
        }
        outAFinallyTryStatement(node);
    }

    public void inAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultIn(node);
    }

    public void outAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourcesTryStatement(AResourcesTryStatement node)
    {
        inAResourcesTryStatement(node);
        if(node.getTryWithResourcesStatement() != null)
        {
            node.getTryWithResourcesStatement().apply(this);
        }
        outAResourcesTryStatement(node);
    }

    public void inACatchClause(ACatchClause node)
    {
        defaultIn(node);
    }

    public void outACatchClause(ACatchClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchClause(ACatchClause node)
    {
        inACatchClause(node);
        if(node.getCatchFormalParameter() != null)
        {
            node.getCatchFormalParameter().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outACatchClause(node);
    }

    public void inACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultIn(node);
    }

    public void outACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchFormalParameter(ACatchFormalParameter node)
    {
        inACatchFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClassType> copy = new ArrayList<PClassType>(node.getCatchTypes());
            for(PClassType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        outACatchFormalParameter(node);
    }

    public void inAFinally(AFinally node)
    {
        defaultIn(node);
    }

    public void outAFinally(AFinally node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinally(AFinally node)
    {
        inAFinally(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFinally(node);
    }

    public void inATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultIn(node);
    }

    public void outATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        inATryWithResourcesStatement(node);
        if(node.getResourceSpecification() != null)
        {
            node.getResourceSpecification().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        {
            List<PCatchClause> copy = new ArrayList<PCatchClause>(node.getCatchClause());
            for(PCatchClause e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFinally() != null)
        {
            node.getFinally().apply(this);
        }
        outATryWithResourcesStatement(node);
    }

    public void inAResourceSpecification(AResourceSpecification node)
    {
        defaultIn(node);
    }

    public void outAResourceSpecification(AResourceSpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResourceSpecification(AResourceSpecification node)
    {
        inAResourceSpecification(node);
        {
            List<PResource> copy = new ArrayList<PResource>(node.getResource());
            for(PResource e : copy)
            {
                e.apply(this);
            }
        }
        outAResourceSpecification(node);
    }

    public void inAResource(AResource node)
    {
        defaultIn(node);
    }

    public void outAResource(AResource node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResource(AResource node)
    {
        inAResource(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVariableDeclaratorId() != null)
        {
            node.getVariableDeclaratorId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAResource(node);
    }

    public void inAConnectStatement(AConnectStatement node)
    {
        defaultIn(node);
    }

    public void outAConnectStatement(AConnectStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectStatement(AConnectStatement node)
    {
        inAConnectStatement(node);
        if(node.getProvidedId() != null)
        {
            node.getProvidedId().apply(this);
        }
        if(node.getRequiredId() != null)
        {
            node.getRequiredId().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outAConnectStatement(node);
    }

    public void inASubscribeStatement(ASubscribeStatement node)
    {
        defaultIn(node);
    }

    public void outASubscribeStatement(ASubscribeStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscribeStatement(ASubscribeStatement node)
    {
        inASubscribeStatement(node);
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        outASubscribeStatement(node);
    }

    public void inADisconnectStatement(ADisconnectStatement node)
    {
        defaultIn(node);
    }

    public void outADisconnectStatement(ADisconnectStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisconnectStatement(ADisconnectStatement node)
    {
        inADisconnectStatement(node);
        if(node.getProvidedId() != null)
        {
            node.getProvidedId().apply(this);
        }
        if(node.getRequiredId() != null)
        {
            node.getRequiredId().apply(this);
        }
        if(node.getClassType() != null)
        {
            node.getClassType().apply(this);
        }
        outADisconnectStatement(node);
    }

    public void inAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultIn(node);
    }

    public void outAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        inAUnsubscribeStatement(node);
        if(node.getHandlerId() != null)
        {
            node.getHandlerId().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        outAUnsubscribeStatement(node);
    }

    public void inATriggerStatement(ATriggerStatement node)
    {
        defaultIn(node);
    }

    public void outATriggerStatement(ATriggerStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATriggerStatement(ATriggerStatement node)
    {
        inATriggerStatement(node);
        if(node.getEvent() != null)
        {
            node.getEvent().apply(this);
        }
        if(node.getPortId() != null)
        {
            node.getPortId().apply(this);
        }
        outATriggerStatement(node);
    }

    public void inAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        inAExpressionLeftHandSide(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAExpressionLeftHandSide(node);
    }

    public void inAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        inAFieldLeftHandSide(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldLeftHandSide(node);
    }

    public void inAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        inAArrayLeftHandSide(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayLeftHandSide(node);
    }

    public void inAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        inAAssignAssignmentOperator(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignAssignmentOperator(node);
    }

    public void inAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        inAStarAssignAssignmentOperator(node);
        if(node.getStarAssign() != null)
        {
            node.getStarAssign().apply(this);
        }
        outAStarAssignAssignmentOperator(node);
    }

    public void inASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        inASlashAssignAssignmentOperator(node);
        if(node.getSlashAssign() != null)
        {
            node.getSlashAssign().apply(this);
        }
        outASlashAssignAssignmentOperator(node);
    }

    public void inAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        inAPercentAssignAssignmentOperator(node);
        if(node.getPercentAssign() != null)
        {
            node.getPercentAssign().apply(this);
        }
        outAPercentAssignAssignmentOperator(node);
    }

    public void inAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        inAPlusAssignAssignmentOperator(node);
        if(node.getPlusAssign() != null)
        {
            node.getPlusAssign().apply(this);
        }
        outAPlusAssignAssignmentOperator(node);
    }

    public void inAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        inAMinusAssignAssignmentOperator(node);
        if(node.getMinusAssign() != null)
        {
            node.getMinusAssign().apply(this);
        }
        outAMinusAssignAssignmentOperator(node);
    }

    public void inAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        inAShlAssignAssignmentOperator(node);
        if(node.getShlAssign() != null)
        {
            node.getShlAssign().apply(this);
        }
        outAShlAssignAssignmentOperator(node);
    }

    public void inAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        inAShrAssignAssignmentOperator(node);
        if(node.getShrAssign() != null)
        {
            node.getShrAssign().apply(this);
        }
        outAShrAssignAssignmentOperator(node);
    }

    public void inAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        inAUshrAssignAssignmentOperator(node);
        if(node.getUshrAssign() != null)
        {
            node.getUshrAssign().apply(this);
        }
        outAUshrAssignAssignmentOperator(node);
    }

    public void inAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        inAAmpAssignAssignmentOperator(node);
        if(node.getAmpAssign() != null)
        {
            node.getAmpAssign().apply(this);
        }
        outAAmpAssignAssignmentOperator(node);
    }

    public void inACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        inACaretAssignAssignmentOperator(node);
        if(node.getCaretAssign() != null)
        {
            node.getCaretAssign().apply(this);
        }
        outACaretAssignAssignmentOperator(node);
    }

    public void inABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        inABarAssignAssignmentOperator(node);
        if(node.getBarAssign() != null)
        {
            node.getBarAssign().apply(this);
        }
        outABarAssignAssignmentOperator(node);
    }

    public void inAConstructorBody(AConstructorBody node)
    {
        defaultIn(node);
    }

    public void outAConstructorBody(AConstructorBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorBody(AConstructorBody node)
    {
        inAConstructorBody(node);
        if(node.getExplicitConstructorInvocation() != null)
        {
            node.getExplicitConstructorInvocation().apply(this);
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatement());
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAConstructorBody(node);
    }

    public void inAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        inAThisExplicitConstructorInvocation(node);
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAThisExplicitConstructorInvocation(node);
    }

    public void inASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        inASuperExplicitConstructorInvocation(node);
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outASuperExplicitConstructorInvocation(node);
    }

    public void inAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        inAPrimaryExplicitConstructorInvocation(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimaryExplicitConstructorInvocation(node);
    }

    public void inANameExpression(ANameExpression node)
    {
        defaultIn(node);
    }

    public void outANameExpression(ANameExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameExpression(ANameExpression node)
    {
        inANameExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameExpression(node);
    }

    public void inAExpressionExpression(AExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionExpression(AExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionExpression(AExpressionExpression node)
    {
        inAExpressionExpression(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAExpressionExpression(node);
    }

    public void inAAssignmentExpressionNoName(AAssignmentExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAssignmentExpressionNoName(AAssignmentExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentExpressionNoName(AAssignmentExpressionNoName node)
    {
        inAAssignmentExpressionNoName(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignmentExpressionNoName(node);
    }

    public void inAQmarkExpressionNoName(AQmarkExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAQmarkExpressionNoName(AQmarkExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkExpressionNoName(AQmarkExpressionNoName node)
    {
        inAQmarkExpressionNoName(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAQmarkExpressionNoName(node);
    }

    public void inACorExpressionNoName(ACorExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outACorExpressionNoName(ACorExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACorExpressionNoName(ACorExpressionNoName node)
    {
        inACorExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outACorExpressionNoName(node);
    }

    public void inACandExpressionNoName(ACandExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outACandExpressionNoName(ACandExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACandExpressionNoName(ACandExpressionNoName node)
    {
        inACandExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outACandExpressionNoName(node);
    }

    public void inAIorExpressionNoName(AIorExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAIorExpressionNoName(AIorExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIorExpressionNoName(AIorExpressionNoName node)
    {
        inAIorExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIorExpressionNoName(node);
    }

    public void inAEorExpressionNoName(AEorExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEorExpressionNoName(AEorExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEorExpressionNoName(AEorExpressionNoName node)
    {
        inAEorExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEorExpressionNoName(node);
    }

    public void inAAndExpressionNoName(AAndExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAAndExpressionNoName(AAndExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpressionNoName(AAndExpressionNoName node)
    {
        inAAndExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExpressionNoName(node);
    }

    public void inAEqExpressionNoName(AEqExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEqExpressionNoName(AEqExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpressionNoName(AEqExpressionNoName node)
    {
        inAEqExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExpressionNoName(node);
    }

    public void inANeqExpressionNoName(ANeqExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outANeqExpressionNoName(ANeqExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExpressionNoName(ANeqExpressionNoName node)
    {
        inANeqExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANeqExpressionNoName(node);
    }

    public void inAInstanceofExpressionNoName(AInstanceofExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAInstanceofExpressionNoName(AInstanceofExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofExpressionNoName(AInstanceofExpressionNoName node)
    {
        inAInstanceofExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAInstanceofExpressionNoName(node);
    }

    public void inALtExpressionNoName(ALtExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outALtExpressionNoName(ALtExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpressionNoName(ALtExpressionNoName node)
    {
        inALtExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALtExpressionNoName(node);
    }

    public void inAGtExpressionNoName(AGtExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAGtExpressionNoName(AGtExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpressionNoName(AGtExpressionNoName node)
    {
        inAGtExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExpressionNoName(node);
    }

    public void inALteqExpressionNoName(ALteqExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outALteqExpressionNoName(ALteqExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqExpressionNoName(ALteqExpressionNoName node)
    {
        inALteqExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALteqExpressionNoName(node);
    }

    public void inAGteqExpressionNoName(AGteqExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAGteqExpressionNoName(AGteqExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqExpressionNoName(AGteqExpressionNoName node)
    {
        inAGteqExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGteqExpressionNoName(node);
    }

    public void inAShlExpressionNoName(AShlExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShlExpressionNoName(AShlExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlExpressionNoName(AShlExpressionNoName node)
    {
        inAShlExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAShlExpressionNoName(node);
    }

    public void inAShrExpressionNoName(AShrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAShrExpressionNoName(AShrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrExpressionNoName(AShrExpressionNoName node)
    {
        inAShrExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAShrExpressionNoName(node);
    }

    public void inAUshrExpressionNoName(AUshrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUshrExpressionNoName(AUshrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrExpressionNoName(AUshrExpressionNoName node)
    {
        inAUshrExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAUshrExpressionNoName(node);
    }

    public void inAPlusExpressionNoName(APlusExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPlusExpressionNoName(APlusExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpressionNoName(APlusExpressionNoName node)
    {
        inAPlusExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPlusExpressionNoName(node);
    }

    public void inAMinusExpressionNoName(AMinusExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMinusExpressionNoName(AMinusExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpressionNoName(AMinusExpressionNoName node)
    {
        inAMinusExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExpressionNoName(node);
    }

    public void inAMulExpressionNoName(AMulExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMulExpressionNoName(AMulExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpressionNoName(AMulExpressionNoName node)
    {
        inAMulExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMulExpressionNoName(node);
    }

    public void inADivExpressionNoName(ADivExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outADivExpressionNoName(ADivExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpressionNoName(ADivExpressionNoName node)
    {
        inADivExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpressionNoName(node);
    }

    public void inAModExpressionNoName(AModExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAModExpressionNoName(AModExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpressionNoName(AModExpressionNoName node)
    {
        inAModExpressionNoName(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpressionNoName(node);
    }

    public void inAPreIncExpressionNoName(APreIncExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPreIncExpressionNoName(APreIncExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreIncExpressionNoName(APreIncExpressionNoName node)
    {
        inAPreIncExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPreIncExpressionNoName(node);
    }

    public void inAPreDecrExpressionNoName(APreDecrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPreDecrExpressionNoName(APreDecrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreDecrExpressionNoName(APreDecrExpressionNoName node)
    {
        inAPreDecrExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPreDecrExpressionNoName(node);
    }

    public void inAUplusExpressionNoName(AUplusExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUplusExpressionNoName(AUplusExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUplusExpressionNoName(AUplusExpressionNoName node)
    {
        inAUplusExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAUplusExpressionNoName(node);
    }

    public void inAUminusExpressionNoName(AUminusExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAUminusExpressionNoName(AUminusExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUminusExpressionNoName(AUminusExpressionNoName node)
    {
        inAUminusExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAUminusExpressionNoName(node);
    }

    public void inATildeExpressionNoName(ATildeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outATildeExpressionNoName(ATildeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildeExpressionNoName(ATildeExpressionNoName node)
    {
        inATildeExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATildeExpressionNoName(node);
    }

    public void inAEmarkExpressionNoName(AEmarkExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAEmarkExpressionNoName(AEmarkExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmarkExpressionNoName(AEmarkExpressionNoName node)
    {
        inAEmarkExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEmarkExpressionNoName(node);
    }

    public void inAPcastExpressionNoName(APcastExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPcastExpressionNoName(APcastExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPcastExpressionNoName(APcastExpressionNoName node)
    {
        inAPcastExpressionNoName(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPcastExpressionNoName(node);
    }

    public void inARcastExpressionNoName(ARcastExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outARcastExpressionNoName(ARcastExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARcastExpressionNoName(ARcastExpressionNoName node)
    {
        inARcastExpressionNoName(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARcastExpressionNoName(node);
    }

    public void inAPostIncExpressionNoName(APostIncExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPostIncExpressionNoName(APostIncExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostIncExpressionNoName(APostIncExpressionNoName node)
    {
        inAPostIncExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPostIncExpressionNoName(node);
    }

    public void inAPostDecrExpressionNoName(APostDecrExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAPostDecrExpressionNoName(APostDecrExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostDecrExpressionNoName(APostDecrExpressionNoName node)
    {
        inAPostDecrExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPostDecrExpressionNoName(node);
    }

    public void inALiteralExpressionNoName(ALiteralExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outALiteralExpressionNoName(ALiteralExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralExpressionNoName(ALiteralExpressionNoName node)
    {
        inALiteralExpressionNoName(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralExpressionNoName(node);
    }

    public void inATypeExpressionNoName(ATypeExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outATypeExpressionNoName(ATypeExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeExpressionNoName(ATypeExpressionNoName node)
    {
        inATypeExpressionNoName(node);
        if(node.getTypeNoArguments() != null)
        {
            node.getTypeNoArguments().apply(this);
        }
        outATypeExpressionNoName(node);
    }

    public void inAVoidExpressionNoName(AVoidExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAVoidExpressionNoName(AVoidExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidExpressionNoName(AVoidExpressionNoName node)
    {
        inAVoidExpressionNoName(node);
        outAVoidExpressionNoName(node);
    }

    public void inAThisExpressionNoName(AThisExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAThisExpressionNoName(AThisExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExpressionNoName(AThisExpressionNoName node)
    {
        inAThisExpressionNoName(node);
        outAThisExpressionNoName(node);
    }

    public void inAClassExpressionNoName(AClassExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAClassExpressionNoName(AClassExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassExpressionNoName(AClassExpressionNoName node)
    {
        inAClassExpressionNoName(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outAClassExpressionNoName(node);
    }

    public void inAFieldExpressionNoName(AFieldExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAFieldExpressionNoName(AFieldExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldExpressionNoName(AFieldExpressionNoName node)
    {
        inAFieldExpressionNoName(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldExpressionNoName(node);
    }

    public void inAMethodExpressionNoName(AMethodExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAMethodExpressionNoName(AMethodExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodExpressionNoName(AMethodExpressionNoName node)
    {
        inAMethodExpressionNoName(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodExpressionNoName(node);
    }

    public void inAArrayExpressionNoName(AArrayExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionNoName(AArrayExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpressionNoName(AArrayExpressionNoName node)
    {
        inAArrayExpressionNoName(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayExpressionNoName(node);
    }

    public void inAArrayCreationExpressionNoName(AArrayCreationExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAArrayCreationExpressionNoName(AArrayCreationExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCreationExpressionNoName(AArrayCreationExpressionNoName node)
    {
        inAArrayCreationExpressionNoName(node);
        if(node.getArrayCreationExpression() != null)
        {
            node.getArrayCreationExpression().apply(this);
        }
        outAArrayCreationExpressionNoName(node);
    }

    public void inAInstanceExpressionNoName(AInstanceExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAInstanceExpressionNoName(AInstanceExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceExpressionNoName(AInstanceExpressionNoName node)
    {
        inAInstanceExpressionNoName(node);
        if(node.getClassInstanceCreationExpression() != null)
        {
            node.getClassInstanceCreationExpression().apply(this);
        }
        outAInstanceExpressionNoName(node);
    }

    public void inAExpressionExpressionNoName(AExpressionExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAExpressionExpressionNoName(AExpressionExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionExpressionNoName(AExpressionExpressionNoName node)
    {
        inAExpressionExpressionNoName(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionExpressionNoName(node);
    }

    public void inAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultIn(node);
    }

    public void outAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        inAConstantExpressionNoName(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        outAConstantExpressionNoName(node);
    }

    public void inAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        inAMethodMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAMethodMethodInvocation(node);
    }

    public void inAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        inAPrimaryMethodInvocation(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimaryMethodInvocation(node);
    }

    public void inASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        inASuperMethodInvocation(node);
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outASuperMethodInvocation(node);
    }

    public void inAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassMethodInvocation(AClassMethodInvocation node)
    {
        inAClassMethodInvocation(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAClassMethodInvocation(node);
    }

    public void inATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeMethodInvocation(ATypeMethodInvocation node)
    {
        inATypeMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PReferenceType> copy = new ArrayList<PReferenceType>(node.getNonWildTypeArguments());
            for(PReferenceType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outATypeMethodInvocation(node);
    }

    public void inANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        inANewClassInstanceCreationExpression(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getTypeDeclSpecifier() != null)
        {
            node.getTypeDeclSpecifier().apply(this);
        }
        if(node.getTypeArgumentsOrDiamond() != null)
        {
            node.getTypeArgumentsOrDiamond().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outANewClassInstanceCreationExpression(node);
    }

    public void inAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        inAPrimaryClassInstanceCreationExpression(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeArgumentsOrDiamond() != null)
        {
            node.getTypeArgumentsOrDiamond().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        outAPrimaryClassInstanceCreationExpression(node);
    }

    public void inATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        inATypeArgumentsTypeArgumentsOrDiamond(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outATypeArgumentsTypeArgumentsOrDiamond(node);
    }

    public void inADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultIn(node);
    }

    public void outADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        inADiamondTypeArgumentsOrDiamond(node);
        outADiamondTypeArgumentsOrDiamond(node);
    }

    public void inAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        inAPrimaryFieldAccess(node);
        if(node.getExpressionNoName() != null)
        {
            node.getExpressionNoName().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPrimaryFieldAccess(node);
    }

    public void inASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultIn(node);
    }

    public void outASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        inASuperFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASuperFieldAccess(node);
    }

    public void inAClassFieldAccess(AClassFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAClassFieldAccess(AClassFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassFieldAccess(AClassFieldAccess node)
    {
        inAClassFieldAccess(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassFieldAccess(node);
    }

    public void inAArrayAccess(AArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAArrayAccess(AArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAccess(AArrayAccess node)
    {
        inAArrayAccess(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAArrayAccess(node);
    }

    public void inAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        inAPrimitiveArrayCreationExpression(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDimExpr> copy = new ArrayList<PDimExpr>(node.getDimExpr());
            for(PDimExpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveArrayCreationExpression(node);
    }

    public void inAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        inAClassArrayCreationExpression(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        {
            List<PDimExpr> copy = new ArrayList<PDimExpr>(node.getDimExpr());
            for(PDimExpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAClassArrayCreationExpression(node);
    }

    public void inAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        inAPrimitiveInitializerArrayCreationExpression(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAPrimitiveInitializerArrayCreationExpression(node);
    }

    public void inAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        inAClassInitializerArrayCreationExpression(node);
        if(node.getClassOrInterfaceType() != null)
        {
            node.getClassOrInterfaceType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAClassInitializerArrayCreationExpression(node);
    }

    public void inADimExpr(ADimExpr node)
    {
        defaultIn(node);
    }

    public void outADimExpr(ADimExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADimExpr(ADimExpr node)
    {
        inADimExpr(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADimExpr(node);
    }

    public void inADim(ADim node)
    {
        defaultIn(node);
    }

    public void outADim(ADim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        inADim(node);
        outADim(node);
    }
}
