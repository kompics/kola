/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.analysis;

import java.util.*;
import se.sics.kola.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveType(APrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceType(AReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassReferenceType(AClassReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayReferenceType(AArrayReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceType(AInterfaceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDeclSpecifierTail(ATypeDeclSpecifierTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayType(AClassArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeBound(ATypeBound node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListAdditionalBoundList(AListAdditionalBoundList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoundAdditionalBoundList(ABoundAdditionalBoundList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalBound(AAdditionalBound node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeArgumentList(ATypeArgumentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeArgumentListHead(ATypeArgumentListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcard(AWildcard node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAName(AName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameTail(ANameTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationTypeDeclarations(ADeclarationTypeDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsTypeDeclarations(ADeclarationsTypeDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModifierModifiers(AModifierModifiers node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModifiersModifiers(AModifiersModifiers node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProtectedModifier(AProtectedModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractModifier(AAbstractModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinalModifier(AFinalModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATransientModifier(ATransientModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVolatileModifier(AVolatileModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANativeModifier(ANativeModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeParameters(ATypeParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListTypeParameterList(AListTypeParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterTypeParameterList(AParameterTypeParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuper(ASuper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaces(AInterfaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeInterfaceTypeList(ATypeInterfaceTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListInterfaceTypeList(AListInterfaceTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationClassBodyDeclarations(ADeclarationClassBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsClassBodyDeclarations(ADeclarationsClassBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldDeclaration(AFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaratorVariableDeclarators(ADeclaratorVariableDeclarators node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaratorsVariableDeclarators(ADeclaratorsVariableDeclarators node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializerNameVariableDeclarator(AInitializerNameVariableDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionVariableInitializerNoName(AExpressionVariableInitializerNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializerVariableInitializerNoName(AInitializerVariableInitializerNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodHeader(AMethodHeader node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterFormalParameters(AParameterFormalParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersFormalParameters(AParametersFormalParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalParameter(AFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeResult(ATypeResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidResult(AVoidResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThrows(AThrows node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeExceptionTypeList(ATypeExceptionTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExceptionTypeList(AListExceptionTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExceptionType(AExceptionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiMethodBody(ASemiMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticInitializer(AStaticInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorBody(AConstructorBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonWildTypeArguments(ANonWildTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeReferenceTypeList(ATypeReferenceTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListReferenceTypeList(AListReferenceTypeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumBody(AEnumBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantEnumConstants(AConstantEnumConstants node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantsEnumConstants(AConstantsEnumConstants node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumConstant(AEnumConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExtendsInterfaces(AExtendsInterfaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceBody(AInterfaceBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationInterfaceMemberDeclarations(ADeclarationInterfaceMemberDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsInterfaceMemberDeclarations(ADeclarationsInterfaceMemberDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantDeclaration(AConstantDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationAnnotationTypeElementDeclarations(ADeclarationAnnotationTypeElementDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsAnnotationTypeElementDeclarations(ADeclarationsAnnotationTypeElementDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultValue(ADefaultValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationAnnotations(AAnnotationAnnotations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationsAnnotations(AAnnotationsAnnotations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleAnnotation(ASingleAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPairElementValuePairs(APairElementValuePairs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPairsElementValuePairs(APairsElementValuePairs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementValuePair(AElementValuePair node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameElementValue(ANameElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayElementValue(AArrayElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueElementValues(AValueElementValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValuesElementValues(AValuesElementValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableArrayInitializer(AVariableArrayInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameArrayInitializer(ANameArrayInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableVariableInitializersNoName(AVariableVariableInitializersNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameVariableInitializersNoName(ANameVariableInitializersNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableVariableInitializersTail(AVariableVariableInitializersTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameVariableInitializersTail(ANameVariableInitializersTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementBlockStatements(AStatementBlockStatements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementsBlockStatements(AStatementsBlockStatements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassBlockStatement(AClassBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatementStatement(AForStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatementNoShortIf(AWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatementStatementNoShortIf(ALabeledStatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatementStatementNoShortIf(AWhileStatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatementStatementNoShortIf(AForStatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatement(ALabeledStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodStatementExpression(AMethodStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassStatementExpression(AClassStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameIfThenStatement(ANameIfThenStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameIfThenElseStatement(ANameIfThenElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameIfThenElseStatementNoShortIf(ANameIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertAssertStatement(AAssertAssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertNameAssertStatement(AAssertNameAssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionAssertStatement(AExpressionAssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionName2AssertStatement(AExpressionName2AssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionName1AssertStatement(AExpressionName1AssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionName1Name2AssertStatement(AExpressionName1Name2AssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameSwitchStatement(ANameSwitchStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGroupSwitchBlockStatementGroups(AGroupSwitchBlockStatementGroups node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGroupsSwitchBlockStatementGroups(AGroupsSwitchBlockStatementGroups node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabelSwitchLabels(ALabelSwitchLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabelsSwitchLabels(ALabelsSwitchLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameWhileStatement(ANameWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameWhileStatementNoShortIf(ANameWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameDoStatement(ANameDoStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameForStatementNoShortIf(ANameForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementForInit(AStatementForInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalForInit(ALocalForInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForUpdate(AForUpdate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionStatementExpressionList(AExpressionStatementExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListStatementExpressionList(AListStatementExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionEnhancedForStatement(AExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameEnhancedForStatement(ANameEnhancedForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStatement(AContinueStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameReturnStatement(ANameReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameThrowStatement(ANameThrowStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameSynchronizedStatement(ANameSynchronizedStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClauseCatches(AClauseCatches node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchesCatches(ACatchesCatches node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchClause(ACatchClause node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassCatchType(AClassCatchType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchCatchType(ACatchCatchType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinally(AFinally node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourceSpecification(AResourceSpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourceResources(AResourceResources node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourcesResources(AResourcesResources node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionResource(AExpressionResource node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameResource(ANameResource node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryPrimary(APrimaryPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayPrimary(AArrayPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypePrimaryNoNewArray(ATypePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionNamePrimaryNoNewArray(AExpressionNamePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassName(AClassName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameArgumentList(ANameArgumentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionArgumentListTail(AExpressionArgumentListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameArgumentListTail(ANameArgumentListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprDimExprs(AExprDimExprs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprsDimExprs(AExprsDimExprs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameDimExpr(ANameDimExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassFieldAccess(AClassFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionArrayAccess(AExpressionArrayAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionNameArrayAccess(AExpressionNameArrayAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryArrayAccess(APrimaryArrayAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryNameArrayAccess(APrimaryNameArrayAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryPostfixExpressionNoName(APrimaryPostfixExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementPostfixExpressionNoName(AIncrementPostfixExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrementPostfixExpressionNoName(ADecrementPostfixExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostfixPostIncrementExpression(APostfixPostIncrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePostIncrementExpression(ANamePostIncrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostfixPostDecrementExpression(APostfixPostDecrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePostDecrementExpression(ANamePostDecrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementUnaryExpressionNoName(AIncrementUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrementUnaryExpressionNoName(ADecrementUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusUnaryExpressionNoName(APlusUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusNameUnaryExpressionNoName(APlusNameUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryExpressionNoName(AMinusUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusNameUnaryExpressionNoName(AMinusNameUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryUnaryExpressionNoName(AUnaryUnaryExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryPreIncrementExpression(AUnaryPreIncrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePreIncrementExpression(ANamePreIncrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryPreDecrementExpression(AUnaryPreDecrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePreDecrementExpression(ANamePreDecrementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostfixUnaryExpressionNotPlusMinusNoName(APostfixUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATildeUnaryExpressionNotPlusMinusNoName(ATildeUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATildeNameUnaryExpressionNotPlusMinusNoName(ATildeNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmarkUnaryExpressionNotPlusMinusNoName(AEmarkUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmarkNameUnaryExpressionNotPlusMinusNoName(AEmarkNameUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACastUnaryExpressionNotPlusMinusNoName(ACastUnaryExpressionNotPlusMinusNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveCastExpression(APrimitiveCastExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveNameCastExpression(APrimitiveNameCastExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceCastExpression(AReferenceCastExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceNameCastExpression(AReferenceNameCastExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryMultiplicativeExpressionNoName(AUnaryMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarMultiplicativeExpressionNoName(AStarMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarNameMultiplicativeExpressionNoName(AStarNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameStarMultiplicativeExpressionNoName(ANameStarMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameStarNameMultiplicativeExpressionNoName(ANameStarNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASlashMultiplicativeExpressionNoName(ASlashMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASlashNameMultiplicativeExpressionNoName(ASlashNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameSlashMultiplicativeExpressionNoName(ANameSlashMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameSlashNameMultiplicativeExpressionNoName(ANameSlashNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentMultiplicativeExpressionNoName(APercentMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentNameMultiplicativeExpressionNoName(APercentNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePercentMultiplicativeExpressionNoName(ANamePercentMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePercentNameMultiplicativeExpressionNoName(ANamePercentNameMultiplicativeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicativeAdditiveExpressionNoName(AMultiplicativeAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAdditiveExpressionNoName(APlusAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusNameAdditiveExpressionNoName(APlusNameAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePlusAdditiveExpressionNoName(ANamePlusAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamePlusNameAdditiveExpressionNoName(ANamePlusNameAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAdditiveExpressionNoName(AMinusAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusNameAdditiveExpressionNoName(AMinusNameAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameMinusAdditiveExpressionNoName(ANameMinusAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameMinusNameAdditiveExpressionNoName(ANameMinusNameAdditiveExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditiveShiftExpressionNoName(AAdditiveShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShlShiftExpressionNoName(AShlShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShlNameShiftExpressionNoName(AShlNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameShlShiftExpressionNoName(ANameShlShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameShlNameShiftExpressionNoName(ANameShlNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrShiftExpressionNoName(AShrShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrNameShiftExpressionNoName(AShrNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameShrShiftExpressionNoName(ANameShrShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameShrNameShiftExpressionNoName(ANameShrNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrShiftExpressionNoName(AUshrShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrNameShiftExpressionNoName(AUshrNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameUshrShiftExpressionNoName(ANameUshrShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameUshrNameShiftExpressionNoName(ANameUshrNameShiftExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoInstanceofRelationalExpressionNoName(ANoInstanceofRelationalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceofRelationalExpressionNoName(AInstanceofRelationalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameInstanceofRelationalExpressionNoName(ANameInstanceofRelationalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShiftRelationalExpressionNoNameNoInstanceof(AShiftRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtRelationalExpressionNoNameNoInstanceof(ALtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtNameRelationalExpressionNoNameNoInstanceof(ALtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameLtRelationalExpressionNoNameNoInstanceof(ANameLtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameLtNameRelationalExpressionNoNameNoInstanceof(ANameLtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtRelationalExpressionNoNameNoInstanceof(AGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtNameRelationalExpressionNoNameNoInstanceof(AGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameGtRelationalExpressionNoNameNoInstanceof(ANameGtRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameGtNameRelationalExpressionNoNameNoInstanceof(ANameGtNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqRelationalExpressionNoNameNoInstanceof(ALteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqNameRelationalExpressionNoNameNoInstanceof(ALteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameLteqRelationalExpressionNoNameNoInstanceof(ANameLteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameLteqNameRelationalExpressionNoNameNoInstanceof(ANameLteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqRelationalExpressionNoNameNoInstanceof(AGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqNameRelationalExpressionNoNameNoInstanceof(AGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameGteqRelationalExpressionNoNameNoInstanceof(ANameGteqRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameGteqNameRelationalExpressionNoNameNoInstanceof(ANameGteqNameRelationalExpressionNoNameNoInstanceof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelationalEqualityExpressionNoName(ARelationalEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqEqualityExpressionNoName(AEqEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqNameEqualityExpressionNoName(AEqNameEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameEqEqualityExpressionNoName(ANameEqEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameEqNameEqualityExpressionNoName(ANameEqNameEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqEqualityExpressionNoName(ANeqEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqNameEqualityExpressionNoName(ANeqNameEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameNeqEqualityExpressionNoName(ANameNeqEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameNeqNameEqualityExpressionNoName(ANameNeqNameEqualityExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualityAndExpressionNoName(AEqualityAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpAndExpressionNoName(AAmpAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpNameAndExpressionNoName(AAmpNameAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameAmpAndExpressionNoName(ANameAmpAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameAmpNameAndExpressionNoName(ANameAmpNameAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExclusiveOrExpressionNoName(AAndExclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretExclusiveOrExpressionNoName(ACaretExclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretNameExclusiveOrExpressionNoName(ACaretNameExclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameCaretExclusiveOrExpressionNoName(ANameCaretExclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameCaretNameExclusiveOrExpressionNoName(ANameCaretNameExclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrInclusiveOrExpressionNoName(AOrInclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarInclusiveOrExpressionNoName(ABarInclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarNameInclusiveOrExpressionNoName(ABarNameInclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBarInclusiveOrExpressionNoName(ANameBarInclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBarNameInclusiveOrExpressionNoName(ANameBarNameInclusiveOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrConditionalAndExpressionNoName(AOrConditionalAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpConditionalAndExpressionNoName(AAmpConditionalAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpNameConditionalAndExpressionNoName(AAmpNameConditionalAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameAmpConditionalAndExpressionNoName(ANameAmpConditionalAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameAmpNameConditionalAndExpressionNoName(ANameAmpNameConditionalAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndConditionalOrExpressionNoName(AAndConditionalOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarConditionalOrExpressionNoName(ABarConditionalOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarNameConditionalOrExpressionNoName(ABarNameConditionalOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBarConditionalOrExpressionNoName(ANameBarConditionalOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBarNameConditionalOrExpressionNoName(ANameBarNameConditionalOrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrConditionalExpressionNoName(AOrConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQmarkColonConditionalExpressionNoName(AQmarkColonConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQmarkNameColonConditionalExpressionNoName(AQmarkNameColonConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQmarkColonNameConditionalExpressionNoName(AQmarkColonNameConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQmarkNameColonNameConditionalExpressionNoName(AQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameQmarkColonConditionalExpressionNoName(ANameQmarkColonConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameQmarkNameColonConditionalExpressionNoName(ANameQmarkNameColonConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameQmarkColonNameConditionalExpressionNoName(ANameQmarkColonNameConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameQmarkNameColonNameConditionalExpressionNoName(ANameQmarkNameColonNameConditionalExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionAssignmentExpressionNoName(AExpressionAssignmentExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentAssignmentExpressionNoName(AAssignmentAssignmentExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameAssignment(ANameAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionNoName(AExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortDeclaration(APortDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventDeclaration(AEventDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentDeclaration(AComponentDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortBody(APortBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationPortBodyDeclarations(ADeclarationPortBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsPortBodyDeclarations(ADeclarationsPortBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationIndicationDeclarations(ADeclarationIndicationDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsIndicationDeclarations(ADeclarationsIndicationDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndicationDeclaration(AIndicationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationRequestDeclarations(ADeclarationRequestDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsRequestDeclarations(ADeclarationsRequestDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequestDeclaration(ARequestDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHeaderFields(AHeaderFields node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentBody(AComponentBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationComponentBodyDeclarations(ADeclarationComponentBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsComponentBodyDeclarations(ADeclarationsComponentBodyDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitDeclaration(AInitDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequiresPort(ARequiresPort node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProvidesPort(AProvidesPort node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChildDeclaration(AChildDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentInitialization(AComponentInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandleDeclaration(AHandleDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectStatement(AConnectStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeStatement(ASubscribeStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectStatement(ADisconnectStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameTriggerStatement(ANameTriggerStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionTriggerStatement(AExpressionTriggerStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbstractKeyword(TAbstractKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssertKeyword(TAssertKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanKeyword(TBooleanKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreakKeyword(TBreakKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTByteKeyword(TByteKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaseKeyword(TCaseKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCatchKeyword(TCatchKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharKeyword(TCharKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassKeyword(TClassKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstKeyword(TConstKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinueKeyword(TContinueKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefaultKeyword(TDefaultKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoKeyword(TDoKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleKeyword(TDoubleKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseKeyword(TElseKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnumKeyword(TEnumKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExtendsKeyword(TExtendsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinalKeyword(TFinalKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinallyKeyword(TFinallyKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatKeyword(TFloatKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForKeyword(TForKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIfKeyword(TIfKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGotoKeyword(TGotoKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImplementsKeyword(TImplementsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImportKeyword(TImportKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInstanceofKeyword(TInstanceofKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntKeyword(TIntKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterfaceKeyword(TInterfaceKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLongKeyword(TLongKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNativeKeyword(TNativeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewKeyword(TNewKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPackageKeyword(TPackageKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrivateKeyword(TPrivateKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProtectedKeyword(TProtectedKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublicKeyword(TPublicKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturnKeyword(TReturnKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShortKeyword(TShortKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStaticKeyword(TStaticKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrictfpKeyword(TStrictfpKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSuperKeyword(TSuperKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitchKeyword(TSwitchKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSynchronizedKeyword(TSynchronizedKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThisKeyword(TThisKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThrowKeyword(TThrowKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThrowsKeyword(TThrowsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTransientKeyword(TTransientKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTryKeyword(TTryKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoidKeyword(TVoidKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVolatileKeyword(TVolatileKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhileKeyword(TWhileKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefinitionKeyword(TDefinitionKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHandlerKeyword(THandlerKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHandleKeyword(THandleKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPortKeyword(TPortKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComponentKeyword(TComponentKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubscribeKeyword(TSubscribeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsubscribeKeyword(TUnsubscribeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConnectKeyword(TConnectKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDisconnectKeyword(TDisconnectKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInitKeyword(TInitKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTriggerKeyword(TTriggerKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRequiresKeyword(TRequiresKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProvidesKeyword(TProvidesKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIndicationKeyword(TIndicationKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRequestKeyword(TRequestKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEventKeyword(TEventKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRArrow(TRArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanLiteral(TBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNullLiteral(TNullLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShl(TShl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShr(TShr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUshr(TUshr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashAssign(TSlashAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpAssign(TAmpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarAssign(TBarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaretAssign(TCaretAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercentAssign(TPercentAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShlAssign(TShlAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShrAssign(TShrAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUshrAssign(TUshrAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotDotDot(TDotDotDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
