/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.analysis;

import java.util.*;
import se.sics.kola.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAJavaCompilationUnit(AJavaCompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADemandImportDeclaration(ADemandImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortTypeDeclaration(APortTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventTypeDeclaration(AEventTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentTypeDeclaration(AComponentTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiTypeDeclaration(ASemiTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProtectedModifier(AProtectedModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractModifier(AAbstractModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinalModifier(AFinalModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATransientModifier(ATransientModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVolatileModifier(AVolatileModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANativeModifier(ANativeModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAName(AName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassClassDeclaration(AClassClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceInterfaceDeclaration(AInterfaceInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationInterfaceDeclaration(AAnnotationInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleAnnotation(ASingleAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementValuePair(AElementValuePair node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayElementValue(AArrayElementValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeBound(ATypeBound node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeKolaKeyword(ASubscribeKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeKolaKeyword(AUnsubscribeKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectKolaKeyword(AConnectKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectKolaKeyword(ADisconnectKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequiresKolaKeyword(ARequiresKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProvidesKolaKeyword(AProvidesKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATriggerKolaKeyword(ATriggerKolaKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortDeclaration(APortDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventDeclaration(AEventDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHeaderFields(AHeaderFields node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentDeclaration(AComponentDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortBody(APortBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndicationPortBodyDeclaration(AIndicationPortBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequestPortBodyDeclaration(ARequestPortBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndicationsDeclaration(AIndicationsDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequestsDeclaration(ARequestsDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentBody(AComponentBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMemberComponentBodyDeclaration(AMemberComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceComponentBodyDeclaration(AInstanceComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticComponentBodyDeclaration(AStaticComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstuctorComponentBodyDeclaration(AConstuctorComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitComponentBodyDeclaration(AInitComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPortComponentBodyDeclaration(APortComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentComponentBodyDeclaration(AComponentComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlingComponentBodyDeclaration(AHandlingComponentBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandleHandlingDeclaration(AHandleHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlerHandlingDeclaration(AHandlerHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectHandlingDeclaration(AConnectHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeHandlingDeclaration(ASubscribeHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectHandlingDeclaration(ADisconnectHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeHandlingDeclaration(AUnsubscribeHandlingDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitDeclaration(AInitDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARequiresPortFieldDeclaration(ARequiresPortFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProvidesPortFieldDeclaration(AProvidesPortFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChildDeclaration(AChildDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComponentInitialization(AComponentInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandleDeclaration(AHandleDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHandlerDeclaration(AHandlerDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceType(AInterfaceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassOrInterfaceTypeNoArguments(AClassOrInterfaceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassOrInterfaceType(AClassOrInterfaceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDeclSpecifier(ATypeDeclSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgsWithName(AArgsWithName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassName(AClassName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceTypeArgument(AReferenceTypeArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcardTypeArgument(AWildcardTypeArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcard(AWildcard node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExtendsWildcardBounds(AExtendsWildcardBounds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperWildcardBounds(ASuperWildcardBounds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassReferenceType(AClassReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayReferenceType(AArrayReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassReferenceTypeNoArguments(AClassReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayReferenceTypeNoArguments(AArrayReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayType(AClassArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayType(APrimitiveArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayTypeNoArguments(AClassArrayTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayTypeNoArguments(APrimitiveArrayTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveType(APrimitiveType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceType(AReferenceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveTypeNoArguments(APrimitiveTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReferenceTypeNoArguments(AReferenceTypeNoArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceClassBodyDeclaration(AInstanceClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticClassBodyDeclaration(AStaticClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumBody(AEnumBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumConstant(AEnumConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceBody(AInterfaceBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiInterfaceMemberDeclaration(ASemiInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiClassMemberDeclaration(ASemiClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantDeclaration(AConstantDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVariableDeclarator(AIdVariableDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDeclaratorId(AVariableDeclaratorId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializerVariableInitializer(AInitializerVariableInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractMethodDeclaration(AAbstractMethodDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldDeclaration(AFieldDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodHeader(AMethodHeader node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbstractAnnotationTypeElementDeclaration(AAbstractAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiAnnotationTypeElementDeclaration(ASemiAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticInitializer(AStaticInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitializer(AArrayInitializer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterFormalParameterList(AParameterFormalParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersFormalParameterList(AParametersFormalParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableLastFormalParameter(AVariableLastFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalLastFormalParameter(AFormalLastFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalParameter(AFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionArgument(AExpressionArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameArgument(ANameArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeResult(ATypeResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidResult(AVoidResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThrows(AThrows node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExceptionType(AExceptionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiMethodBody(ASemiMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableBlockStatement(AVariableBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassBlockStatement(AClassBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithoutTrailingSubstatementStatement(AWithoutTrailingSubstatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatementStatement(ALabeledStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatementStatement(AForStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectStatementWithoutTrailingSubstatement(AConnectStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectStatementWithoutTrailingSubstatement(ADisconnectStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeStatementWithoutTrailingSubstatement(ASubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeStatementWithoutTrailingSubstatement(AUnsubscribeStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATriggerStatementWithoutTrailingSubstatement(ATriggerStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabeledStatement(ALabeledStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVariableDeclaration(ALocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementExpression(AStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenStatement(AIfThenStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameBasicForStatement(ANameBasicForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementForInit(AStatementForInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalForInit(ALocalForInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForUpdate(AForUpdate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnhancedForStatement(AEnhancedForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleAssertStatement(ASimpleAssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADetailsAssertStatement(ADetailsAssertStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStatement(ASwitchStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantSwitchLabel(AConstantSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantNameSwitchLabel(AConstantNameSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoStatement(ADoStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStatement(AContinueStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidReturnStatement(AVoidReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASynchronizedStatement(ASynchronizedStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThrowStatement(AThrowStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourcesTryStatement(AResourcesTryStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchClause(ACatchClause node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACatchFormalParameter(ACatchFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinally(AFinally node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATryWithResourcesStatement(ATryWithResourcesStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResourceSpecification(AResourceSpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResource(AResource node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectStatement(AConnectStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscribeStatement(ASubscribeStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADisconnectStatement(ADisconnectStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsubscribeStatement(AUnsubscribeStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATriggerStatement(ATriggerStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionLeftHandSide(AExpressionLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstructorBody(AConstructorBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameExpression(ANameExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionExpression(AExpressionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentExpressionNoName(AAssignmentExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQmarkExpressionNoName(AQmarkExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACorExpressionNoName(ACorExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACandExpressionNoName(ACandExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIorExpressionNoName(AIorExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEorExpressionNoName(AEorExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpressionNoName(AAndExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExpressionNoName(AEqExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqExpressionNoName(ANeqExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceofExpressionNoName(AInstanceofExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExpressionNoName(ALtExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExpressionNoName(AGtExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqExpressionNoName(ALteqExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqExpressionNoName(AGteqExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShlExpressionNoName(AShlExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShrExpressionNoName(AShrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUshrExpressionNoName(AUshrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpressionNoName(APlusExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpressionNoName(AMinusExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpressionNoName(AMulExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpressionNoName(ADivExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExpressionNoName(AModExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreIncExpressionNoName(APreIncExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreDecrExpressionNoName(APreDecrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUplusExpressionNoName(AUplusExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUminusExpressionNoName(AUminusExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATildeExpressionNoName(ATildeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmarkExpressionNoName(AEmarkExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPcastExpressionNoName(APcastExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARcastExpressionNoName(ARcastExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostIncExpressionNoName(APostIncExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostDecrExpressionNoName(APostDecrExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralExpressionNoName(ALiteralExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeExpressionNoName(ATypeExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidExpressionNoName(AVoidExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThisExpressionNoName(AThisExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassExpressionNoName(AClassExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldExpressionNoName(AFieldExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodExpressionNoName(AMethodExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExpressionNoName(AArrayExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayCreationExpressionNoName(AArrayCreationExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstanceExpressionNoName(AInstanceExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionExpressionNoName(AExpressionExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantExpressionNoName(AConstantExpressionNoName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodMethodInvocation(AMethodMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassMethodInvocation(AClassMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeMethodInvocation(ATypeMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAKolaMethodInvocation(AKolaMethodInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewClassInstanceCreationExpression(ANewClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeArgumentsTypeArgumentsOrDiamond(ATypeArgumentsTypeArgumentsOrDiamond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiamondTypeArgumentsOrDiamond(ADiamondTypeArgumentsOrDiamond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassFieldAccess(AClassFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayAccess(AArrayAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassArrayCreationExpression(AClassArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassInitializerArrayCreationExpression(AClassInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADimExpr(ADimExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbstractKeyword(TAbstractKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssertKeyword(TAssertKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanKeyword(TBooleanKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreakKeyword(TBreakKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTByteKeyword(TByteKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaseKeyword(TCaseKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCatchKeyword(TCatchKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharKeyword(TCharKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassKeyword(TClassKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstKeyword(TConstKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinueKeyword(TContinueKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefaultKeyword(TDefaultKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoKeyword(TDoKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleKeyword(TDoubleKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseKeyword(TElseKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnumKeyword(TEnumKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExtendsKeyword(TExtendsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinalKeyword(TFinalKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinallyKeyword(TFinallyKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatKeyword(TFloatKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForKeyword(TForKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIfKeyword(TIfKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGotoKeyword(TGotoKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImplementsKeyword(TImplementsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImportKeyword(TImportKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInstanceofKeyword(TInstanceofKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntKeyword(TIntKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterfaceKeyword(TInterfaceKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLongKeyword(TLongKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNativeKeyword(TNativeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewKeyword(TNewKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPackageKeyword(TPackageKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrivateKeyword(TPrivateKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProtectedKeyword(TProtectedKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublicKeyword(TPublicKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturnKeyword(TReturnKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShortKeyword(TShortKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStaticKeyword(TStaticKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrictfpKeyword(TStrictfpKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSuperKeyword(TSuperKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitchKeyword(TSwitchKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSynchronizedKeyword(TSynchronizedKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThisKeyword(TThisKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThrowKeyword(TThrowKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThrowsKeyword(TThrowsKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTransientKeyword(TTransientKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTryKeyword(TTryKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoidKeyword(TVoidKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVolatileKeyword(TVolatileKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhileKeyword(TWhileKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHandlerKeyword(THandlerKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHandleKeyword(THandleKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPortKeyword(TPortKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComponentKeyword(TComponentKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComponentdefKeyword(TComponentdefKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubscribeKeyword(TSubscribeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsubscribeKeyword(TUnsubscribeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConnectKeyword(TConnectKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDisconnectKeyword(TDisconnectKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInitKeyword(TInitKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTriggerKeyword(TTriggerKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRequiresKeyword(TRequiresKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProvidesKeyword(TProvidesKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIndicationKeyword(TIndicationKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRequestKeyword(TRequestKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEventKeyword(TEventKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRArrow(TRArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanLiteral(TBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNullLiteral(TNullLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShl(TShl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShr(TShr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUshr(TUshr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashAssign(TSlashAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpAssign(TAmpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarAssign(TBarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaretAssign(TCaretAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercentAssign(TPercentAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShlAssign(TShlAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShrAssign(TShrAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUshrAssign(TUshrAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotDotDot(TDotDotDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
