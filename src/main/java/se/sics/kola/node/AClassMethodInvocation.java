/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AClassMethodInvocation extends PMethodInvocation
{
    private PClassName _className_;
    private TDot _dot1_;
    private TSuperKeyword _superKeyword_;
    private TDot _dot2_;
    private PNonWildTypeArguments _nonWildTypeArguments_;
    private TIdentifier _identifier_;
    private TLPar _lPar_;
    private PArgumentList _argumentList_;
    private TRPar _rPar_;

    public AClassMethodInvocation()
    {
        // Constructor
    }

    public AClassMethodInvocation(
        @SuppressWarnings("hiding") PClassName _className_,
        @SuppressWarnings("hiding") TDot _dot1_,
        @SuppressWarnings("hiding") TSuperKeyword _superKeyword_,
        @SuppressWarnings("hiding") TDot _dot2_,
        @SuppressWarnings("hiding") PNonWildTypeArguments _nonWildTypeArguments_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setClassName(_className_);

        setDot1(_dot1_);

        setSuperKeyword(_superKeyword_);

        setDot2(_dot2_);

        setNonWildTypeArguments(_nonWildTypeArguments_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setArgumentList(_argumentList_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AClassMethodInvocation(
            cloneNode(this._className_),
            cloneNode(this._dot1_),
            cloneNode(this._superKeyword_),
            cloneNode(this._dot2_),
            cloneNode(this._nonWildTypeArguments_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._argumentList_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassMethodInvocation(this);
    }

    public PClassName getClassName()
    {
        return this._className_;
    }

    public void setClassName(PClassName node)
    {
        if(this._className_ != null)
        {
            this._className_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._className_ = node;
    }

    public TDot getDot1()
    {
        return this._dot1_;
    }

    public void setDot1(TDot node)
    {
        if(this._dot1_ != null)
        {
            this._dot1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot1_ = node;
    }

    public TSuperKeyword getSuperKeyword()
    {
        return this._superKeyword_;
    }

    public void setSuperKeyword(TSuperKeyword node)
    {
        if(this._superKeyword_ != null)
        {
            this._superKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._superKeyword_ = node;
    }

    public TDot getDot2()
    {
        return this._dot2_;
    }

    public void setDot2(TDot node)
    {
        if(this._dot2_ != null)
        {
            this._dot2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot2_ = node;
    }

    public PNonWildTypeArguments getNonWildTypeArguments()
    {
        return this._nonWildTypeArguments_;
    }

    public void setNonWildTypeArguments(PNonWildTypeArguments node)
    {
        if(this._nonWildTypeArguments_ != null)
        {
            this._nonWildTypeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonWildTypeArguments_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._className_)
            + toString(this._dot1_)
            + toString(this._superKeyword_)
            + toString(this._dot2_)
            + toString(this._nonWildTypeArguments_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._argumentList_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._className_ == child)
        {
            this._className_ = null;
            return;
        }

        if(this._dot1_ == child)
        {
            this._dot1_ = null;
            return;
        }

        if(this._superKeyword_ == child)
        {
            this._superKeyword_ = null;
            return;
        }

        if(this._dot2_ == child)
        {
            this._dot2_ = null;
            return;
        }

        if(this._nonWildTypeArguments_ == child)
        {
            this._nonWildTypeArguments_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._className_ == oldChild)
        {
            setClassName((PClassName) newChild);
            return;
        }

        if(this._dot1_ == oldChild)
        {
            setDot1((TDot) newChild);
            return;
        }

        if(this._superKeyword_ == oldChild)
        {
            setSuperKeyword((TSuperKeyword) newChild);
            return;
        }

        if(this._dot2_ == oldChild)
        {
            setDot2((TDot) newChild);
            return;
        }

        if(this._nonWildTypeArguments_ == oldChild)
        {
            setNonWildTypeArguments((PNonWildTypeArguments) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
