/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AInstanceofRelationalExpressionNoName extends PRelationalExpressionNoName
{
    private PRelationalExpressionNoName _relationalExpressionNoName_;
    private TInstanceofKeyword _instanceofKeyword_;
    private PReferenceType _referenceType_;

    public AInstanceofRelationalExpressionNoName()
    {
        // Constructor
    }

    public AInstanceofRelationalExpressionNoName(
        @SuppressWarnings("hiding") PRelationalExpressionNoName _relationalExpressionNoName_,
        @SuppressWarnings("hiding") TInstanceofKeyword _instanceofKeyword_,
        @SuppressWarnings("hiding") PReferenceType _referenceType_)
    {
        // Constructor
        setRelationalExpressionNoName(_relationalExpressionNoName_);

        setInstanceofKeyword(_instanceofKeyword_);

        setReferenceType(_referenceType_);

    }

    @Override
    public Object clone()
    {
        return new AInstanceofRelationalExpressionNoName(
            cloneNode(this._relationalExpressionNoName_),
            cloneNode(this._instanceofKeyword_),
            cloneNode(this._referenceType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstanceofRelationalExpressionNoName(this);
    }

    public PRelationalExpressionNoName getRelationalExpressionNoName()
    {
        return this._relationalExpressionNoName_;
    }

    public void setRelationalExpressionNoName(PRelationalExpressionNoName node)
    {
        if(this._relationalExpressionNoName_ != null)
        {
            this._relationalExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationalExpressionNoName_ = node;
    }

    public TInstanceofKeyword getInstanceofKeyword()
    {
        return this._instanceofKeyword_;
    }

    public void setInstanceofKeyword(TInstanceofKeyword node)
    {
        if(this._instanceofKeyword_ != null)
        {
            this._instanceofKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instanceofKeyword_ = node;
    }

    public PReferenceType getReferenceType()
    {
        return this._referenceType_;
    }

    public void setReferenceType(PReferenceType node)
    {
        if(this._referenceType_ != null)
        {
            this._referenceType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._referenceType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._relationalExpressionNoName_)
            + toString(this._instanceofKeyword_)
            + toString(this._referenceType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._relationalExpressionNoName_ == child)
        {
            this._relationalExpressionNoName_ = null;
            return;
        }

        if(this._instanceofKeyword_ == child)
        {
            this._instanceofKeyword_ = null;
            return;
        }

        if(this._referenceType_ == child)
        {
            this._referenceType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._relationalExpressionNoName_ == oldChild)
        {
            setRelationalExpressionNoName((PRelationalExpressionNoName) newChild);
            return;
        }

        if(this._instanceofKeyword_ == oldChild)
        {
            setInstanceofKeyword((TInstanceofKeyword) newChild);
            return;
        }

        if(this._referenceType_ == oldChild)
        {
            setReferenceType((PReferenceType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
