/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ADisconnectKolaKeyword extends PKolaKeyword
{
    private TDisconnectKeyword _disconnectKeyword_;

    public ADisconnectKolaKeyword()
    {
        // Constructor
    }

    public ADisconnectKolaKeyword(
        @SuppressWarnings("hiding") TDisconnectKeyword _disconnectKeyword_)
    {
        // Constructor
        setDisconnectKeyword(_disconnectKeyword_);

    }

    @Override
    public Object clone()
    {
        return new ADisconnectKolaKeyword(
            cloneNode(this._disconnectKeyword_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADisconnectKolaKeyword(this);
    }

    public TDisconnectKeyword getDisconnectKeyword()
    {
        return this._disconnectKeyword_;
    }

    public void setDisconnectKeyword(TDisconnectKeyword node)
    {
        if(this._disconnectKeyword_ != null)
        {
            this._disconnectKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._disconnectKeyword_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._disconnectKeyword_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._disconnectKeyword_ == child)
        {
            this._disconnectKeyword_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._disconnectKeyword_ == oldChild)
        {
            setDisconnectKeyword((TDisconnectKeyword) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
