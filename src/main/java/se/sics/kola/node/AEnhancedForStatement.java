/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AEnhancedForStatement extends PEnhancedForStatement
{
    private PFormalParameter _variable_;
    private PExpression _iterable_;
    private PStatement _do_;

    public AEnhancedForStatement()
    {
        // Constructor
    }

    public AEnhancedForStatement(
        @SuppressWarnings("hiding") PFormalParameter _variable_,
        @SuppressWarnings("hiding") PExpression _iterable_,
        @SuppressWarnings("hiding") PStatement _do_)
    {
        // Constructor
        setVariable(_variable_);

        setIterable(_iterable_);

        setDo(_do_);

    }

    @Override
    public Object clone()
    {
        return new AEnhancedForStatement(
            cloneNode(this._variable_),
            cloneNode(this._iterable_),
            cloneNode(this._do_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnhancedForStatement(this);
    }

    public PFormalParameter getVariable()
    {
        return this._variable_;
    }

    public void setVariable(PFormalParameter node)
    {
        if(this._variable_ != null)
        {
            this._variable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variable_ = node;
    }

    public PExpression getIterable()
    {
        return this._iterable_;
    }

    public void setIterable(PExpression node)
    {
        if(this._iterable_ != null)
        {
            this._iterable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iterable_ = node;
    }

    public PStatement getDo()
    {
        return this._do_;
    }

    public void setDo(PStatement node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variable_)
            + toString(this._iterable_)
            + toString(this._do_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variable_ == child)
        {
            this._variable_ = null;
            return;
        }

        if(this._iterable_ == child)
        {
            this._iterable_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._variable_ == oldChild)
        {
            setVariable((PFormalParameter) newChild);
            return;
        }

        if(this._iterable_ == oldChild)
        {
            setIterable((PExpression) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
