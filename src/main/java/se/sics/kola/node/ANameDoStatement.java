/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANameDoStatement extends PDoStatement
{
    private TDoKeyword _doKeyword_;
    private PStatement _statement_;
    private TWhileKeyword _whileKeyword_;
    private TLPar _lPar_;
    private PName _name_;
    private TRPar _rPar_;
    private TSemi _semi_;

    public ANameDoStatement()
    {
        // Constructor
    }

    public ANameDoStatement(
        @SuppressWarnings("hiding") TDoKeyword _doKeyword_,
        @SuppressWarnings("hiding") PStatement _statement_,
        @SuppressWarnings("hiding") TWhileKeyword _whileKeyword_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setDoKeyword(_doKeyword_);

        setStatement(_statement_);

        setWhileKeyword(_whileKeyword_);

        setLPar(_lPar_);

        setName(_name_);

        setRPar(_rPar_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new ANameDoStatement(
            cloneNode(this._doKeyword_),
            cloneNode(this._statement_),
            cloneNode(this._whileKeyword_),
            cloneNode(this._lPar_),
            cloneNode(this._name_),
            cloneNode(this._rPar_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANameDoStatement(this);
    }

    public TDoKeyword getDoKeyword()
    {
        return this._doKeyword_;
    }

    public void setDoKeyword(TDoKeyword node)
    {
        if(this._doKeyword_ != null)
        {
            this._doKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doKeyword_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    public TWhileKeyword getWhileKeyword()
    {
        return this._whileKeyword_;
    }

    public void setWhileKeyword(TWhileKeyword node)
    {
        if(this._whileKeyword_ != null)
        {
            this._whileKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileKeyword_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._doKeyword_)
            + toString(this._statement_)
            + toString(this._whileKeyword_)
            + toString(this._lPar_)
            + toString(this._name_)
            + toString(this._rPar_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._doKeyword_ == child)
        {
            this._doKeyword_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        if(this._whileKeyword_ == child)
        {
            this._whileKeyword_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._doKeyword_ == oldChild)
        {
            setDoKeyword((TDoKeyword) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(this._whileKeyword_ == oldChild)
        {
            setWhileKeyword((TWhileKeyword) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
