/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionIfThenElseStatementNoShortIf extends PIfThenElseStatementNoShortIf
{
    private TIfKeyword _ifKeyword_;
    private TLPar _lPar_;
    private PExpressionNoName _expressionNoName_;
    private TRPar _rPar_;
    private PStatementNoShortIf _thenStatement_;
    private TElseKeyword _elseKeyword_;
    private PStatementNoShortIf _elseStatement_;

    public AExpressionIfThenElseStatementNoShortIf()
    {
        // Constructor
    }

    public AExpressionIfThenElseStatementNoShortIf(
        @SuppressWarnings("hiding") TIfKeyword _ifKeyword_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpressionNoName _expressionNoName_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PStatementNoShortIf _thenStatement_,
        @SuppressWarnings("hiding") TElseKeyword _elseKeyword_,
        @SuppressWarnings("hiding") PStatementNoShortIf _elseStatement_)
    {
        // Constructor
        setIfKeyword(_ifKeyword_);

        setLPar(_lPar_);

        setExpressionNoName(_expressionNoName_);

        setRPar(_rPar_);

        setThenStatement(_thenStatement_);

        setElseKeyword(_elseKeyword_);

        setElseStatement(_elseStatement_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionIfThenElseStatementNoShortIf(
            cloneNode(this._ifKeyword_),
            cloneNode(this._lPar_),
            cloneNode(this._expressionNoName_),
            cloneNode(this._rPar_),
            cloneNode(this._thenStatement_),
            cloneNode(this._elseKeyword_),
            cloneNode(this._elseStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionIfThenElseStatementNoShortIf(this);
    }

    public TIfKeyword getIfKeyword()
    {
        return this._ifKeyword_;
    }

    public void setIfKeyword(TIfKeyword node)
    {
        if(this._ifKeyword_ != null)
        {
            this._ifKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifKeyword_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpressionNoName getExpressionNoName()
    {
        return this._expressionNoName_;
    }

    public void setExpressionNoName(PExpressionNoName node)
    {
        if(this._expressionNoName_ != null)
        {
            this._expressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoName_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PStatementNoShortIf getThenStatement()
    {
        return this._thenStatement_;
    }

    public void setThenStatement(PStatementNoShortIf node)
    {
        if(this._thenStatement_ != null)
        {
            this._thenStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenStatement_ = node;
    }

    public TElseKeyword getElseKeyword()
    {
        return this._elseKeyword_;
    }

    public void setElseKeyword(TElseKeyword node)
    {
        if(this._elseKeyword_ != null)
        {
            this._elseKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseKeyword_ = node;
    }

    public PStatementNoShortIf getElseStatement()
    {
        return this._elseStatement_;
    }

    public void setElseStatement(PStatementNoShortIf node)
    {
        if(this._elseStatement_ != null)
        {
            this._elseStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifKeyword_)
            + toString(this._lPar_)
            + toString(this._expressionNoName_)
            + toString(this._rPar_)
            + toString(this._thenStatement_)
            + toString(this._elseKeyword_)
            + toString(this._elseStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifKeyword_ == child)
        {
            this._ifKeyword_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._expressionNoName_ == child)
        {
            this._expressionNoName_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._thenStatement_ == child)
        {
            this._thenStatement_ = null;
            return;
        }

        if(this._elseKeyword_ == child)
        {
            this._elseKeyword_ = null;
            return;
        }

        if(this._elseStatement_ == child)
        {
            this._elseStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifKeyword_ == oldChild)
        {
            setIfKeyword((TIfKeyword) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._expressionNoName_ == oldChild)
        {
            setExpressionNoName((PExpressionNoName) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._thenStatement_ == oldChild)
        {
            setThenStatement((PStatementNoShortIf) newChild);
            return;
        }

        if(this._elseKeyword_ == oldChild)
        {
            setElseKeyword((TElseKeyword) newChild);
            return;
        }

        if(this._elseStatement_ == oldChild)
        {
            setElseStatement((PStatementNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
