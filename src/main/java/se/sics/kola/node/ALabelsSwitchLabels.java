/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ALabelsSwitchLabels extends PSwitchLabels
{
    private PSwitchLabels _switchLabels_;
    private PSwitchLabel _switchLabel_;

    public ALabelsSwitchLabels()
    {
        // Constructor
    }

    public ALabelsSwitchLabels(
        @SuppressWarnings("hiding") PSwitchLabels _switchLabels_,
        @SuppressWarnings("hiding") PSwitchLabel _switchLabel_)
    {
        // Constructor
        setSwitchLabels(_switchLabels_);

        setSwitchLabel(_switchLabel_);

    }

    @Override
    public Object clone()
    {
        return new ALabelsSwitchLabels(
            cloneNode(this._switchLabels_),
            cloneNode(this._switchLabel_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALabelsSwitchLabels(this);
    }

    public PSwitchLabels getSwitchLabels()
    {
        return this._switchLabels_;
    }

    public void setSwitchLabels(PSwitchLabels node)
    {
        if(this._switchLabels_ != null)
        {
            this._switchLabels_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switchLabels_ = node;
    }

    public PSwitchLabel getSwitchLabel()
    {
        return this._switchLabel_;
    }

    public void setSwitchLabel(PSwitchLabel node)
    {
        if(this._switchLabel_ != null)
        {
            this._switchLabel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switchLabel_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._switchLabels_)
            + toString(this._switchLabel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._switchLabels_ == child)
        {
            this._switchLabels_ = null;
            return;
        }

        if(this._switchLabel_ == child)
        {
            this._switchLabel_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._switchLabels_ == oldChild)
        {
            setSwitchLabels((PSwitchLabels) newChild);
            return;
        }

        if(this._switchLabel_ == oldChild)
        {
            setSwitchLabel((PSwitchLabel) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
