/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANameIfThenElseStatement extends PIfThenElseStatement
{
    private TIfKeyword _ifKeyword_;
    private TLPar _lPar_;
    private PName _name_;
    private TRPar _rPar_;
    private PStatementNoShortIf _statementNoShortIf_;
    private TElseKeyword _elseKeyword_;
    private PStatement _statement_;

    public ANameIfThenElseStatement()
    {
        // Constructor
    }

    public ANameIfThenElseStatement(
        @SuppressWarnings("hiding") TIfKeyword _ifKeyword_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PStatementNoShortIf _statementNoShortIf_,
        @SuppressWarnings("hiding") TElseKeyword _elseKeyword_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setIfKeyword(_ifKeyword_);

        setLPar(_lPar_);

        setName(_name_);

        setRPar(_rPar_);

        setStatementNoShortIf(_statementNoShortIf_);

        setElseKeyword(_elseKeyword_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new ANameIfThenElseStatement(
            cloneNode(this._ifKeyword_),
            cloneNode(this._lPar_),
            cloneNode(this._name_),
            cloneNode(this._rPar_),
            cloneNode(this._statementNoShortIf_),
            cloneNode(this._elseKeyword_),
            cloneNode(this._statement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANameIfThenElseStatement(this);
    }

    public TIfKeyword getIfKeyword()
    {
        return this._ifKeyword_;
    }

    public void setIfKeyword(TIfKeyword node)
    {
        if(this._ifKeyword_ != null)
        {
            this._ifKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifKeyword_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PStatementNoShortIf getStatementNoShortIf()
    {
        return this._statementNoShortIf_;
    }

    public void setStatementNoShortIf(PStatementNoShortIf node)
    {
        if(this._statementNoShortIf_ != null)
        {
            this._statementNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementNoShortIf_ = node;
    }

    public TElseKeyword getElseKeyword()
    {
        return this._elseKeyword_;
    }

    public void setElseKeyword(TElseKeyword node)
    {
        if(this._elseKeyword_ != null)
        {
            this._elseKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseKeyword_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifKeyword_)
            + toString(this._lPar_)
            + toString(this._name_)
            + toString(this._rPar_)
            + toString(this._statementNoShortIf_)
            + toString(this._elseKeyword_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifKeyword_ == child)
        {
            this._ifKeyword_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._statementNoShortIf_ == child)
        {
            this._statementNoShortIf_ = null;
            return;
        }

        if(this._elseKeyword_ == child)
        {
            this._elseKeyword_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifKeyword_ == oldChild)
        {
            setIfKeyword((TIfKeyword) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._statementNoShortIf_ == oldChild)
        {
            setStatementNoShortIf((PStatementNoShortIf) newChild);
            return;
        }

        if(this._elseKeyword_ == oldChild)
        {
            setElseKeyword((TElseKeyword) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
