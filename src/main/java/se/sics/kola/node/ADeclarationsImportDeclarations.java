/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarationsImportDeclarations extends PImportDeclarations
{
    private PImportDeclarations _importDeclarations_;
    private PImportDeclaration _importDeclaration_;

    public ADeclarationsImportDeclarations()
    {
        // Constructor
    }

    public ADeclarationsImportDeclarations(
        @SuppressWarnings("hiding") PImportDeclarations _importDeclarations_,
        @SuppressWarnings("hiding") PImportDeclaration _importDeclaration_)
    {
        // Constructor
        setImportDeclarations(_importDeclarations_);

        setImportDeclaration(_importDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarationsImportDeclarations(
            cloneNode(this._importDeclarations_),
            cloneNode(this._importDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarationsImportDeclarations(this);
    }

    public PImportDeclarations getImportDeclarations()
    {
        return this._importDeclarations_;
    }

    public void setImportDeclarations(PImportDeclarations node)
    {
        if(this._importDeclarations_ != null)
        {
            this._importDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._importDeclarations_ = node;
    }

    public PImportDeclaration getImportDeclaration()
    {
        return this._importDeclaration_;
    }

    public void setImportDeclaration(PImportDeclaration node)
    {
        if(this._importDeclaration_ != null)
        {
            this._importDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._importDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._importDeclarations_)
            + toString(this._importDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._importDeclarations_ == child)
        {
            this._importDeclarations_ = null;
            return;
        }

        if(this._importDeclaration_ == child)
        {
            this._importDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._importDeclarations_ == oldChild)
        {
            setImportDeclarations((PImportDeclarations) newChild);
            return;
        }

        if(this._importDeclaration_ == oldChild)
        {
            setImportDeclaration((PImportDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
