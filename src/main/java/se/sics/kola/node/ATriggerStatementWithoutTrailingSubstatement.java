/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ATriggerStatementWithoutTrailingSubstatement extends PStatementWithoutTrailingSubstatement
{
    private PTriggerStatement _triggerStatement_;

    public ATriggerStatementWithoutTrailingSubstatement()
    {
        // Constructor
    }

    public ATriggerStatementWithoutTrailingSubstatement(
        @SuppressWarnings("hiding") PTriggerStatement _triggerStatement_)
    {
        // Constructor
        setTriggerStatement(_triggerStatement_);

    }

    @Override
    public Object clone()
    {
        return new ATriggerStatementWithoutTrailingSubstatement(
            cloneNode(this._triggerStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATriggerStatementWithoutTrailingSubstatement(this);
    }

    public PTriggerStatement getTriggerStatement()
    {
        return this._triggerStatement_;
    }

    public void setTriggerStatement(PTriggerStatement node)
    {
        if(this._triggerStatement_ != null)
        {
            this._triggerStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._triggerStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._triggerStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._triggerStatement_ == child)
        {
            this._triggerStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._triggerStatement_ == oldChild)
        {
            setTriggerStatement((PTriggerStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
