/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AConstructorDeclarator extends PConstructorDeclarator
{
    private final LinkedList<PTypeParameter> _typeParameter_ = new LinkedList<PTypeParameter>();
    private PSimpleTypeName _simpleTypeName_;
    private PFormalParameterList _formalParameterList_;

    public AConstructorDeclarator()
    {
        // Constructor
    }

    public AConstructorDeclarator(
        @SuppressWarnings("hiding") List<?> _typeParameter_,
        @SuppressWarnings("hiding") PSimpleTypeName _simpleTypeName_,
        @SuppressWarnings("hiding") PFormalParameterList _formalParameterList_)
    {
        // Constructor
        setTypeParameter(_typeParameter_);

        setSimpleTypeName(_simpleTypeName_);

        setFormalParameterList(_formalParameterList_);

    }

    @Override
    public Object clone()
    {
        return new AConstructorDeclarator(
            cloneList(this._typeParameter_),
            cloneNode(this._simpleTypeName_),
            cloneNode(this._formalParameterList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstructorDeclarator(this);
    }

    public LinkedList<PTypeParameter> getTypeParameter()
    {
        return this._typeParameter_;
    }

    public void setTypeParameter(List<?> list)
    {
        for(PTypeParameter e : this._typeParameter_)
        {
            e.parent(null);
        }
        this._typeParameter_.clear();

        for(Object obj_e : list)
        {
            PTypeParameter e = (PTypeParameter) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._typeParameter_.add(e);
        }
    }

    public PSimpleTypeName getSimpleTypeName()
    {
        return this._simpleTypeName_;
    }

    public void setSimpleTypeName(PSimpleTypeName node)
    {
        if(this._simpleTypeName_ != null)
        {
            this._simpleTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleTypeName_ = node;
    }

    public PFormalParameterList getFormalParameterList()
    {
        return this._formalParameterList_;
    }

    public void setFormalParameterList(PFormalParameterList node)
    {
        if(this._formalParameterList_ != null)
        {
            this._formalParameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalParameterList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeParameter_)
            + toString(this._simpleTypeName_)
            + toString(this._formalParameterList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeParameter_.remove(child))
        {
            return;
        }

        if(this._simpleTypeName_ == child)
        {
            this._simpleTypeName_ = null;
            return;
        }

        if(this._formalParameterList_ == child)
        {
            this._formalParameterList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTypeParameter> i = this._typeParameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._simpleTypeName_ == oldChild)
        {
            setSimpleTypeName((PSimpleTypeName) newChild);
            return;
        }

        if(this._formalParameterList_ == oldChild)
        {
            setFormalParameterList((PFormalParameterList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
