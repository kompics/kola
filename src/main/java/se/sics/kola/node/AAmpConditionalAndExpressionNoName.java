/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AAmpConditionalAndExpressionNoName extends PConditionalAndExpressionNoName
{
    private PConditionalAndExpressionNoName _conditionalAndExpressionNoName_;
    private TAmpAmp _ampAmp_;
    private PInclusiveOrExpressionNoName _inclusiveOrExpressionNoName_;

    public AAmpConditionalAndExpressionNoName()
    {
        // Constructor
    }

    public AAmpConditionalAndExpressionNoName(
        @SuppressWarnings("hiding") PConditionalAndExpressionNoName _conditionalAndExpressionNoName_,
        @SuppressWarnings("hiding") TAmpAmp _ampAmp_,
        @SuppressWarnings("hiding") PInclusiveOrExpressionNoName _inclusiveOrExpressionNoName_)
    {
        // Constructor
        setConditionalAndExpressionNoName(_conditionalAndExpressionNoName_);

        setAmpAmp(_ampAmp_);

        setInclusiveOrExpressionNoName(_inclusiveOrExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new AAmpConditionalAndExpressionNoName(
            cloneNode(this._conditionalAndExpressionNoName_),
            cloneNode(this._ampAmp_),
            cloneNode(this._inclusiveOrExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAmpConditionalAndExpressionNoName(this);
    }

    public PConditionalAndExpressionNoName getConditionalAndExpressionNoName()
    {
        return this._conditionalAndExpressionNoName_;
    }

    public void setConditionalAndExpressionNoName(PConditionalAndExpressionNoName node)
    {
        if(this._conditionalAndExpressionNoName_ != null)
        {
            this._conditionalAndExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalAndExpressionNoName_ = node;
    }

    public TAmpAmp getAmpAmp()
    {
        return this._ampAmp_;
    }

    public void setAmpAmp(TAmpAmp node)
    {
        if(this._ampAmp_ != null)
        {
            this._ampAmp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ampAmp_ = node;
    }

    public PInclusiveOrExpressionNoName getInclusiveOrExpressionNoName()
    {
        return this._inclusiveOrExpressionNoName_;
    }

    public void setInclusiveOrExpressionNoName(PInclusiveOrExpressionNoName node)
    {
        if(this._inclusiveOrExpressionNoName_ != null)
        {
            this._inclusiveOrExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inclusiveOrExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalAndExpressionNoName_)
            + toString(this._ampAmp_)
            + toString(this._inclusiveOrExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalAndExpressionNoName_ == child)
        {
            this._conditionalAndExpressionNoName_ = null;
            return;
        }

        if(this._ampAmp_ == child)
        {
            this._ampAmp_ = null;
            return;
        }

        if(this._inclusiveOrExpressionNoName_ == child)
        {
            this._inclusiveOrExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalAndExpressionNoName_ == oldChild)
        {
            setConditionalAndExpressionNoName((PConditionalAndExpressionNoName) newChild);
            return;
        }

        if(this._ampAmp_ == oldChild)
        {
            setAmpAmp((TAmpAmp) newChild);
            return;
        }

        if(this._inclusiveOrExpressionNoName_ == oldChild)
        {
            setInclusiveOrExpressionNoName((PInclusiveOrExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
