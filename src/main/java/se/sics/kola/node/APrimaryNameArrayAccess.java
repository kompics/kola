/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class APrimaryNameArrayAccess extends PArrayAccess
{
    private PPrimaryNoNewArray _primaryNoNewArray_;
    private TLBkt _lBkt_;
    private PName _name_;
    private TRBkt _rBkt_;

    public APrimaryNameArrayAccess()
    {
        // Constructor
    }

    public APrimaryNameArrayAccess(
        @SuppressWarnings("hiding") PPrimaryNoNewArray _primaryNoNewArray_,
        @SuppressWarnings("hiding") TLBkt _lBkt_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TRBkt _rBkt_)
    {
        // Constructor
        setPrimaryNoNewArray(_primaryNoNewArray_);

        setLBkt(_lBkt_);

        setName(_name_);

        setRBkt(_rBkt_);

    }

    @Override
    public Object clone()
    {
        return new APrimaryNameArrayAccess(
            cloneNode(this._primaryNoNewArray_),
            cloneNode(this._lBkt_),
            cloneNode(this._name_),
            cloneNode(this._rBkt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrimaryNameArrayAccess(this);
    }

    public PPrimaryNoNewArray getPrimaryNoNewArray()
    {
        return this._primaryNoNewArray_;
    }

    public void setPrimaryNoNewArray(PPrimaryNoNewArray node)
    {
        if(this._primaryNoNewArray_ != null)
        {
            this._primaryNoNewArray_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primaryNoNewArray_ = node;
    }

    public TLBkt getLBkt()
    {
        return this._lBkt_;
    }

    public void setLBkt(TLBkt node)
    {
        if(this._lBkt_ != null)
        {
            this._lBkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBkt_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TRBkt getRBkt()
    {
        return this._rBkt_;
    }

    public void setRBkt(TRBkt node)
    {
        if(this._rBkt_ != null)
        {
            this._rBkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBkt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._primaryNoNewArray_)
            + toString(this._lBkt_)
            + toString(this._name_)
            + toString(this._rBkt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._primaryNoNewArray_ == child)
        {
            this._primaryNoNewArray_ = null;
            return;
        }

        if(this._lBkt_ == child)
        {
            this._lBkt_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._rBkt_ == child)
        {
            this._rBkt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._primaryNoNewArray_ == oldChild)
        {
            setPrimaryNoNewArray((PPrimaryNoNewArray) newChild);
            return;
        }

        if(this._lBkt_ == oldChild)
        {
            setLBkt((TLBkt) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._rBkt_ == oldChild)
        {
            setRBkt((TRBkt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
