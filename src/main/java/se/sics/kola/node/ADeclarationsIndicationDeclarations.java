/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarationsIndicationDeclarations extends PIndicationDeclarations
{
    private PIndicationDeclarations _indicationDeclarations_;
    private TComma _comma_;
    private PIndicationDeclaration _indicationDeclaration_;

    public ADeclarationsIndicationDeclarations()
    {
        // Constructor
    }

    public ADeclarationsIndicationDeclarations(
        @SuppressWarnings("hiding") PIndicationDeclarations _indicationDeclarations_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PIndicationDeclaration _indicationDeclaration_)
    {
        // Constructor
        setIndicationDeclarations(_indicationDeclarations_);

        setComma(_comma_);

        setIndicationDeclaration(_indicationDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarationsIndicationDeclarations(
            cloneNode(this._indicationDeclarations_),
            cloneNode(this._comma_),
            cloneNode(this._indicationDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarationsIndicationDeclarations(this);
    }

    public PIndicationDeclarations getIndicationDeclarations()
    {
        return this._indicationDeclarations_;
    }

    public void setIndicationDeclarations(PIndicationDeclarations node)
    {
        if(this._indicationDeclarations_ != null)
        {
            this._indicationDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._indicationDeclarations_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PIndicationDeclaration getIndicationDeclaration()
    {
        return this._indicationDeclaration_;
    }

    public void setIndicationDeclaration(PIndicationDeclaration node)
    {
        if(this._indicationDeclaration_ != null)
        {
            this._indicationDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._indicationDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._indicationDeclarations_)
            + toString(this._comma_)
            + toString(this._indicationDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._indicationDeclarations_ == child)
        {
            this._indicationDeclarations_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._indicationDeclaration_ == child)
        {
            this._indicationDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._indicationDeclarations_ == oldChild)
        {
            setIndicationDeclarations((PIndicationDeclarations) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._indicationDeclaration_ == oldChild)
        {
            setIndicationDeclaration((PIndicationDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
