/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ATypeArgumentList extends PTypeArgumentList
{
    private final LinkedList<PTypeArgumentListHead> _typeArgumentListHead_ = new LinkedList<PTypeArgumentListHead>();
    private PTypeArgument _typeArgument_;

    public ATypeArgumentList()
    {
        // Constructor
    }

    public ATypeArgumentList(
        @SuppressWarnings("hiding") List<?> _typeArgumentListHead_,
        @SuppressWarnings("hiding") PTypeArgument _typeArgument_)
    {
        // Constructor
        setTypeArgumentListHead(_typeArgumentListHead_);

        setTypeArgument(_typeArgument_);

    }

    @Override
    public Object clone()
    {
        return new ATypeArgumentList(
            cloneList(this._typeArgumentListHead_),
            cloneNode(this._typeArgument_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeArgumentList(this);
    }

    public LinkedList<PTypeArgumentListHead> getTypeArgumentListHead()
    {
        return this._typeArgumentListHead_;
    }

    public void setTypeArgumentListHead(List<?> list)
    {
        for(PTypeArgumentListHead e : this._typeArgumentListHead_)
        {
            e.parent(null);
        }
        this._typeArgumentListHead_.clear();

        for(Object obj_e : list)
        {
            PTypeArgumentListHead e = (PTypeArgumentListHead) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._typeArgumentListHead_.add(e);
        }
    }

    public PTypeArgument getTypeArgument()
    {
        return this._typeArgument_;
    }

    public void setTypeArgument(PTypeArgument node)
    {
        if(this._typeArgument_ != null)
        {
            this._typeArgument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArgument_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeArgumentListHead_)
            + toString(this._typeArgument_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeArgumentListHead_.remove(child))
        {
            return;
        }

        if(this._typeArgument_ == child)
        {
            this._typeArgument_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTypeArgumentListHead> i = this._typeArgumentListHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeArgumentListHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._typeArgument_ == oldChild)
        {
            setTypeArgument((PTypeArgument) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
