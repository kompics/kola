/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AClassArrayTypeNoArguments extends PArrayTypeNoArguments
{
    private PClassOrInterfaceTypeNoArguments _classOrInterfaceTypeNoArguments_;
    private final LinkedList<PDim> _dim_ = new LinkedList<PDim>();

    public AClassArrayTypeNoArguments()
    {
        // Constructor
    }

    public AClassArrayTypeNoArguments(
        @SuppressWarnings("hiding") PClassOrInterfaceTypeNoArguments _classOrInterfaceTypeNoArguments_,
        @SuppressWarnings("hiding") List<?> _dim_)
    {
        // Constructor
        setClassOrInterfaceTypeNoArguments(_classOrInterfaceTypeNoArguments_);

        setDim(_dim_);

    }

    @Override
    public Object clone()
    {
        return new AClassArrayTypeNoArguments(
            cloneNode(this._classOrInterfaceTypeNoArguments_),
            cloneList(this._dim_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassArrayTypeNoArguments(this);
    }

    public PClassOrInterfaceTypeNoArguments getClassOrInterfaceTypeNoArguments()
    {
        return this._classOrInterfaceTypeNoArguments_;
    }

    public void setClassOrInterfaceTypeNoArguments(PClassOrInterfaceTypeNoArguments node)
    {
        if(this._classOrInterfaceTypeNoArguments_ != null)
        {
            this._classOrInterfaceTypeNoArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classOrInterfaceTypeNoArguments_ = node;
    }

    public LinkedList<PDim> getDim()
    {
        return this._dim_;
    }

    public void setDim(List<?> list)
    {
        for(PDim e : this._dim_)
        {
            e.parent(null);
        }
        this._dim_.clear();

        for(Object obj_e : list)
        {
            PDim e = (PDim) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._dim_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classOrInterfaceTypeNoArguments_)
            + toString(this._dim_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classOrInterfaceTypeNoArguments_ == child)
        {
            this._classOrInterfaceTypeNoArguments_ = null;
            return;
        }

        if(this._dim_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classOrInterfaceTypeNoArguments_ == oldChild)
        {
            setClassOrInterfaceTypeNoArguments((PClassOrInterfaceTypeNoArguments) newChild);
            return;
        }

        for(ListIterator<PDim> i = this._dim_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDim) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
