/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class APrimaryClassInstanceCreationExpression extends PClassInstanceCreationExpression
{
    private PExpressionNoName _expressionNoName_;
    private PTypeArguments _typeArguments_;
    private TIdentifier _identifier_;
    private PTypeArgumentsOrDiamond _typeArgumentsOrDiamond_;
    private final LinkedList<PArgument> _argument_ = new LinkedList<PArgument>();
    private PClassBody _classBody_;

    public APrimaryClassInstanceCreationExpression()
    {
        // Constructor
    }

    public APrimaryClassInstanceCreationExpression(
        @SuppressWarnings("hiding") PExpressionNoName _expressionNoName_,
        @SuppressWarnings("hiding") PTypeArguments _typeArguments_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PTypeArgumentsOrDiamond _typeArgumentsOrDiamond_,
        @SuppressWarnings("hiding") List<?> _argument_,
        @SuppressWarnings("hiding") PClassBody _classBody_)
    {
        // Constructor
        setExpressionNoName(_expressionNoName_);

        setTypeArguments(_typeArguments_);

        setIdentifier(_identifier_);

        setTypeArgumentsOrDiamond(_typeArgumentsOrDiamond_);

        setArgument(_argument_);

        setClassBody(_classBody_);

    }

    @Override
    public Object clone()
    {
        return new APrimaryClassInstanceCreationExpression(
            cloneNode(this._expressionNoName_),
            cloneNode(this._typeArguments_),
            cloneNode(this._identifier_),
            cloneNode(this._typeArgumentsOrDiamond_),
            cloneList(this._argument_),
            cloneNode(this._classBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrimaryClassInstanceCreationExpression(this);
    }

    public PExpressionNoName getExpressionNoName()
    {
        return this._expressionNoName_;
    }

    public void setExpressionNoName(PExpressionNoName node)
    {
        if(this._expressionNoName_ != null)
        {
            this._expressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoName_ = node;
    }

    public PTypeArguments getTypeArguments()
    {
        return this._typeArguments_;
    }

    public void setTypeArguments(PTypeArguments node)
    {
        if(this._typeArguments_ != null)
        {
            this._typeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArguments_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PTypeArgumentsOrDiamond getTypeArgumentsOrDiamond()
    {
        return this._typeArgumentsOrDiamond_;
    }

    public void setTypeArgumentsOrDiamond(PTypeArgumentsOrDiamond node)
    {
        if(this._typeArgumentsOrDiamond_ != null)
        {
            this._typeArgumentsOrDiamond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArgumentsOrDiamond_ = node;
    }

    public LinkedList<PArgument> getArgument()
    {
        return this._argument_;
    }

    public void setArgument(List<?> list)
    {
        for(PArgument e : this._argument_)
        {
            e.parent(null);
        }
        this._argument_.clear();

        for(Object obj_e : list)
        {
            PArgument e = (PArgument) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._argument_.add(e);
        }
    }

    public PClassBody getClassBody()
    {
        return this._classBody_;
    }

    public void setClassBody(PClassBody node)
    {
        if(this._classBody_ != null)
        {
            this._classBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionNoName_)
            + toString(this._typeArguments_)
            + toString(this._identifier_)
            + toString(this._typeArgumentsOrDiamond_)
            + toString(this._argument_)
            + toString(this._classBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionNoName_ == child)
        {
            this._expressionNoName_ = null;
            return;
        }

        if(this._typeArguments_ == child)
        {
            this._typeArguments_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._typeArgumentsOrDiamond_ == child)
        {
            this._typeArgumentsOrDiamond_ = null;
            return;
        }

        if(this._argument_.remove(child))
        {
            return;
        }

        if(this._classBody_ == child)
        {
            this._classBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionNoName_ == oldChild)
        {
            setExpressionNoName((PExpressionNoName) newChild);
            return;
        }

        if(this._typeArguments_ == oldChild)
        {
            setTypeArguments((PTypeArguments) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._typeArgumentsOrDiamond_ == oldChild)
        {
            setTypeArgumentsOrDiamond((PTypeArgumentsOrDiamond) newChild);
            return;
        }

        for(ListIterator<PArgument> i = this._argument_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgument) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._classBody_ == oldChild)
        {
            setClassBody((PClassBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
