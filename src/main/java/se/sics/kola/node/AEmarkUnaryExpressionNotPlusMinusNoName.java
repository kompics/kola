/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AEmarkUnaryExpressionNotPlusMinusNoName extends PUnaryExpressionNotPlusMinusNoName
{
    private TEmark _emark_;
    private PUnaryExpressionNoName _unaryExpressionNoName_;

    public AEmarkUnaryExpressionNotPlusMinusNoName()
    {
        // Constructor
    }

    public AEmarkUnaryExpressionNotPlusMinusNoName(
        @SuppressWarnings("hiding") TEmark _emark_,
        @SuppressWarnings("hiding") PUnaryExpressionNoName _unaryExpressionNoName_)
    {
        // Constructor
        setEmark(_emark_);

        setUnaryExpressionNoName(_unaryExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new AEmarkUnaryExpressionNotPlusMinusNoName(
            cloneNode(this._emark_),
            cloneNode(this._unaryExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEmarkUnaryExpressionNotPlusMinusNoName(this);
    }

    public TEmark getEmark()
    {
        return this._emark_;
    }

    public void setEmark(TEmark node)
    {
        if(this._emark_ != null)
        {
            this._emark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._emark_ = node;
    }

    public PUnaryExpressionNoName getUnaryExpressionNoName()
    {
        return this._unaryExpressionNoName_;
    }

    public void setUnaryExpressionNoName(PUnaryExpressionNoName node)
    {
        if(this._unaryExpressionNoName_ != null)
        {
            this._unaryExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unaryExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._emark_)
            + toString(this._unaryExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._emark_ == child)
        {
            this._emark_ = null;
            return;
        }

        if(this._unaryExpressionNoName_ == child)
        {
            this._unaryExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._emark_ == oldChild)
        {
            setEmark((TEmark) newChild);
            return;
        }

        if(this._unaryExpressionNoName_ == oldChild)
        {
            setUnaryExpressionNoName((PUnaryExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
