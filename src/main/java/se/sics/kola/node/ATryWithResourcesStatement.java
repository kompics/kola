/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ATryWithResourcesStatement extends PTryWithResourcesStatement
{
    private PResourceSpecification _resourceSpecification_;
    private PBlock _block_;
    private PVariableDeclaratorId _variableDeclaratorId_;
    private final LinkedList<PCatchClause> _catchClause_ = new LinkedList<PCatchClause>();
    private PFinally _finally_;

    public ATryWithResourcesStatement()
    {
        // Constructor
    }

    public ATryWithResourcesStatement(
        @SuppressWarnings("hiding") PResourceSpecification _resourceSpecification_,
        @SuppressWarnings("hiding") PBlock _block_,
        @SuppressWarnings("hiding") PVariableDeclaratorId _variableDeclaratorId_,
        @SuppressWarnings("hiding") List<?> _catchClause_,
        @SuppressWarnings("hiding") PFinally _finally_)
    {
        // Constructor
        setResourceSpecification(_resourceSpecification_);

        setBlock(_block_);

        setVariableDeclaratorId(_variableDeclaratorId_);

        setCatchClause(_catchClause_);

        setFinally(_finally_);

    }

    @Override
    public Object clone()
    {
        return new ATryWithResourcesStatement(
            cloneNode(this._resourceSpecification_),
            cloneNode(this._block_),
            cloneNode(this._variableDeclaratorId_),
            cloneList(this._catchClause_),
            cloneNode(this._finally_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATryWithResourcesStatement(this);
    }

    public PResourceSpecification getResourceSpecification()
    {
        return this._resourceSpecification_;
    }

    public void setResourceSpecification(PResourceSpecification node)
    {
        if(this._resourceSpecification_ != null)
        {
            this._resourceSpecification_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._resourceSpecification_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    public PVariableDeclaratorId getVariableDeclaratorId()
    {
        return this._variableDeclaratorId_;
    }

    public void setVariableDeclaratorId(PVariableDeclaratorId node)
    {
        if(this._variableDeclaratorId_ != null)
        {
            this._variableDeclaratorId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDeclaratorId_ = node;
    }

    public LinkedList<PCatchClause> getCatchClause()
    {
        return this._catchClause_;
    }

    public void setCatchClause(List<?> list)
    {
        for(PCatchClause e : this._catchClause_)
        {
            e.parent(null);
        }
        this._catchClause_.clear();

        for(Object obj_e : list)
        {
            PCatchClause e = (PCatchClause) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._catchClause_.add(e);
        }
    }

    public PFinally getFinally()
    {
        return this._finally_;
    }

    public void setFinally(PFinally node)
    {
        if(this._finally_ != null)
        {
            this._finally_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._finally_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._resourceSpecification_)
            + toString(this._block_)
            + toString(this._variableDeclaratorId_)
            + toString(this._catchClause_)
            + toString(this._finally_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._resourceSpecification_ == child)
        {
            this._resourceSpecification_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        if(this._variableDeclaratorId_ == child)
        {
            this._variableDeclaratorId_ = null;
            return;
        }

        if(this._catchClause_.remove(child))
        {
            return;
        }

        if(this._finally_ == child)
        {
            this._finally_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._resourceSpecification_ == oldChild)
        {
            setResourceSpecification((PResourceSpecification) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        if(this._variableDeclaratorId_ == oldChild)
        {
            setVariableDeclaratorId((PVariableDeclaratorId) newChild);
            return;
        }

        for(ListIterator<PCatchClause> i = this._catchClause_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCatchClause) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._finally_ == oldChild)
        {
            setFinally((PFinally) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
