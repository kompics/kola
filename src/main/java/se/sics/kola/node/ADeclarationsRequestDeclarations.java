/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarationsRequestDeclarations extends PRequestDeclarations
{
    private PRequestDeclarations _requestDeclarations_;
    private TComma _comma_;
    private PRequestDeclaration _requestDeclaration_;

    public ADeclarationsRequestDeclarations()
    {
        // Constructor
    }

    public ADeclarationsRequestDeclarations(
        @SuppressWarnings("hiding") PRequestDeclarations _requestDeclarations_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PRequestDeclaration _requestDeclaration_)
    {
        // Constructor
        setRequestDeclarations(_requestDeclarations_);

        setComma(_comma_);

        setRequestDeclaration(_requestDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarationsRequestDeclarations(
            cloneNode(this._requestDeclarations_),
            cloneNode(this._comma_),
            cloneNode(this._requestDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarationsRequestDeclarations(this);
    }

    public PRequestDeclarations getRequestDeclarations()
    {
        return this._requestDeclarations_;
    }

    public void setRequestDeclarations(PRequestDeclarations node)
    {
        if(this._requestDeclarations_ != null)
        {
            this._requestDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._requestDeclarations_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PRequestDeclaration getRequestDeclaration()
    {
        return this._requestDeclaration_;
    }

    public void setRequestDeclaration(PRequestDeclaration node)
    {
        if(this._requestDeclaration_ != null)
        {
            this._requestDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._requestDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._requestDeclarations_)
            + toString(this._comma_)
            + toString(this._requestDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._requestDeclarations_ == child)
        {
            this._requestDeclarations_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._requestDeclaration_ == child)
        {
            this._requestDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._requestDeclarations_ == oldChild)
        {
            setRequestDeclarations((PRequestDeclarations) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._requestDeclaration_ == oldChild)
        {
            setRequestDeclaration((PRequestDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
