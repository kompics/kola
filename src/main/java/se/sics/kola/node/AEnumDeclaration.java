/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AEnumDeclaration extends PEnumDeclaration
{
    private PModifiers _modifiers_;
    private TEnumKeyword _enumKeyword_;
    private TIdentifier _identifier_;
    private PInterfaces _interfaces_;
    private PEnumBody _enumBody_;

    public AEnumDeclaration()
    {
        // Constructor
    }

    public AEnumDeclaration(
        @SuppressWarnings("hiding") PModifiers _modifiers_,
        @SuppressWarnings("hiding") TEnumKeyword _enumKeyword_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PInterfaces _interfaces_,
        @SuppressWarnings("hiding") PEnumBody _enumBody_)
    {
        // Constructor
        setModifiers(_modifiers_);

        setEnumKeyword(_enumKeyword_);

        setIdentifier(_identifier_);

        setInterfaces(_interfaces_);

        setEnumBody(_enumBody_);

    }

    @Override
    public Object clone()
    {
        return new AEnumDeclaration(
            cloneNode(this._modifiers_),
            cloneNode(this._enumKeyword_),
            cloneNode(this._identifier_),
            cloneNode(this._interfaces_),
            cloneNode(this._enumBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumDeclaration(this);
    }

    public PModifiers getModifiers()
    {
        return this._modifiers_;
    }

    public void setModifiers(PModifiers node)
    {
        if(this._modifiers_ != null)
        {
            this._modifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifiers_ = node;
    }

    public TEnumKeyword getEnumKeyword()
    {
        return this._enumKeyword_;
    }

    public void setEnumKeyword(TEnumKeyword node)
    {
        if(this._enumKeyword_ != null)
        {
            this._enumKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumKeyword_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PInterfaces getInterfaces()
    {
        return this._interfaces_;
    }

    public void setInterfaces(PInterfaces node)
    {
        if(this._interfaces_ != null)
        {
            this._interfaces_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interfaces_ = node;
    }

    public PEnumBody getEnumBody()
    {
        return this._enumBody_;
    }

    public void setEnumBody(PEnumBody node)
    {
        if(this._enumBody_ != null)
        {
            this._enumBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifiers_)
            + toString(this._enumKeyword_)
            + toString(this._identifier_)
            + toString(this._interfaces_)
            + toString(this._enumBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifiers_ == child)
        {
            this._modifiers_ = null;
            return;
        }

        if(this._enumKeyword_ == child)
        {
            this._enumKeyword_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._interfaces_ == child)
        {
            this._interfaces_ = null;
            return;
        }

        if(this._enumBody_ == child)
        {
            this._enumBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifiers_ == oldChild)
        {
            setModifiers((PModifiers) newChild);
            return;
        }

        if(this._enumKeyword_ == oldChild)
        {
            setEnumKeyword((TEnumKeyword) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._interfaces_ == oldChild)
        {
            setInterfaces((PInterfaces) newChild);
            return;
        }

        if(this._enumBody_ == oldChild)
        {
            setEnumBody((PEnumBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
