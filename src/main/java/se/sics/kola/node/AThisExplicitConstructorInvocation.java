/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AThisExplicitConstructorInvocation extends PExplicitConstructorInvocation
{
    private PNonWildTypeArguments _nonWildTypeArguments_;
    private TThisKeyword _thisKeyword_;
    private TLPar _lPar_;
    private PArgumentList _argumentList_;
    private TRPar _rPar_;
    private TSemi _semi_;

    public AThisExplicitConstructorInvocation()
    {
        // Constructor
    }

    public AThisExplicitConstructorInvocation(
        @SuppressWarnings("hiding") PNonWildTypeArguments _nonWildTypeArguments_,
        @SuppressWarnings("hiding") TThisKeyword _thisKeyword_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setNonWildTypeArguments(_nonWildTypeArguments_);

        setThisKeyword(_thisKeyword_);

        setLPar(_lPar_);

        setArgumentList(_argumentList_);

        setRPar(_rPar_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AThisExplicitConstructorInvocation(
            cloneNode(this._nonWildTypeArguments_),
            cloneNode(this._thisKeyword_),
            cloneNode(this._lPar_),
            cloneNode(this._argumentList_),
            cloneNode(this._rPar_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAThisExplicitConstructorInvocation(this);
    }

    public PNonWildTypeArguments getNonWildTypeArguments()
    {
        return this._nonWildTypeArguments_;
    }

    public void setNonWildTypeArguments(PNonWildTypeArguments node)
    {
        if(this._nonWildTypeArguments_ != null)
        {
            this._nonWildTypeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonWildTypeArguments_ = node;
    }

    public TThisKeyword getThisKeyword()
    {
        return this._thisKeyword_;
    }

    public void setThisKeyword(TThisKeyword node)
    {
        if(this._thisKeyword_ != null)
        {
            this._thisKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thisKeyword_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nonWildTypeArguments_)
            + toString(this._thisKeyword_)
            + toString(this._lPar_)
            + toString(this._argumentList_)
            + toString(this._rPar_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nonWildTypeArguments_ == child)
        {
            this._nonWildTypeArguments_ = null;
            return;
        }

        if(this._thisKeyword_ == child)
        {
            this._thisKeyword_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nonWildTypeArguments_ == oldChild)
        {
            setNonWildTypeArguments((PNonWildTypeArguments) newChild);
            return;
        }

        if(this._thisKeyword_ == oldChild)
        {
            setThisKeyword((TThisKeyword) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
