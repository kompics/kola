/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AExtendsInterfaces extends PExtendsInterfaces
{
    private TExtendsKeyword _extendsKeyword_;
    private PInterfaceTypeList _interfaceTypeList_;

    public AExtendsInterfaces()
    {
        // Constructor
    }

    public AExtendsInterfaces(
        @SuppressWarnings("hiding") TExtendsKeyword _extendsKeyword_,
        @SuppressWarnings("hiding") PInterfaceTypeList _interfaceTypeList_)
    {
        // Constructor
        setExtendsKeyword(_extendsKeyword_);

        setInterfaceTypeList(_interfaceTypeList_);

    }

    @Override
    public Object clone()
    {
        return new AExtendsInterfaces(
            cloneNode(this._extendsKeyword_),
            cloneNode(this._interfaceTypeList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExtendsInterfaces(this);
    }

    public TExtendsKeyword getExtendsKeyword()
    {
        return this._extendsKeyword_;
    }

    public void setExtendsKeyword(TExtendsKeyword node)
    {
        if(this._extendsKeyword_ != null)
        {
            this._extendsKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extendsKeyword_ = node;
    }

    public PInterfaceTypeList getInterfaceTypeList()
    {
        return this._interfaceTypeList_;
    }

    public void setInterfaceTypeList(PInterfaceTypeList node)
    {
        if(this._interfaceTypeList_ != null)
        {
            this._interfaceTypeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interfaceTypeList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._extendsKeyword_)
            + toString(this._interfaceTypeList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._extendsKeyword_ == child)
        {
            this._extendsKeyword_ = null;
            return;
        }

        if(this._interfaceTypeList_ == child)
        {
            this._interfaceTypeList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._extendsKeyword_ == oldChild)
        {
            setExtendsKeyword((TExtendsKeyword) newChild);
            return;
        }

        if(this._interfaceTypeList_ == oldChild)
        {
            setInterfaceTypeList((PInterfaceTypeList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
