/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AShrTypeArguments extends PTypeArguments
{
    private TLt _lt1_;
    private final LinkedList<PTypeArgumentListHead> _typeArgumentListHead_ = new LinkedList<PTypeArgumentListHead>();
    private PTypeDeclSpecifier _typeDeclSpecifier_;
    private TLt _lt2_;
    private PTypeArgumentList _typeArgumentList_;
    private TShr _shr_;

    public AShrTypeArguments()
    {
        // Constructor
    }

    public AShrTypeArguments(
        @SuppressWarnings("hiding") TLt _lt1_,
        @SuppressWarnings("hiding") List<?> _typeArgumentListHead_,
        @SuppressWarnings("hiding") PTypeDeclSpecifier _typeDeclSpecifier_,
        @SuppressWarnings("hiding") TLt _lt2_,
        @SuppressWarnings("hiding") PTypeArgumentList _typeArgumentList_,
        @SuppressWarnings("hiding") TShr _shr_)
    {
        // Constructor
        setLt1(_lt1_);

        setTypeArgumentListHead(_typeArgumentListHead_);

        setTypeDeclSpecifier(_typeDeclSpecifier_);

        setLt2(_lt2_);

        setTypeArgumentList(_typeArgumentList_);

        setShr(_shr_);

    }

    @Override
    public Object clone()
    {
        return new AShrTypeArguments(
            cloneNode(this._lt1_),
            cloneList(this._typeArgumentListHead_),
            cloneNode(this._typeDeclSpecifier_),
            cloneNode(this._lt2_),
            cloneNode(this._typeArgumentList_),
            cloneNode(this._shr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShrTypeArguments(this);
    }

    public TLt getLt1()
    {
        return this._lt1_;
    }

    public void setLt1(TLt node)
    {
        if(this._lt1_ != null)
        {
            this._lt1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt1_ = node;
    }

    public LinkedList<PTypeArgumentListHead> getTypeArgumentListHead()
    {
        return this._typeArgumentListHead_;
    }

    public void setTypeArgumentListHead(List<?> list)
    {
        for(PTypeArgumentListHead e : this._typeArgumentListHead_)
        {
            e.parent(null);
        }
        this._typeArgumentListHead_.clear();

        for(Object obj_e : list)
        {
            PTypeArgumentListHead e = (PTypeArgumentListHead) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._typeArgumentListHead_.add(e);
        }
    }

    public PTypeDeclSpecifier getTypeDeclSpecifier()
    {
        return this._typeDeclSpecifier_;
    }

    public void setTypeDeclSpecifier(PTypeDeclSpecifier node)
    {
        if(this._typeDeclSpecifier_ != null)
        {
            this._typeDeclSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDeclSpecifier_ = node;
    }

    public TLt getLt2()
    {
        return this._lt2_;
    }

    public void setLt2(TLt node)
    {
        if(this._lt2_ != null)
        {
            this._lt2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt2_ = node;
    }

    public PTypeArgumentList getTypeArgumentList()
    {
        return this._typeArgumentList_;
    }

    public void setTypeArgumentList(PTypeArgumentList node)
    {
        if(this._typeArgumentList_ != null)
        {
            this._typeArgumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArgumentList_ = node;
    }

    public TShr getShr()
    {
        return this._shr_;
    }

    public void setShr(TShr node)
    {
        if(this._shr_ != null)
        {
            this._shr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lt1_)
            + toString(this._typeArgumentListHead_)
            + toString(this._typeDeclSpecifier_)
            + toString(this._lt2_)
            + toString(this._typeArgumentList_)
            + toString(this._shr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lt1_ == child)
        {
            this._lt1_ = null;
            return;
        }

        if(this._typeArgumentListHead_.remove(child))
        {
            return;
        }

        if(this._typeDeclSpecifier_ == child)
        {
            this._typeDeclSpecifier_ = null;
            return;
        }

        if(this._lt2_ == child)
        {
            this._lt2_ = null;
            return;
        }

        if(this._typeArgumentList_ == child)
        {
            this._typeArgumentList_ = null;
            return;
        }

        if(this._shr_ == child)
        {
            this._shr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lt1_ == oldChild)
        {
            setLt1((TLt) newChild);
            return;
        }

        for(ListIterator<PTypeArgumentListHead> i = this._typeArgumentListHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeArgumentListHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._typeDeclSpecifier_ == oldChild)
        {
            setTypeDeclSpecifier((PTypeDeclSpecifier) newChild);
            return;
        }

        if(this._lt2_ == oldChild)
        {
            setLt2((TLt) newChild);
            return;
        }

        if(this._typeArgumentList_ == oldChild)
        {
            setTypeArgumentList((PTypeArgumentList) newChild);
            return;
        }

        if(this._shr_ == oldChild)
        {
            setShr((TShr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
