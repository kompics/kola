/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANameQmarkColonConditionalExpressionNoName extends PConditionalExpressionNoName
{
    private PName _name_;
    private TQmark _qmark_;
    private PExpressionNoName _expressionNoName_;
    private TColon _colon_;
    private PConditionalExpressionNoName _conditionalExpressionNoName_;

    public ANameQmarkColonConditionalExpressionNoName()
    {
        // Constructor
    }

    public ANameQmarkColonConditionalExpressionNoName(
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TQmark _qmark_,
        @SuppressWarnings("hiding") PExpressionNoName _expressionNoName_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PConditionalExpressionNoName _conditionalExpressionNoName_)
    {
        // Constructor
        setName(_name_);

        setQmark(_qmark_);

        setExpressionNoName(_expressionNoName_);

        setColon(_colon_);

        setConditionalExpressionNoName(_conditionalExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new ANameQmarkColonConditionalExpressionNoName(
            cloneNode(this._name_),
            cloneNode(this._qmark_),
            cloneNode(this._expressionNoName_),
            cloneNode(this._colon_),
            cloneNode(this._conditionalExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANameQmarkColonConditionalExpressionNoName(this);
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TQmark getQmark()
    {
        return this._qmark_;
    }

    public void setQmark(TQmark node)
    {
        if(this._qmark_ != null)
        {
            this._qmark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qmark_ = node;
    }

    public PExpressionNoName getExpressionNoName()
    {
        return this._expressionNoName_;
    }

    public void setExpressionNoName(PExpressionNoName node)
    {
        if(this._expressionNoName_ != null)
        {
            this._expressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoName_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PConditionalExpressionNoName getConditionalExpressionNoName()
    {
        return this._conditionalExpressionNoName_;
    }

    public void setConditionalExpressionNoName(PConditionalExpressionNoName node)
    {
        if(this._conditionalExpressionNoName_ != null)
        {
            this._conditionalExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._qmark_)
            + toString(this._expressionNoName_)
            + toString(this._colon_)
            + toString(this._conditionalExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._qmark_ == child)
        {
            this._qmark_ = null;
            return;
        }

        if(this._expressionNoName_ == child)
        {
            this._expressionNoName_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._conditionalExpressionNoName_ == child)
        {
            this._conditionalExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._qmark_ == oldChild)
        {
            setQmark((TQmark) newChild);
            return;
        }

        if(this._expressionNoName_ == oldChild)
        {
            setExpressionNoName((PExpressionNoName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._conditionalExpressionNoName_ == oldChild)
        {
            setConditionalExpressionNoName((PConditionalExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
