/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionSynchronizedStatement extends PSynchronizedStatement
{
    private TSynchronizedKeyword _synchronizedKeyword_;
    private TLPar _lPar_;
    private PExpressionNoName _expressionNoName_;
    private TRPar _rPar_;
    private PBlock _block_;

    public AExpressionSynchronizedStatement()
    {
        // Constructor
    }

    public AExpressionSynchronizedStatement(
        @SuppressWarnings("hiding") TSynchronizedKeyword _synchronizedKeyword_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpressionNoName _expressionNoName_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setSynchronizedKeyword(_synchronizedKeyword_);

        setLPar(_lPar_);

        setExpressionNoName(_expressionNoName_);

        setRPar(_rPar_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionSynchronizedStatement(
            cloneNode(this._synchronizedKeyword_),
            cloneNode(this._lPar_),
            cloneNode(this._expressionNoName_),
            cloneNode(this._rPar_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionSynchronizedStatement(this);
    }

    public TSynchronizedKeyword getSynchronizedKeyword()
    {
        return this._synchronizedKeyword_;
    }

    public void setSynchronizedKeyword(TSynchronizedKeyword node)
    {
        if(this._synchronizedKeyword_ != null)
        {
            this._synchronizedKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._synchronizedKeyword_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpressionNoName getExpressionNoName()
    {
        return this._expressionNoName_;
    }

    public void setExpressionNoName(PExpressionNoName node)
    {
        if(this._expressionNoName_ != null)
        {
            this._expressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoName_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._synchronizedKeyword_)
            + toString(this._lPar_)
            + toString(this._expressionNoName_)
            + toString(this._rPar_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._synchronizedKeyword_ == child)
        {
            this._synchronizedKeyword_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._expressionNoName_ == child)
        {
            this._expressionNoName_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._synchronizedKeyword_ == oldChild)
        {
            setSynchronizedKeyword((TSynchronizedKeyword) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._expressionNoName_ == oldChild)
        {
            setExpressionNoName((PExpressionNoName) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
