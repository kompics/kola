/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AListReferenceTypeList extends PReferenceTypeList
{
    private PReferenceTypeList _referenceTypeList_;
    private TComma _comma_;
    private PReferenceType _referenceType_;

    public AListReferenceTypeList()
    {
        // Constructor
    }

    public AListReferenceTypeList(
        @SuppressWarnings("hiding") PReferenceTypeList _referenceTypeList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PReferenceType _referenceType_)
    {
        // Constructor
        setReferenceTypeList(_referenceTypeList_);

        setComma(_comma_);

        setReferenceType(_referenceType_);

    }

    @Override
    public Object clone()
    {
        return new AListReferenceTypeList(
            cloneNode(this._referenceTypeList_),
            cloneNode(this._comma_),
            cloneNode(this._referenceType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListReferenceTypeList(this);
    }

    public PReferenceTypeList getReferenceTypeList()
    {
        return this._referenceTypeList_;
    }

    public void setReferenceTypeList(PReferenceTypeList node)
    {
        if(this._referenceTypeList_ != null)
        {
            this._referenceTypeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._referenceTypeList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PReferenceType getReferenceType()
    {
        return this._referenceType_;
    }

    public void setReferenceType(PReferenceType node)
    {
        if(this._referenceType_ != null)
        {
            this._referenceType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._referenceType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._referenceTypeList_)
            + toString(this._comma_)
            + toString(this._referenceType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._referenceTypeList_ == child)
        {
            this._referenceTypeList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._referenceType_ == child)
        {
            this._referenceType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._referenceTypeList_ == oldChild)
        {
            setReferenceTypeList((PReferenceTypeList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._referenceType_ == oldChild)
        {
            setReferenceType((PReferenceType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
