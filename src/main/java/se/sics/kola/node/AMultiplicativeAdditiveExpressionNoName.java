/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AMultiplicativeAdditiveExpressionNoName extends PAdditiveExpressionNoName
{
    private PMultiplicativeExpressionNoName _multiplicativeExpressionNoName_;

    public AMultiplicativeAdditiveExpressionNoName()
    {
        // Constructor
    }

    public AMultiplicativeAdditiveExpressionNoName(
        @SuppressWarnings("hiding") PMultiplicativeExpressionNoName _multiplicativeExpressionNoName_)
    {
        // Constructor
        setMultiplicativeExpressionNoName(_multiplicativeExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new AMultiplicativeAdditiveExpressionNoName(
            cloneNode(this._multiplicativeExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplicativeAdditiveExpressionNoName(this);
    }

    public PMultiplicativeExpressionNoName getMultiplicativeExpressionNoName()
    {
        return this._multiplicativeExpressionNoName_;
    }

    public void setMultiplicativeExpressionNoName(PMultiplicativeExpressionNoName node)
    {
        if(this._multiplicativeExpressionNoName_ != null)
        {
            this._multiplicativeExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiplicativeExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiplicativeExpressionNoName_ == child)
        {
            this._multiplicativeExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiplicativeExpressionNoName_ == oldChild)
        {
            setMultiplicativeExpressionNoName((PMultiplicativeExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
