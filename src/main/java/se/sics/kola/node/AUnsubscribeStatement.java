/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AUnsubscribeStatement extends PUnsubscribeStatement
{
    private PName _handlerId_;
    private PName _portId_;

    public AUnsubscribeStatement()
    {
        // Constructor
    }

    public AUnsubscribeStatement(
        @SuppressWarnings("hiding") PName _handlerId_,
        @SuppressWarnings("hiding") PName _portId_)
    {
        // Constructor
        setHandlerId(_handlerId_);

        setPortId(_portId_);

    }

    @Override
    public Object clone()
    {
        return new AUnsubscribeStatement(
            cloneNode(this._handlerId_),
            cloneNode(this._portId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnsubscribeStatement(this);
    }

    public PName getHandlerId()
    {
        return this._handlerId_;
    }

    public void setHandlerId(PName node)
    {
        if(this._handlerId_ != null)
        {
            this._handlerId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._handlerId_ = node;
    }

    public PName getPortId()
    {
        return this._portId_;
    }

    public void setPortId(PName node)
    {
        if(this._portId_ != null)
        {
            this._portId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._portId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._handlerId_)
            + toString(this._portId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._handlerId_ == child)
        {
            this._handlerId_ = null;
            return;
        }

        if(this._portId_ == child)
        {
            this._portId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._handlerId_ == oldChild)
        {
            setHandlerId((PName) newChild);
            return;
        }

        if(this._portId_ == oldChild)
        {
            setPortId((PName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
