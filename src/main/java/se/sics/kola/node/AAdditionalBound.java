/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AAdditionalBound extends PAdditionalBound
{
    private TAmp _amp_;
    private PInterfaceType _interfaceType_;

    public AAdditionalBound()
    {
        // Constructor
    }

    public AAdditionalBound(
        @SuppressWarnings("hiding") TAmp _amp_,
        @SuppressWarnings("hiding") PInterfaceType _interfaceType_)
    {
        // Constructor
        setAmp(_amp_);

        setInterfaceType(_interfaceType_);

    }

    @Override
    public Object clone()
    {
        return new AAdditionalBound(
            cloneNode(this._amp_),
            cloneNode(this._interfaceType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdditionalBound(this);
    }

    public TAmp getAmp()
    {
        return this._amp_;
    }

    public void setAmp(TAmp node)
    {
        if(this._amp_ != null)
        {
            this._amp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._amp_ = node;
    }

    public PInterfaceType getInterfaceType()
    {
        return this._interfaceType_;
    }

    public void setInterfaceType(PInterfaceType node)
    {
        if(this._interfaceType_ != null)
        {
            this._interfaceType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interfaceType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._amp_)
            + toString(this._interfaceType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._amp_ == child)
        {
            this._amp_ = null;
            return;
        }

        if(this._interfaceType_ == child)
        {
            this._interfaceType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._amp_ == oldChild)
        {
            setAmp((TAmp) newChild);
            return;
        }

        if(this._interfaceType_ == oldChild)
        {
            setInterfaceType((PInterfaceType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
