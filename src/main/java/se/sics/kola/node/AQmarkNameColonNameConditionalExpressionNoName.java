/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AQmarkNameColonNameConditionalExpressionNoName extends PConditionalExpressionNoName
{
    private PConditionalOrExpressionNoName _conditionalOrExpressionNoName_;
    private TQmark _qmark_;
    private PName _name1_;
    private TColon _colon_;
    private PName _name2_;

    public AQmarkNameColonNameConditionalExpressionNoName()
    {
        // Constructor
    }

    public AQmarkNameColonNameConditionalExpressionNoName(
        @SuppressWarnings("hiding") PConditionalOrExpressionNoName _conditionalOrExpressionNoName_,
        @SuppressWarnings("hiding") TQmark _qmark_,
        @SuppressWarnings("hiding") PName _name1_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PName _name2_)
    {
        // Constructor
        setConditionalOrExpressionNoName(_conditionalOrExpressionNoName_);

        setQmark(_qmark_);

        setName1(_name1_);

        setColon(_colon_);

        setName2(_name2_);

    }

    @Override
    public Object clone()
    {
        return new AQmarkNameColonNameConditionalExpressionNoName(
            cloneNode(this._conditionalOrExpressionNoName_),
            cloneNode(this._qmark_),
            cloneNode(this._name1_),
            cloneNode(this._colon_),
            cloneNode(this._name2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQmarkNameColonNameConditionalExpressionNoName(this);
    }

    public PConditionalOrExpressionNoName getConditionalOrExpressionNoName()
    {
        return this._conditionalOrExpressionNoName_;
    }

    public void setConditionalOrExpressionNoName(PConditionalOrExpressionNoName node)
    {
        if(this._conditionalOrExpressionNoName_ != null)
        {
            this._conditionalOrExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalOrExpressionNoName_ = node;
    }

    public TQmark getQmark()
    {
        return this._qmark_;
    }

    public void setQmark(TQmark node)
    {
        if(this._qmark_ != null)
        {
            this._qmark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qmark_ = node;
    }

    public PName getName1()
    {
        return this._name1_;
    }

    public void setName1(PName node)
    {
        if(this._name1_ != null)
        {
            this._name1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name1_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PName getName2()
    {
        return this._name2_;
    }

    public void setName2(PName node)
    {
        if(this._name2_ != null)
        {
            this._name2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalOrExpressionNoName_)
            + toString(this._qmark_)
            + toString(this._name1_)
            + toString(this._colon_)
            + toString(this._name2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalOrExpressionNoName_ == child)
        {
            this._conditionalOrExpressionNoName_ = null;
            return;
        }

        if(this._qmark_ == child)
        {
            this._qmark_ = null;
            return;
        }

        if(this._name1_ == child)
        {
            this._name1_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._name2_ == child)
        {
            this._name2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalOrExpressionNoName_ == oldChild)
        {
            setConditionalOrExpressionNoName((PConditionalOrExpressionNoName) newChild);
            return;
        }

        if(this._qmark_ == oldChild)
        {
            setQmark((TQmark) newChild);
            return;
        }

        if(this._name1_ == oldChild)
        {
            setName1((PName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._name2_ == oldChild)
        {
            setName2((PName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
