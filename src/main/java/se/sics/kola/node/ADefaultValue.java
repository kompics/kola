/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ADefaultValue extends PDefaultValue
{
    private TDefaultKeyword _defaultKeyword_;
    private PElementValue _elementValue_;

    public ADefaultValue()
    {
        // Constructor
    }

    public ADefaultValue(
        @SuppressWarnings("hiding") TDefaultKeyword _defaultKeyword_,
        @SuppressWarnings("hiding") PElementValue _elementValue_)
    {
        // Constructor
        setDefaultKeyword(_defaultKeyword_);

        setElementValue(_elementValue_);

    }

    @Override
    public Object clone()
    {
        return new ADefaultValue(
            cloneNode(this._defaultKeyword_),
            cloneNode(this._elementValue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefaultValue(this);
    }

    public TDefaultKeyword getDefaultKeyword()
    {
        return this._defaultKeyword_;
    }

    public void setDefaultKeyword(TDefaultKeyword node)
    {
        if(this._defaultKeyword_ != null)
        {
            this._defaultKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._defaultKeyword_ = node;
    }

    public PElementValue getElementValue()
    {
        return this._elementValue_;
    }

    public void setElementValue(PElementValue node)
    {
        if(this._elementValue_ != null)
        {
            this._elementValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._defaultKeyword_)
            + toString(this._elementValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._defaultKeyword_ == child)
        {
            this._defaultKeyword_ = null;
            return;
        }

        if(this._elementValue_ == child)
        {
            this._elementValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._defaultKeyword_ == oldChild)
        {
            setDefaultKeyword((TDefaultKeyword) newChild);
            return;
        }

        if(this._elementValue_ == oldChild)
        {
            setElementValue((PElementValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
