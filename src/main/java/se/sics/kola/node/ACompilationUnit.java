/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ACompilationUnit extends PCompilationUnit
{
    private PPackageDeclaration _packageDeclaration_;
    private final LinkedList<PImportDeclaration> _importDeclaration_ = new LinkedList<PImportDeclaration>();
    private final LinkedList<PTypeDeclaration> _typeDeclaration_ = new LinkedList<PTypeDeclaration>();

    public ACompilationUnit()
    {
        // Constructor
    }

    public ACompilationUnit(
        @SuppressWarnings("hiding") PPackageDeclaration _packageDeclaration_,
        @SuppressWarnings("hiding") List<?> _importDeclaration_,
        @SuppressWarnings("hiding") List<?> _typeDeclaration_)
    {
        // Constructor
        setPackageDeclaration(_packageDeclaration_);

        setImportDeclaration(_importDeclaration_);

        setTypeDeclaration(_typeDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ACompilationUnit(
            cloneNode(this._packageDeclaration_),
            cloneList(this._importDeclaration_),
            cloneList(this._typeDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompilationUnit(this);
    }

    public PPackageDeclaration getPackageDeclaration()
    {
        return this._packageDeclaration_;
    }

    public void setPackageDeclaration(PPackageDeclaration node)
    {
        if(this._packageDeclaration_ != null)
        {
            this._packageDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._packageDeclaration_ = node;
    }

    public LinkedList<PImportDeclaration> getImportDeclaration()
    {
        return this._importDeclaration_;
    }

    public void setImportDeclaration(List<?> list)
    {
        for(PImportDeclaration e : this._importDeclaration_)
        {
            e.parent(null);
        }
        this._importDeclaration_.clear();

        for(Object obj_e : list)
        {
            PImportDeclaration e = (PImportDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._importDeclaration_.add(e);
        }
    }

    public LinkedList<PTypeDeclaration> getTypeDeclaration()
    {
        return this._typeDeclaration_;
    }

    public void setTypeDeclaration(List<?> list)
    {
        for(PTypeDeclaration e : this._typeDeclaration_)
        {
            e.parent(null);
        }
        this._typeDeclaration_.clear();

        for(Object obj_e : list)
        {
            PTypeDeclaration e = (PTypeDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._typeDeclaration_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._packageDeclaration_)
            + toString(this._importDeclaration_)
            + toString(this._typeDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._packageDeclaration_ == child)
        {
            this._packageDeclaration_ = null;
            return;
        }

        if(this._importDeclaration_.remove(child))
        {
            return;
        }

        if(this._typeDeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._packageDeclaration_ == oldChild)
        {
            setPackageDeclaration((PPackageDeclaration) newChild);
            return;
        }

        for(ListIterator<PImportDeclaration> i = this._importDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PImportDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PTypeDeclaration> i = this._typeDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
