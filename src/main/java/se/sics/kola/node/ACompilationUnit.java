/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ACompilationUnit extends PCompilationUnit
{
    private PPackageDeclaration _packageDeclaration_;
    private PImportDeclarations _importDeclarations_;
    private PTypeDeclarations _typeDeclarations_;

    public ACompilationUnit()
    {
        // Constructor
    }

    public ACompilationUnit(
        @SuppressWarnings("hiding") PPackageDeclaration _packageDeclaration_,
        @SuppressWarnings("hiding") PImportDeclarations _importDeclarations_,
        @SuppressWarnings("hiding") PTypeDeclarations _typeDeclarations_)
    {
        // Constructor
        setPackageDeclaration(_packageDeclaration_);

        setImportDeclarations(_importDeclarations_);

        setTypeDeclarations(_typeDeclarations_);

    }

    @Override
    public Object clone()
    {
        return new ACompilationUnit(
            cloneNode(this._packageDeclaration_),
            cloneNode(this._importDeclarations_),
            cloneNode(this._typeDeclarations_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompilationUnit(this);
    }

    public PPackageDeclaration getPackageDeclaration()
    {
        return this._packageDeclaration_;
    }

    public void setPackageDeclaration(PPackageDeclaration node)
    {
        if(this._packageDeclaration_ != null)
        {
            this._packageDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._packageDeclaration_ = node;
    }

    public PImportDeclarations getImportDeclarations()
    {
        return this._importDeclarations_;
    }

    public void setImportDeclarations(PImportDeclarations node)
    {
        if(this._importDeclarations_ != null)
        {
            this._importDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._importDeclarations_ = node;
    }

    public PTypeDeclarations getTypeDeclarations()
    {
        return this._typeDeclarations_;
    }

    public void setTypeDeclarations(PTypeDeclarations node)
    {
        if(this._typeDeclarations_ != null)
        {
            this._typeDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDeclarations_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._packageDeclaration_)
            + toString(this._importDeclarations_)
            + toString(this._typeDeclarations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._packageDeclaration_ == child)
        {
            this._packageDeclaration_ = null;
            return;
        }

        if(this._importDeclarations_ == child)
        {
            this._importDeclarations_ = null;
            return;
        }

        if(this._typeDeclarations_ == child)
        {
            this._typeDeclarations_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._packageDeclaration_ == oldChild)
        {
            setPackageDeclaration((PPackageDeclaration) newChild);
            return;
        }

        if(this._importDeclarations_ == oldChild)
        {
            setImportDeclarations((PImportDeclarations) newChild);
            return;
        }

        if(this._typeDeclarations_ == oldChild)
        {
            setTypeDeclarations((PTypeDeclarations) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
