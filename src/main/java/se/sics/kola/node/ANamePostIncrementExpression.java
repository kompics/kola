/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANamePostIncrementExpression extends PPostIncrementExpression
{
    private PName _name_;
    private TPlusPlus _plusPlus_;

    public ANamePostIncrementExpression()
    {
        // Constructor
    }

    public ANamePostIncrementExpression(
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TPlusPlus _plusPlus_)
    {
        // Constructor
        setName(_name_);

        setPlusPlus(_plusPlus_);

    }

    @Override
    public Object clone()
    {
        return new ANamePostIncrementExpression(
            cloneNode(this._name_),
            cloneNode(this._plusPlus_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANamePostIncrementExpression(this);
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TPlusPlus getPlusPlus()
    {
        return this._plusPlus_;
    }

    public void setPlusPlus(TPlusPlus node)
    {
        if(this._plusPlus_ != null)
        {
            this._plusPlus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plusPlus_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._plusPlus_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._plusPlus_ == child)
        {
            this._plusPlus_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._plusPlus_ == oldChild)
        {
            setPlusPlus((TPlusPlus) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
