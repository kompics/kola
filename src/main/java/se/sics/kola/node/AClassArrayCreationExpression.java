/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AClassArrayCreationExpression extends PArrayCreationExpression
{
    private TNewKeyword _newKeyword_;
    private PClassOrInterfaceType _classOrInterfaceType_;
    private PDimExprs _dimExprs_;
    private final LinkedList<PDim> _dim_ = new LinkedList<PDim>();

    public AClassArrayCreationExpression()
    {
        // Constructor
    }

    public AClassArrayCreationExpression(
        @SuppressWarnings("hiding") TNewKeyword _newKeyword_,
        @SuppressWarnings("hiding") PClassOrInterfaceType _classOrInterfaceType_,
        @SuppressWarnings("hiding") PDimExprs _dimExprs_,
        @SuppressWarnings("hiding") List<?> _dim_)
    {
        // Constructor
        setNewKeyword(_newKeyword_);

        setClassOrInterfaceType(_classOrInterfaceType_);

        setDimExprs(_dimExprs_);

        setDim(_dim_);

    }

    @Override
    public Object clone()
    {
        return new AClassArrayCreationExpression(
            cloneNode(this._newKeyword_),
            cloneNode(this._classOrInterfaceType_),
            cloneNode(this._dimExprs_),
            cloneList(this._dim_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassArrayCreationExpression(this);
    }

    public TNewKeyword getNewKeyword()
    {
        return this._newKeyword_;
    }

    public void setNewKeyword(TNewKeyword node)
    {
        if(this._newKeyword_ != null)
        {
            this._newKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newKeyword_ = node;
    }

    public PClassOrInterfaceType getClassOrInterfaceType()
    {
        return this._classOrInterfaceType_;
    }

    public void setClassOrInterfaceType(PClassOrInterfaceType node)
    {
        if(this._classOrInterfaceType_ != null)
        {
            this._classOrInterfaceType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classOrInterfaceType_ = node;
    }

    public PDimExprs getDimExprs()
    {
        return this._dimExprs_;
    }

    public void setDimExprs(PDimExprs node)
    {
        if(this._dimExprs_ != null)
        {
            this._dimExprs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dimExprs_ = node;
    }

    public LinkedList<PDim> getDim()
    {
        return this._dim_;
    }

    public void setDim(List<?> list)
    {
        for(PDim e : this._dim_)
        {
            e.parent(null);
        }
        this._dim_.clear();

        for(Object obj_e : list)
        {
            PDim e = (PDim) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._dim_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._newKeyword_)
            + toString(this._classOrInterfaceType_)
            + toString(this._dimExprs_)
            + toString(this._dim_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._newKeyword_ == child)
        {
            this._newKeyword_ = null;
            return;
        }

        if(this._classOrInterfaceType_ == child)
        {
            this._classOrInterfaceType_ = null;
            return;
        }

        if(this._dimExprs_ == child)
        {
            this._dimExprs_ = null;
            return;
        }

        if(this._dim_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._newKeyword_ == oldChild)
        {
            setNewKeyword((TNewKeyword) newChild);
            return;
        }

        if(this._classOrInterfaceType_ == oldChild)
        {
            setClassOrInterfaceType((PClassOrInterfaceType) newChild);
            return;
        }

        if(this._dimExprs_ == oldChild)
        {
            setDimExprs((PDimExprs) newChild);
            return;
        }

        for(ListIterator<PDim> i = this._dim_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDim) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
