/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AVariableVariableInitializersNoName extends PVariableInitializersNoName
{
    private PVariableInitializerNoName _variableInitializerNoName_;
    private final LinkedList<PVariableInitializersTail> _variableInitializersTail_ = new LinkedList<PVariableInitializersTail>();

    public AVariableVariableInitializersNoName()
    {
        // Constructor
    }

    public AVariableVariableInitializersNoName(
        @SuppressWarnings("hiding") PVariableInitializerNoName _variableInitializerNoName_,
        @SuppressWarnings("hiding") List<?> _variableInitializersTail_)
    {
        // Constructor
        setVariableInitializerNoName(_variableInitializerNoName_);

        setVariableInitializersTail(_variableInitializersTail_);

    }

    @Override
    public Object clone()
    {
        return new AVariableVariableInitializersNoName(
            cloneNode(this._variableInitializerNoName_),
            cloneList(this._variableInitializersTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableVariableInitializersNoName(this);
    }

    public PVariableInitializerNoName getVariableInitializerNoName()
    {
        return this._variableInitializerNoName_;
    }

    public void setVariableInitializerNoName(PVariableInitializerNoName node)
    {
        if(this._variableInitializerNoName_ != null)
        {
            this._variableInitializerNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableInitializerNoName_ = node;
    }

    public LinkedList<PVariableInitializersTail> getVariableInitializersTail()
    {
        return this._variableInitializersTail_;
    }

    public void setVariableInitializersTail(List<?> list)
    {
        for(PVariableInitializersTail e : this._variableInitializersTail_)
        {
            e.parent(null);
        }
        this._variableInitializersTail_.clear();

        for(Object obj_e : list)
        {
            PVariableInitializersTail e = (PVariableInitializersTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableInitializersTail_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variableInitializerNoName_)
            + toString(this._variableInitializersTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variableInitializerNoName_ == child)
        {
            this._variableInitializerNoName_ = null;
            return;
        }

        if(this._variableInitializersTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._variableInitializerNoName_ == oldChild)
        {
            setVariableInitializerNoName((PVariableInitializerNoName) newChild);
            return;
        }

        for(ListIterator<PVariableInitializersTail> i = this._variableInitializersTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableInitializersTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
