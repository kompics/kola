/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ACatchCatchType extends PCatchType
{
    private PClassType _classType_;
    private TBar _bar_;
    private PCatchType _catchType_;

    public ACatchCatchType()
    {
        // Constructor
    }

    public ACatchCatchType(
        @SuppressWarnings("hiding") PClassType _classType_,
        @SuppressWarnings("hiding") TBar _bar_,
        @SuppressWarnings("hiding") PCatchType _catchType_)
    {
        // Constructor
        setClassType(_classType_);

        setBar(_bar_);

        setCatchType(_catchType_);

    }

    @Override
    public Object clone()
    {
        return new ACatchCatchType(
            cloneNode(this._classType_),
            cloneNode(this._bar_),
            cloneNode(this._catchType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACatchCatchType(this);
    }

    public PClassType getClassType()
    {
        return this._classType_;
    }

    public void setClassType(PClassType node)
    {
        if(this._classType_ != null)
        {
            this._classType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classType_ = node;
    }

    public TBar getBar()
    {
        return this._bar_;
    }

    public void setBar(TBar node)
    {
        if(this._bar_ != null)
        {
            this._bar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bar_ = node;
    }

    public PCatchType getCatchType()
    {
        return this._catchType_;
    }

    public void setCatchType(PCatchType node)
    {
        if(this._catchType_ != null)
        {
            this._catchType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._catchType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classType_)
            + toString(this._bar_)
            + toString(this._catchType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classType_ == child)
        {
            this._classType_ = null;
            return;
        }

        if(this._bar_ == child)
        {
            this._bar_ = null;
            return;
        }

        if(this._catchType_ == child)
        {
            this._catchType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classType_ == oldChild)
        {
            setClassType((PClassType) newChild);
            return;
        }

        if(this._bar_ == oldChild)
        {
            setBar((TBar) newChild);
            return;
        }

        if(this._catchType_ == oldChild)
        {
            setCatchType((PCatchType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
