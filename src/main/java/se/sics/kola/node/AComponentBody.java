/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AComponentBody extends PComponentBody
{
    private final LinkedList<PComponentBodyDeclaration> _componentBodyDeclaration_ = new LinkedList<PComponentBodyDeclaration>();

    public AComponentBody()
    {
        // Constructor
    }

    public AComponentBody(
        @SuppressWarnings("hiding") List<?> _componentBodyDeclaration_)
    {
        // Constructor
        setComponentBodyDeclaration(_componentBodyDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AComponentBody(
            cloneList(this._componentBodyDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComponentBody(this);
    }

    public LinkedList<PComponentBodyDeclaration> getComponentBodyDeclaration()
    {
        return this._componentBodyDeclaration_;
    }

    public void setComponentBodyDeclaration(List<?> list)
    {
        for(PComponentBodyDeclaration e : this._componentBodyDeclaration_)
        {
            e.parent(null);
        }
        this._componentBodyDeclaration_.clear();

        for(Object obj_e : list)
        {
            PComponentBodyDeclaration e = (PComponentBodyDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._componentBodyDeclaration_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._componentBodyDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._componentBodyDeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PComponentBodyDeclaration> i = this._componentBodyDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComponentBodyDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
