/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ASubscribeStatement extends PSubscribeStatement
{
    private TSubscribeKeyword _subscribeKeyword_;
    private TIdentifier _handlerId_;
    private TRArrow _rArrow_;
    private TIdentifier _portId_;
    private TSemi _semi_;

    public ASubscribeStatement()
    {
        // Constructor
    }

    public ASubscribeStatement(
        @SuppressWarnings("hiding") TSubscribeKeyword _subscribeKeyword_,
        @SuppressWarnings("hiding") TIdentifier _handlerId_,
        @SuppressWarnings("hiding") TRArrow _rArrow_,
        @SuppressWarnings("hiding") TIdentifier _portId_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setSubscribeKeyword(_subscribeKeyword_);

        setHandlerId(_handlerId_);

        setRArrow(_rArrow_);

        setPortId(_portId_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new ASubscribeStatement(
            cloneNode(this._subscribeKeyword_),
            cloneNode(this._handlerId_),
            cloneNode(this._rArrow_),
            cloneNode(this._portId_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubscribeStatement(this);
    }

    public TSubscribeKeyword getSubscribeKeyword()
    {
        return this._subscribeKeyword_;
    }

    public void setSubscribeKeyword(TSubscribeKeyword node)
    {
        if(this._subscribeKeyword_ != null)
        {
            this._subscribeKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subscribeKeyword_ = node;
    }

    public TIdentifier getHandlerId()
    {
        return this._handlerId_;
    }

    public void setHandlerId(TIdentifier node)
    {
        if(this._handlerId_ != null)
        {
            this._handlerId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._handlerId_ = node;
    }

    public TRArrow getRArrow()
    {
        return this._rArrow_;
    }

    public void setRArrow(TRArrow node)
    {
        if(this._rArrow_ != null)
        {
            this._rArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rArrow_ = node;
    }

    public TIdentifier getPortId()
    {
        return this._portId_;
    }

    public void setPortId(TIdentifier node)
    {
        if(this._portId_ != null)
        {
            this._portId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._portId_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._subscribeKeyword_)
            + toString(this._handlerId_)
            + toString(this._rArrow_)
            + toString(this._portId_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._subscribeKeyword_ == child)
        {
            this._subscribeKeyword_ = null;
            return;
        }

        if(this._handlerId_ == child)
        {
            this._handlerId_ = null;
            return;
        }

        if(this._rArrow_ == child)
        {
            this._rArrow_ = null;
            return;
        }

        if(this._portId_ == child)
        {
            this._portId_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._subscribeKeyword_ == oldChild)
        {
            setSubscribeKeyword((TSubscribeKeyword) newChild);
            return;
        }

        if(this._handlerId_ == oldChild)
        {
            setHandlerId((TIdentifier) newChild);
            return;
        }

        if(this._rArrow_ == oldChild)
        {
            setRArrow((TRArrow) newChild);
            return;
        }

        if(this._portId_ == oldChild)
        {
            setPortId((TIdentifier) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
