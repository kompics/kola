/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AUshrTypeArguments extends PTypeArguments
{
    private final LinkedList<PTypeArgument> _ta1s_ = new LinkedList<PTypeArgument>();
    private PTypeDeclSpecifier _specifier1_;
    private final LinkedList<PTypeArgument> _ta2s_ = new LinkedList<PTypeArgument>();
    private PTypeDeclSpecifier _specifier2_;
    private final LinkedList<PTypeArgument> _ta3s_ = new LinkedList<PTypeArgument>();

    public AUshrTypeArguments()
    {
        // Constructor
    }

    public AUshrTypeArguments(
        @SuppressWarnings("hiding") List<?> _ta1s_,
        @SuppressWarnings("hiding") PTypeDeclSpecifier _specifier1_,
        @SuppressWarnings("hiding") List<?> _ta2s_,
        @SuppressWarnings("hiding") PTypeDeclSpecifier _specifier2_,
        @SuppressWarnings("hiding") List<?> _ta3s_)
    {
        // Constructor
        setTa1s(_ta1s_);

        setSpecifier1(_specifier1_);

        setTa2s(_ta2s_);

        setSpecifier2(_specifier2_);

        setTa3s(_ta3s_);

    }

    @Override
    public Object clone()
    {
        return new AUshrTypeArguments(
            cloneList(this._ta1s_),
            cloneNode(this._specifier1_),
            cloneList(this._ta2s_),
            cloneNode(this._specifier2_),
            cloneList(this._ta3s_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUshrTypeArguments(this);
    }

    public LinkedList<PTypeArgument> getTa1s()
    {
        return this._ta1s_;
    }

    public void setTa1s(List<?> list)
    {
        for(PTypeArgument e : this._ta1s_)
        {
            e.parent(null);
        }
        this._ta1s_.clear();

        for(Object obj_e : list)
        {
            PTypeArgument e = (PTypeArgument) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ta1s_.add(e);
        }
    }

    public PTypeDeclSpecifier getSpecifier1()
    {
        return this._specifier1_;
    }

    public void setSpecifier1(PTypeDeclSpecifier node)
    {
        if(this._specifier1_ != null)
        {
            this._specifier1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._specifier1_ = node;
    }

    public LinkedList<PTypeArgument> getTa2s()
    {
        return this._ta2s_;
    }

    public void setTa2s(List<?> list)
    {
        for(PTypeArgument e : this._ta2s_)
        {
            e.parent(null);
        }
        this._ta2s_.clear();

        for(Object obj_e : list)
        {
            PTypeArgument e = (PTypeArgument) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ta2s_.add(e);
        }
    }

    public PTypeDeclSpecifier getSpecifier2()
    {
        return this._specifier2_;
    }

    public void setSpecifier2(PTypeDeclSpecifier node)
    {
        if(this._specifier2_ != null)
        {
            this._specifier2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._specifier2_ = node;
    }

    public LinkedList<PTypeArgument> getTa3s()
    {
        return this._ta3s_;
    }

    public void setTa3s(List<?> list)
    {
        for(PTypeArgument e : this._ta3s_)
        {
            e.parent(null);
        }
        this._ta3s_.clear();

        for(Object obj_e : list)
        {
            PTypeArgument e = (PTypeArgument) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ta3s_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ta1s_)
            + toString(this._specifier1_)
            + toString(this._ta2s_)
            + toString(this._specifier2_)
            + toString(this._ta3s_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ta1s_.remove(child))
        {
            return;
        }

        if(this._specifier1_ == child)
        {
            this._specifier1_ = null;
            return;
        }

        if(this._ta2s_.remove(child))
        {
            return;
        }

        if(this._specifier2_ == child)
        {
            this._specifier2_ = null;
            return;
        }

        if(this._ta3s_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTypeArgument> i = this._ta1s_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeArgument) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._specifier1_ == oldChild)
        {
            setSpecifier1((PTypeDeclSpecifier) newChild);
            return;
        }

        for(ListIterator<PTypeArgument> i = this._ta2s_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeArgument) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._specifier2_ == oldChild)
        {
            setSpecifier2((PTypeDeclSpecifier) newChild);
            return;
        }

        for(ListIterator<PTypeArgument> i = this._ta3s_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeArgument) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
