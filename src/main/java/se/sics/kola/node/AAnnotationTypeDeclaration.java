/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AAnnotationTypeDeclaration extends PAnnotationTypeDeclaration
{
    private PModifiers _modifiers_;
    private TAt _at_;
    private TInterfaceKeyword _interfaceKeyword_;
    private TIdentifier _identifier_;
    private PAnnotationTypeBody _annotationTypeBody_;

    public AAnnotationTypeDeclaration()
    {
        // Constructor
    }

    public AAnnotationTypeDeclaration(
        @SuppressWarnings("hiding") PModifiers _modifiers_,
        @SuppressWarnings("hiding") TAt _at_,
        @SuppressWarnings("hiding") TInterfaceKeyword _interfaceKeyword_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PAnnotationTypeBody _annotationTypeBody_)
    {
        // Constructor
        setModifiers(_modifiers_);

        setAt(_at_);

        setInterfaceKeyword(_interfaceKeyword_);

        setIdentifier(_identifier_);

        setAnnotationTypeBody(_annotationTypeBody_);

    }

    @Override
    public Object clone()
    {
        return new AAnnotationTypeDeclaration(
            cloneNode(this._modifiers_),
            cloneNode(this._at_),
            cloneNode(this._interfaceKeyword_),
            cloneNode(this._identifier_),
            cloneNode(this._annotationTypeBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAnnotationTypeDeclaration(this);
    }

    public PModifiers getModifiers()
    {
        return this._modifiers_;
    }

    public void setModifiers(PModifiers node)
    {
        if(this._modifiers_ != null)
        {
            this._modifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifiers_ = node;
    }

    public TAt getAt()
    {
        return this._at_;
    }

    public void setAt(TAt node)
    {
        if(this._at_ != null)
        {
            this._at_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._at_ = node;
    }

    public TInterfaceKeyword getInterfaceKeyword()
    {
        return this._interfaceKeyword_;
    }

    public void setInterfaceKeyword(TInterfaceKeyword node)
    {
        if(this._interfaceKeyword_ != null)
        {
            this._interfaceKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interfaceKeyword_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PAnnotationTypeBody getAnnotationTypeBody()
    {
        return this._annotationTypeBody_;
    }

    public void setAnnotationTypeBody(PAnnotationTypeBody node)
    {
        if(this._annotationTypeBody_ != null)
        {
            this._annotationTypeBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotationTypeBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifiers_)
            + toString(this._at_)
            + toString(this._interfaceKeyword_)
            + toString(this._identifier_)
            + toString(this._annotationTypeBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifiers_ == child)
        {
            this._modifiers_ = null;
            return;
        }

        if(this._at_ == child)
        {
            this._at_ = null;
            return;
        }

        if(this._interfaceKeyword_ == child)
        {
            this._interfaceKeyword_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._annotationTypeBody_ == child)
        {
            this._annotationTypeBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifiers_ == oldChild)
        {
            setModifiers((PModifiers) newChild);
            return;
        }

        if(this._at_ == oldChild)
        {
            setAt((TAt) newChild);
            return;
        }

        if(this._interfaceKeyword_ == oldChild)
        {
            setInterfaceKeyword((TInterfaceKeyword) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._annotationTypeBody_ == oldChild)
        {
            setAnnotationTypeBody((PAnnotationTypeBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
