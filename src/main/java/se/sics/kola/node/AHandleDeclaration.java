/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AHandleDeclaration extends PHandleDeclaration
{
    private THandleKeyword _handleKeyword_;
    private TIdentifier _handlerId_;
    private TRArrow _rArrow_;
    private TIdentifier _portId_;
    private TColon _colon_;
    private PClassType _classType_;
    private TIdentifier _eventId_;
    private PBlock _block_;

    public AHandleDeclaration()
    {
        // Constructor
    }

    public AHandleDeclaration(
        @SuppressWarnings("hiding") THandleKeyword _handleKeyword_,
        @SuppressWarnings("hiding") TIdentifier _handlerId_,
        @SuppressWarnings("hiding") TRArrow _rArrow_,
        @SuppressWarnings("hiding") TIdentifier _portId_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PClassType _classType_,
        @SuppressWarnings("hiding") TIdentifier _eventId_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setHandleKeyword(_handleKeyword_);

        setHandlerId(_handlerId_);

        setRArrow(_rArrow_);

        setPortId(_portId_);

        setColon(_colon_);

        setClassType(_classType_);

        setEventId(_eventId_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AHandleDeclaration(
            cloneNode(this._handleKeyword_),
            cloneNode(this._handlerId_),
            cloneNode(this._rArrow_),
            cloneNode(this._portId_),
            cloneNode(this._colon_),
            cloneNode(this._classType_),
            cloneNode(this._eventId_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHandleDeclaration(this);
    }

    public THandleKeyword getHandleKeyword()
    {
        return this._handleKeyword_;
    }

    public void setHandleKeyword(THandleKeyword node)
    {
        if(this._handleKeyword_ != null)
        {
            this._handleKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._handleKeyword_ = node;
    }

    public TIdentifier getHandlerId()
    {
        return this._handlerId_;
    }

    public void setHandlerId(TIdentifier node)
    {
        if(this._handlerId_ != null)
        {
            this._handlerId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._handlerId_ = node;
    }

    public TRArrow getRArrow()
    {
        return this._rArrow_;
    }

    public void setRArrow(TRArrow node)
    {
        if(this._rArrow_ != null)
        {
            this._rArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rArrow_ = node;
    }

    public TIdentifier getPortId()
    {
        return this._portId_;
    }

    public void setPortId(TIdentifier node)
    {
        if(this._portId_ != null)
        {
            this._portId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._portId_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PClassType getClassType()
    {
        return this._classType_;
    }

    public void setClassType(PClassType node)
    {
        if(this._classType_ != null)
        {
            this._classType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classType_ = node;
    }

    public TIdentifier getEventId()
    {
        return this._eventId_;
    }

    public void setEventId(TIdentifier node)
    {
        if(this._eventId_ != null)
        {
            this._eventId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eventId_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._handleKeyword_)
            + toString(this._handlerId_)
            + toString(this._rArrow_)
            + toString(this._portId_)
            + toString(this._colon_)
            + toString(this._classType_)
            + toString(this._eventId_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._handleKeyword_ == child)
        {
            this._handleKeyword_ = null;
            return;
        }

        if(this._handlerId_ == child)
        {
            this._handlerId_ = null;
            return;
        }

        if(this._rArrow_ == child)
        {
            this._rArrow_ = null;
            return;
        }

        if(this._portId_ == child)
        {
            this._portId_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._classType_ == child)
        {
            this._classType_ = null;
            return;
        }

        if(this._eventId_ == child)
        {
            this._eventId_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._handleKeyword_ == oldChild)
        {
            setHandleKeyword((THandleKeyword) newChild);
            return;
        }

        if(this._handlerId_ == oldChild)
        {
            setHandlerId((TIdentifier) newChild);
            return;
        }

        if(this._rArrow_ == oldChild)
        {
            setRArrow((TRArrow) newChild);
            return;
        }

        if(this._portId_ == oldChild)
        {
            setPortId((TIdentifier) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._classType_ == oldChild)
        {
            setClassType((PClassType) newChild);
            return;
        }

        if(this._eventId_ == oldChild)
        {
            setEventId((TIdentifier) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
