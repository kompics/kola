/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANameEqEqualityExpressionNoName extends PEqualityExpressionNoName
{
    private PName _name_;
    private TEq _eq_;
    private PRelationalExpressionNoName _relationalExpressionNoName_;

    public ANameEqEqualityExpressionNoName()
    {
        // Constructor
    }

    public ANameEqEqualityExpressionNoName(
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TEq _eq_,
        @SuppressWarnings("hiding") PRelationalExpressionNoName _relationalExpressionNoName_)
    {
        // Constructor
        setName(_name_);

        setEq(_eq_);

        setRelationalExpressionNoName(_relationalExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new ANameEqEqualityExpressionNoName(
            cloneNode(this._name_),
            cloneNode(this._eq_),
            cloneNode(this._relationalExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANameEqEqualityExpressionNoName(this);
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TEq getEq()
    {
        return this._eq_;
    }

    public void setEq(TEq node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public PRelationalExpressionNoName getRelationalExpressionNoName()
    {
        return this._relationalExpressionNoName_;
    }

    public void setRelationalExpressionNoName(PRelationalExpressionNoName node)
    {
        if(this._relationalExpressionNoName_ != null)
        {
            this._relationalExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationalExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._eq_)
            + toString(this._relationalExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._relationalExpressionNoName_ == child)
        {
            this._relationalExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(this._relationalExpressionNoName_ == oldChild)
        {
            setRelationalExpressionNoName((PRelationalExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
