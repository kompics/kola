/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AConstantsEnumConstants extends PEnumConstants
{
    private PEnumConstants _enumConstants_;
    private TComma _comma_;
    private PEnumConstant _enumConstant_;

    public AConstantsEnumConstants()
    {
        // Constructor
    }

    public AConstantsEnumConstants(
        @SuppressWarnings("hiding") PEnumConstants _enumConstants_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PEnumConstant _enumConstant_)
    {
        // Constructor
        setEnumConstants(_enumConstants_);

        setComma(_comma_);

        setEnumConstant(_enumConstant_);

    }

    @Override
    public Object clone()
    {
        return new AConstantsEnumConstants(
            cloneNode(this._enumConstants_),
            cloneNode(this._comma_),
            cloneNode(this._enumConstant_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstantsEnumConstants(this);
    }

    public PEnumConstants getEnumConstants()
    {
        return this._enumConstants_;
    }

    public void setEnumConstants(PEnumConstants node)
    {
        if(this._enumConstants_ != null)
        {
            this._enumConstants_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumConstants_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PEnumConstant getEnumConstant()
    {
        return this._enumConstant_;
    }

    public void setEnumConstant(PEnumConstant node)
    {
        if(this._enumConstant_ != null)
        {
            this._enumConstant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumConstant_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._enumConstants_)
            + toString(this._comma_)
            + toString(this._enumConstant_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._enumConstants_ == child)
        {
            this._enumConstants_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._enumConstant_ == child)
        {
            this._enumConstant_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._enumConstants_ == oldChild)
        {
            setEnumConstants((PEnumConstants) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._enumConstant_ == oldChild)
        {
            setEnumConstant((PEnumConstant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
