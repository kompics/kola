/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDeclaration extends PMethodDeclaration
{
    private PMethodHeader _methodHeader_;
    private PMethodBody _methodBody_;

    public AMethodDeclaration()
    {
        // Constructor
    }

    public AMethodDeclaration(
        @SuppressWarnings("hiding") PMethodHeader _methodHeader_,
        @SuppressWarnings("hiding") PMethodBody _methodBody_)
    {
        // Constructor
        setMethodHeader(_methodHeader_);

        setMethodBody(_methodBody_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDeclaration(
            cloneNode(this._methodHeader_),
            cloneNode(this._methodBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDeclaration(this);
    }

    public PMethodHeader getMethodHeader()
    {
        return this._methodHeader_;
    }

    public void setMethodHeader(PMethodHeader node)
    {
        if(this._methodHeader_ != null)
        {
            this._methodHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodHeader_ = node;
    }

    public PMethodBody getMethodBody()
    {
        return this._methodBody_;
    }

    public void setMethodBody(PMethodBody node)
    {
        if(this._methodBody_ != null)
        {
            this._methodBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodHeader_)
            + toString(this._methodBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodHeader_ == child)
        {
            this._methodHeader_ = null;
            return;
        }

        if(this._methodBody_ == child)
        {
            this._methodBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodHeader_ == oldChild)
        {
            setMethodHeader((PMethodHeader) newChild);
            return;
        }

        if(this._methodBody_ == oldChild)
        {
            setMethodBody((PMethodBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
