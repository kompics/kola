/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AExprsDimExprs extends PDimExprs
{
    private PDimExprs _dimExprs_;
    private PDimExpr _dimExpr_;

    public AExprsDimExprs()
    {
        // Constructor
    }

    public AExprsDimExprs(
        @SuppressWarnings("hiding") PDimExprs _dimExprs_,
        @SuppressWarnings("hiding") PDimExpr _dimExpr_)
    {
        // Constructor
        setDimExprs(_dimExprs_);

        setDimExpr(_dimExpr_);

    }

    @Override
    public Object clone()
    {
        return new AExprsDimExprs(
            cloneNode(this._dimExprs_),
            cloneNode(this._dimExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprsDimExprs(this);
    }

    public PDimExprs getDimExprs()
    {
        return this._dimExprs_;
    }

    public void setDimExprs(PDimExprs node)
    {
        if(this._dimExprs_ != null)
        {
            this._dimExprs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dimExprs_ = node;
    }

    public PDimExpr getDimExpr()
    {
        return this._dimExpr_;
    }

    public void setDimExpr(PDimExpr node)
    {
        if(this._dimExpr_ != null)
        {
            this._dimExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dimExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dimExprs_)
            + toString(this._dimExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dimExprs_ == child)
        {
            this._dimExprs_ = null;
            return;
        }

        if(this._dimExpr_ == child)
        {
            this._dimExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dimExprs_ == oldChild)
        {
            setDimExprs((PDimExprs) newChild);
            return;
        }

        if(this._dimExpr_ == oldChild)
        {
            setDimExpr((PDimExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
