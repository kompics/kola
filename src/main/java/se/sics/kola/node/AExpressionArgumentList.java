/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionArgumentList extends PArgumentList
{
    private PExpressionNoName _expressionNoName_;
    private final LinkedList<PArgumentListTail> _argumentListTail_ = new LinkedList<PArgumentListTail>();

    public AExpressionArgumentList()
    {
        // Constructor
    }

    public AExpressionArgumentList(
        @SuppressWarnings("hiding") PExpressionNoName _expressionNoName_,
        @SuppressWarnings("hiding") List<?> _argumentListTail_)
    {
        // Constructor
        setExpressionNoName(_expressionNoName_);

        setArgumentListTail(_argumentListTail_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionArgumentList(
            cloneNode(this._expressionNoName_),
            cloneList(this._argumentListTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionArgumentList(this);
    }

    public PExpressionNoName getExpressionNoName()
    {
        return this._expressionNoName_;
    }

    public void setExpressionNoName(PExpressionNoName node)
    {
        if(this._expressionNoName_ != null)
        {
            this._expressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoName_ = node;
    }

    public LinkedList<PArgumentListTail> getArgumentListTail()
    {
        return this._argumentListTail_;
    }

    public void setArgumentListTail(List<?> list)
    {
        for(PArgumentListTail e : this._argumentListTail_)
        {
            e.parent(null);
        }
        this._argumentListTail_.clear();

        for(Object obj_e : list)
        {
            PArgumentListTail e = (PArgumentListTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._argumentListTail_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionNoName_)
            + toString(this._argumentListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionNoName_ == child)
        {
            this._expressionNoName_ = null;
            return;
        }

        if(this._argumentListTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionNoName_ == oldChild)
        {
            setExpressionNoName((PExpressionNoName) newChild);
            return;
        }

        for(ListIterator<PArgumentListTail> i = this._argumentListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgumentListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
