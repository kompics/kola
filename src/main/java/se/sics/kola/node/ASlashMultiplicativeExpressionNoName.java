/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ASlashMultiplicativeExpressionNoName extends PMultiplicativeExpressionNoName
{
    private PMultiplicativeExpressionNoName _multiplicativeExpressionNoName_;
    private TSlash _slash_;
    private PUnaryExpressionNoName _unaryExpressionNoName_;

    public ASlashMultiplicativeExpressionNoName()
    {
        // Constructor
    }

    public ASlashMultiplicativeExpressionNoName(
        @SuppressWarnings("hiding") PMultiplicativeExpressionNoName _multiplicativeExpressionNoName_,
        @SuppressWarnings("hiding") TSlash _slash_,
        @SuppressWarnings("hiding") PUnaryExpressionNoName _unaryExpressionNoName_)
    {
        // Constructor
        setMultiplicativeExpressionNoName(_multiplicativeExpressionNoName_);

        setSlash(_slash_);

        setUnaryExpressionNoName(_unaryExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new ASlashMultiplicativeExpressionNoName(
            cloneNode(this._multiplicativeExpressionNoName_),
            cloneNode(this._slash_),
            cloneNode(this._unaryExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASlashMultiplicativeExpressionNoName(this);
    }

    public PMultiplicativeExpressionNoName getMultiplicativeExpressionNoName()
    {
        return this._multiplicativeExpressionNoName_;
    }

    public void setMultiplicativeExpressionNoName(PMultiplicativeExpressionNoName node)
    {
        if(this._multiplicativeExpressionNoName_ != null)
        {
            this._multiplicativeExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeExpressionNoName_ = node;
    }

    public TSlash getSlash()
    {
        return this._slash_;
    }

    public void setSlash(TSlash node)
    {
        if(this._slash_ != null)
        {
            this._slash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._slash_ = node;
    }

    public PUnaryExpressionNoName getUnaryExpressionNoName()
    {
        return this._unaryExpressionNoName_;
    }

    public void setUnaryExpressionNoName(PUnaryExpressionNoName node)
    {
        if(this._unaryExpressionNoName_ != null)
        {
            this._unaryExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unaryExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiplicativeExpressionNoName_)
            + toString(this._slash_)
            + toString(this._unaryExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiplicativeExpressionNoName_ == child)
        {
            this._multiplicativeExpressionNoName_ = null;
            return;
        }

        if(this._slash_ == child)
        {
            this._slash_ = null;
            return;
        }

        if(this._unaryExpressionNoName_ == child)
        {
            this._unaryExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiplicativeExpressionNoName_ == oldChild)
        {
            setMultiplicativeExpressionNoName((PMultiplicativeExpressionNoName) newChild);
            return;
        }

        if(this._slash_ == oldChild)
        {
            setSlash((TSlash) newChild);
            return;
        }

        if(this._unaryExpressionNoName_ == oldChild)
        {
            setUnaryExpressionNoName((PUnaryExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
