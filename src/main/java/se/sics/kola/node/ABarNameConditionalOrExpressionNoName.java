/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ABarNameConditionalOrExpressionNoName extends PConditionalOrExpressionNoName
{
    private PConditionalOrExpressionNoName _conditionalOrExpressionNoName_;
    private TBarBar _barBar_;
    private PName _name_;

    public ABarNameConditionalOrExpressionNoName()
    {
        // Constructor
    }

    public ABarNameConditionalOrExpressionNoName(
        @SuppressWarnings("hiding") PConditionalOrExpressionNoName _conditionalOrExpressionNoName_,
        @SuppressWarnings("hiding") TBarBar _barBar_,
        @SuppressWarnings("hiding") PName _name_)
    {
        // Constructor
        setConditionalOrExpressionNoName(_conditionalOrExpressionNoName_);

        setBarBar(_barBar_);

        setName(_name_);

    }

    @Override
    public Object clone()
    {
        return new ABarNameConditionalOrExpressionNoName(
            cloneNode(this._conditionalOrExpressionNoName_),
            cloneNode(this._barBar_),
            cloneNode(this._name_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABarNameConditionalOrExpressionNoName(this);
    }

    public PConditionalOrExpressionNoName getConditionalOrExpressionNoName()
    {
        return this._conditionalOrExpressionNoName_;
    }

    public void setConditionalOrExpressionNoName(PConditionalOrExpressionNoName node)
    {
        if(this._conditionalOrExpressionNoName_ != null)
        {
            this._conditionalOrExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalOrExpressionNoName_ = node;
    }

    public TBarBar getBarBar()
    {
        return this._barBar_;
    }

    public void setBarBar(TBarBar node)
    {
        if(this._barBar_ != null)
        {
            this._barBar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._barBar_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionalOrExpressionNoName_)
            + toString(this._barBar_)
            + toString(this._name_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionalOrExpressionNoName_ == child)
        {
            this._conditionalOrExpressionNoName_ = null;
            return;
        }

        if(this._barBar_ == child)
        {
            this._barBar_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionalOrExpressionNoName_ == oldChild)
        {
            setConditionalOrExpressionNoName((PConditionalOrExpressionNoName) newChild);
            return;
        }

        if(this._barBar_ == oldChild)
        {
            setBarBar((TBarBar) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
