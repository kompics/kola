/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AMethodClassMemberDeclaration extends PClassMemberDeclaration
{
    private PMethodDeclaration _methodDeclaration_;

    public AMethodClassMemberDeclaration()
    {
        // Constructor
    }

    public AMethodClassMemberDeclaration(
        @SuppressWarnings("hiding") PMethodDeclaration _methodDeclaration_)
    {
        // Constructor
        setMethodDeclaration(_methodDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AMethodClassMemberDeclaration(
            cloneNode(this._methodDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodClassMemberDeclaration(this);
    }

    public PMethodDeclaration getMethodDeclaration()
    {
        return this._methodDeclaration_;
    }

    public void setMethodDeclaration(PMethodDeclaration node)
    {
        if(this._methodDeclaration_ != null)
        {
            this._methodDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodDeclaration_ == child)
        {
            this._methodDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodDeclaration_ == oldChild)
        {
            setMethodDeclaration((PMethodDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
