/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AEventDeclaration extends PEventDeclaration
{
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private TIdentifier _identifier_;
    private final LinkedList<PTypeParameter> _typeParameter_ = new LinkedList<PTypeParameter>();
    private PHeaderFields _headerFields_;
    private final LinkedList<PInterfaceType> _interfaceType_ = new LinkedList<PInterfaceType>();
    private PClassBody _classBody_;

    public AEventDeclaration()
    {
        // Constructor
    }

    public AEventDeclaration(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<?> _typeParameter_,
        @SuppressWarnings("hiding") PHeaderFields _headerFields_,
        @SuppressWarnings("hiding") List<?> _interfaceType_,
        @SuppressWarnings("hiding") PClassBody _classBody_)
    {
        // Constructor
        setModifier(_modifier_);

        setIdentifier(_identifier_);

        setTypeParameter(_typeParameter_);

        setHeaderFields(_headerFields_);

        setInterfaceType(_interfaceType_);

        setClassBody(_classBody_);

    }

    @Override
    public Object clone()
    {
        return new AEventDeclaration(
            cloneList(this._modifier_),
            cloneNode(this._identifier_),
            cloneList(this._typeParameter_),
            cloneNode(this._headerFields_),
            cloneList(this._interfaceType_),
            cloneNode(this._classBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEventDeclaration(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<?> list)
    {
        for(PModifier e : this._modifier_)
        {
            e.parent(null);
        }
        this._modifier_.clear();

        for(Object obj_e : list)
        {
            PModifier e = (PModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._modifier_.add(e);
        }
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PTypeParameter> getTypeParameter()
    {
        return this._typeParameter_;
    }

    public void setTypeParameter(List<?> list)
    {
        for(PTypeParameter e : this._typeParameter_)
        {
            e.parent(null);
        }
        this._typeParameter_.clear();

        for(Object obj_e : list)
        {
            PTypeParameter e = (PTypeParameter) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._typeParameter_.add(e);
        }
    }

    public PHeaderFields getHeaderFields()
    {
        return this._headerFields_;
    }

    public void setHeaderFields(PHeaderFields node)
    {
        if(this._headerFields_ != null)
        {
            this._headerFields_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._headerFields_ = node;
    }

    public LinkedList<PInterfaceType> getInterfaceType()
    {
        return this._interfaceType_;
    }

    public void setInterfaceType(List<?> list)
    {
        for(PInterfaceType e : this._interfaceType_)
        {
            e.parent(null);
        }
        this._interfaceType_.clear();

        for(Object obj_e : list)
        {
            PInterfaceType e = (PInterfaceType) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._interfaceType_.add(e);
        }
    }

    public PClassBody getClassBody()
    {
        return this._classBody_;
    }

    public void setClassBody(PClassBody node)
    {
        if(this._classBody_ != null)
        {
            this._classBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._identifier_)
            + toString(this._typeParameter_)
            + toString(this._headerFields_)
            + toString(this._interfaceType_)
            + toString(this._classBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._typeParameter_.remove(child))
        {
            return;
        }

        if(this._headerFields_ == child)
        {
            this._headerFields_ = null;
            return;
        }

        if(this._interfaceType_.remove(child))
        {
            return;
        }

        if(this._classBody_ == child)
        {
            this._classBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PTypeParameter> i = this._typeParameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._headerFields_ == oldChild)
        {
            setHeaderFields((PHeaderFields) newChild);
            return;
        }

        for(ListIterator<PInterfaceType> i = this._interfaceType_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInterfaceType) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._classBody_ == oldChild)
        {
            setClassBody((PClassBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
