/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AParametersFormalParameterList extends PFormalParameterList
{
    private final LinkedList<PFormalParameter> _formalParameter_ = new LinkedList<PFormalParameter>();
    private PLastFormalParameter _lastFormalParameter_;

    public AParametersFormalParameterList()
    {
        // Constructor
    }

    public AParametersFormalParameterList(
        @SuppressWarnings("hiding") List<?> _formalParameter_,
        @SuppressWarnings("hiding") PLastFormalParameter _lastFormalParameter_)
    {
        // Constructor
        setFormalParameter(_formalParameter_);

        setLastFormalParameter(_lastFormalParameter_);

    }

    @Override
    public Object clone()
    {
        return new AParametersFormalParameterList(
            cloneList(this._formalParameter_),
            cloneNode(this._lastFormalParameter_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParametersFormalParameterList(this);
    }

    public LinkedList<PFormalParameter> getFormalParameter()
    {
        return this._formalParameter_;
    }

    public void setFormalParameter(List<?> list)
    {
        for(PFormalParameter e : this._formalParameter_)
        {
            e.parent(null);
        }
        this._formalParameter_.clear();

        for(Object obj_e : list)
        {
            PFormalParameter e = (PFormalParameter) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._formalParameter_.add(e);
        }
    }

    public PLastFormalParameter getLastFormalParameter()
    {
        return this._lastFormalParameter_;
    }

    public void setLastFormalParameter(PLastFormalParameter node)
    {
        if(this._lastFormalParameter_ != null)
        {
            this._lastFormalParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lastFormalParameter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._formalParameter_)
            + toString(this._lastFormalParameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._formalParameter_.remove(child))
        {
            return;
        }

        if(this._lastFormalParameter_ == child)
        {
            this._lastFormalParameter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PFormalParameter> i = this._formalParameter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFormalParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._lastFormalParameter_ == oldChild)
        {
            setLastFormalParameter((PLastFormalParameter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
