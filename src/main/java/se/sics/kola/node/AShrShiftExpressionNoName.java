/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AShrShiftExpressionNoName extends PShiftExpressionNoName
{
    private PShiftExpressionNoName _shiftExpressionNoName_;
    private TShr _shr_;
    private PAdditiveExpressionNoName _additiveExpressionNoName_;

    public AShrShiftExpressionNoName()
    {
        // Constructor
    }

    public AShrShiftExpressionNoName(
        @SuppressWarnings("hiding") PShiftExpressionNoName _shiftExpressionNoName_,
        @SuppressWarnings("hiding") TShr _shr_,
        @SuppressWarnings("hiding") PAdditiveExpressionNoName _additiveExpressionNoName_)
    {
        // Constructor
        setShiftExpressionNoName(_shiftExpressionNoName_);

        setShr(_shr_);

        setAdditiveExpressionNoName(_additiveExpressionNoName_);

    }

    @Override
    public Object clone()
    {
        return new AShrShiftExpressionNoName(
            cloneNode(this._shiftExpressionNoName_),
            cloneNode(this._shr_),
            cloneNode(this._additiveExpressionNoName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShrShiftExpressionNoName(this);
    }

    public PShiftExpressionNoName getShiftExpressionNoName()
    {
        return this._shiftExpressionNoName_;
    }

    public void setShiftExpressionNoName(PShiftExpressionNoName node)
    {
        if(this._shiftExpressionNoName_ != null)
        {
            this._shiftExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftExpressionNoName_ = node;
    }

    public TShr getShr()
    {
        return this._shr_;
    }

    public void setShr(TShr node)
    {
        if(this._shr_ != null)
        {
            this._shr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shr_ = node;
    }

    public PAdditiveExpressionNoName getAdditiveExpressionNoName()
    {
        return this._additiveExpressionNoName_;
    }

    public void setAdditiveExpressionNoName(PAdditiveExpressionNoName node)
    {
        if(this._additiveExpressionNoName_ != null)
        {
            this._additiveExpressionNoName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpressionNoName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._shiftExpressionNoName_)
            + toString(this._shr_)
            + toString(this._additiveExpressionNoName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._shiftExpressionNoName_ == child)
        {
            this._shiftExpressionNoName_ = null;
            return;
        }

        if(this._shr_ == child)
        {
            this._shr_ = null;
            return;
        }

        if(this._additiveExpressionNoName_ == child)
        {
            this._additiveExpressionNoName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._shiftExpressionNoName_ == oldChild)
        {
            setShiftExpressionNoName((PShiftExpressionNoName) newChild);
            return;
        }

        if(this._shr_ == oldChild)
        {
            setShr((TShr) newChild);
            return;
        }

        if(this._additiveExpressionNoName_ == oldChild)
        {
            setAdditiveExpressionNoName((PAdditiveExpressionNoName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
