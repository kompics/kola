/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ATypeBound extends PTypeBound
{
    private TExtendsKeyword _extendsKeyword_;
    private PClassOrInterfaceType _classOrInterfaceType_;
    private PAdditionalBoundList _additionalBoundList_;

    public ATypeBound()
    {
        // Constructor
    }

    public ATypeBound(
        @SuppressWarnings("hiding") TExtendsKeyword _extendsKeyword_,
        @SuppressWarnings("hiding") PClassOrInterfaceType _classOrInterfaceType_,
        @SuppressWarnings("hiding") PAdditionalBoundList _additionalBoundList_)
    {
        // Constructor
        setExtendsKeyword(_extendsKeyword_);

        setClassOrInterfaceType(_classOrInterfaceType_);

        setAdditionalBoundList(_additionalBoundList_);

    }

    @Override
    public Object clone()
    {
        return new ATypeBound(
            cloneNode(this._extendsKeyword_),
            cloneNode(this._classOrInterfaceType_),
            cloneNode(this._additionalBoundList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeBound(this);
    }

    public TExtendsKeyword getExtendsKeyword()
    {
        return this._extendsKeyword_;
    }

    public void setExtendsKeyword(TExtendsKeyword node)
    {
        if(this._extendsKeyword_ != null)
        {
            this._extendsKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extendsKeyword_ = node;
    }

    public PClassOrInterfaceType getClassOrInterfaceType()
    {
        return this._classOrInterfaceType_;
    }

    public void setClassOrInterfaceType(PClassOrInterfaceType node)
    {
        if(this._classOrInterfaceType_ != null)
        {
            this._classOrInterfaceType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classOrInterfaceType_ = node;
    }

    public PAdditionalBoundList getAdditionalBoundList()
    {
        return this._additionalBoundList_;
    }

    public void setAdditionalBoundList(PAdditionalBoundList node)
    {
        if(this._additionalBoundList_ != null)
        {
            this._additionalBoundList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additionalBoundList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._extendsKeyword_)
            + toString(this._classOrInterfaceType_)
            + toString(this._additionalBoundList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._extendsKeyword_ == child)
        {
            this._extendsKeyword_ = null;
            return;
        }

        if(this._classOrInterfaceType_ == child)
        {
            this._classOrInterfaceType_ = null;
            return;
        }

        if(this._additionalBoundList_ == child)
        {
            this._additionalBoundList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._extendsKeyword_ == oldChild)
        {
            setExtendsKeyword((TExtendsKeyword) newChild);
            return;
        }

        if(this._classOrInterfaceType_ == oldChild)
        {
            setClassOrInterfaceType((PClassOrInterfaceType) newChild);
            return;
        }

        if(this._additionalBoundList_ == oldChild)
        {
            setAdditionalBoundList((PAdditionalBoundList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
