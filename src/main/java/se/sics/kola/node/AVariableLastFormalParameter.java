/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AVariableLastFormalParameter extends PLastFormalParameter
{
    private PModifiers _modifiers_;
    private PType _type_;
    private TDotDotDot _dotDotDot_;
    private PVariableDeclaratorId _variableDeclaratorId_;

    public AVariableLastFormalParameter()
    {
        // Constructor
    }

    public AVariableLastFormalParameter(
        @SuppressWarnings("hiding") PModifiers _modifiers_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TDotDotDot _dotDotDot_,
        @SuppressWarnings("hiding") PVariableDeclaratorId _variableDeclaratorId_)
    {
        // Constructor
        setModifiers(_modifiers_);

        setType(_type_);

        setDotDotDot(_dotDotDot_);

        setVariableDeclaratorId(_variableDeclaratorId_);

    }

    @Override
    public Object clone()
    {
        return new AVariableLastFormalParameter(
            cloneNode(this._modifiers_),
            cloneNode(this._type_),
            cloneNode(this._dotDotDot_),
            cloneNode(this._variableDeclaratorId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableLastFormalParameter(this);
    }

    public PModifiers getModifiers()
    {
        return this._modifiers_;
    }

    public void setModifiers(PModifiers node)
    {
        if(this._modifiers_ != null)
        {
            this._modifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifiers_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TDotDotDot getDotDotDot()
    {
        return this._dotDotDot_;
    }

    public void setDotDotDot(TDotDotDot node)
    {
        if(this._dotDotDot_ != null)
        {
            this._dotDotDot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dotDotDot_ = node;
    }

    public PVariableDeclaratorId getVariableDeclaratorId()
    {
        return this._variableDeclaratorId_;
    }

    public void setVariableDeclaratorId(PVariableDeclaratorId node)
    {
        if(this._variableDeclaratorId_ != null)
        {
            this._variableDeclaratorId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDeclaratorId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifiers_)
            + toString(this._type_)
            + toString(this._dotDotDot_)
            + toString(this._variableDeclaratorId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifiers_ == child)
        {
            this._modifiers_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._dotDotDot_ == child)
        {
            this._dotDotDot_ = null;
            return;
        }

        if(this._variableDeclaratorId_ == child)
        {
            this._variableDeclaratorId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifiers_ == oldChild)
        {
            setModifiers((PModifiers) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._dotDotDot_ == oldChild)
        {
            setDotDotDot((TDotDotDot) newChild);
            return;
        }

        if(this._variableDeclaratorId_ == oldChild)
        {
            setVariableDeclaratorId((PVariableDeclaratorId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
