/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ANewClassInstanceCreationExpression extends PClassInstanceCreationExpression
{
    private TNewKeyword _newKeyword_;
    private PTypeArguments _typeArguments_;
    private PTypeDeclSpecifier _typeDeclSpecifier_;
    private PTypeArgumentsOrDiamond _typeArgumentsOrDiamond_;
    private TLPar _lPar_;
    private PArgumentList _argumentList_;
    private TRPar _rPar_;
    private PClassBody _classBody_;

    public ANewClassInstanceCreationExpression()
    {
        // Constructor
    }

    public ANewClassInstanceCreationExpression(
        @SuppressWarnings("hiding") TNewKeyword _newKeyword_,
        @SuppressWarnings("hiding") PTypeArguments _typeArguments_,
        @SuppressWarnings("hiding") PTypeDeclSpecifier _typeDeclSpecifier_,
        @SuppressWarnings("hiding") PTypeArgumentsOrDiamond _typeArgumentsOrDiamond_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PClassBody _classBody_)
    {
        // Constructor
        setNewKeyword(_newKeyword_);

        setTypeArguments(_typeArguments_);

        setTypeDeclSpecifier(_typeDeclSpecifier_);

        setTypeArgumentsOrDiamond(_typeArgumentsOrDiamond_);

        setLPar(_lPar_);

        setArgumentList(_argumentList_);

        setRPar(_rPar_);

        setClassBody(_classBody_);

    }

    @Override
    public Object clone()
    {
        return new ANewClassInstanceCreationExpression(
            cloneNode(this._newKeyword_),
            cloneNode(this._typeArguments_),
            cloneNode(this._typeDeclSpecifier_),
            cloneNode(this._typeArgumentsOrDiamond_),
            cloneNode(this._lPar_),
            cloneNode(this._argumentList_),
            cloneNode(this._rPar_),
            cloneNode(this._classBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewClassInstanceCreationExpression(this);
    }

    public TNewKeyword getNewKeyword()
    {
        return this._newKeyword_;
    }

    public void setNewKeyword(TNewKeyword node)
    {
        if(this._newKeyword_ != null)
        {
            this._newKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newKeyword_ = node;
    }

    public PTypeArguments getTypeArguments()
    {
        return this._typeArguments_;
    }

    public void setTypeArguments(PTypeArguments node)
    {
        if(this._typeArguments_ != null)
        {
            this._typeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArguments_ = node;
    }

    public PTypeDeclSpecifier getTypeDeclSpecifier()
    {
        return this._typeDeclSpecifier_;
    }

    public void setTypeDeclSpecifier(PTypeDeclSpecifier node)
    {
        if(this._typeDeclSpecifier_ != null)
        {
            this._typeDeclSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDeclSpecifier_ = node;
    }

    public PTypeArgumentsOrDiamond getTypeArgumentsOrDiamond()
    {
        return this._typeArgumentsOrDiamond_;
    }

    public void setTypeArgumentsOrDiamond(PTypeArgumentsOrDiamond node)
    {
        if(this._typeArgumentsOrDiamond_ != null)
        {
            this._typeArgumentsOrDiamond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArgumentsOrDiamond_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PClassBody getClassBody()
    {
        return this._classBody_;
    }

    public void setClassBody(PClassBody node)
    {
        if(this._classBody_ != null)
        {
            this._classBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._newKeyword_)
            + toString(this._typeArguments_)
            + toString(this._typeDeclSpecifier_)
            + toString(this._typeArgumentsOrDiamond_)
            + toString(this._lPar_)
            + toString(this._argumentList_)
            + toString(this._rPar_)
            + toString(this._classBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._newKeyword_ == child)
        {
            this._newKeyword_ = null;
            return;
        }

        if(this._typeArguments_ == child)
        {
            this._typeArguments_ = null;
            return;
        }

        if(this._typeDeclSpecifier_ == child)
        {
            this._typeDeclSpecifier_ = null;
            return;
        }

        if(this._typeArgumentsOrDiamond_ == child)
        {
            this._typeArgumentsOrDiamond_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._classBody_ == child)
        {
            this._classBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._newKeyword_ == oldChild)
        {
            setNewKeyword((TNewKeyword) newChild);
            return;
        }

        if(this._typeArguments_ == oldChild)
        {
            setTypeArguments((PTypeArguments) newChild);
            return;
        }

        if(this._typeDeclSpecifier_ == oldChild)
        {
            setTypeDeclSpecifier((PTypeDeclSpecifier) newChild);
            return;
        }

        if(this._typeArgumentsOrDiamond_ == oldChild)
        {
            setTypeArgumentsOrDiamond((PTypeArgumentsOrDiamond) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._classBody_ == oldChild)
        {
            setClassBody((PClassBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
