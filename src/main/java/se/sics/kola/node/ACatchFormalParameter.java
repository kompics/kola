/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ACatchFormalParameter extends PCatchFormalParameter
{
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private final LinkedList<PClassType> _catchTypes_ = new LinkedList<PClassType>();
    private PVariableDeclaratorId _variableDeclaratorId_;

    public ACatchFormalParameter()
    {
        // Constructor
    }

    public ACatchFormalParameter(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") List<?> _catchTypes_,
        @SuppressWarnings("hiding") PVariableDeclaratorId _variableDeclaratorId_)
    {
        // Constructor
        setModifier(_modifier_);

        setCatchTypes(_catchTypes_);

        setVariableDeclaratorId(_variableDeclaratorId_);

    }

    @Override
    public Object clone()
    {
        return new ACatchFormalParameter(
            cloneList(this._modifier_),
            cloneList(this._catchTypes_),
            cloneNode(this._variableDeclaratorId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACatchFormalParameter(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<?> list)
    {
        for(PModifier e : this._modifier_)
        {
            e.parent(null);
        }
        this._modifier_.clear();

        for(Object obj_e : list)
        {
            PModifier e = (PModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._modifier_.add(e);
        }
    }

    public LinkedList<PClassType> getCatchTypes()
    {
        return this._catchTypes_;
    }

    public void setCatchTypes(List<?> list)
    {
        for(PClassType e : this._catchTypes_)
        {
            e.parent(null);
        }
        this._catchTypes_.clear();

        for(Object obj_e : list)
        {
            PClassType e = (PClassType) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._catchTypes_.add(e);
        }
    }

    public PVariableDeclaratorId getVariableDeclaratorId()
    {
        return this._variableDeclaratorId_;
    }

    public void setVariableDeclaratorId(PVariableDeclaratorId node)
    {
        if(this._variableDeclaratorId_ != null)
        {
            this._variableDeclaratorId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDeclaratorId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._catchTypes_)
            + toString(this._variableDeclaratorId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._catchTypes_.remove(child))
        {
            return;
        }

        if(this._variableDeclaratorId_ == child)
        {
            this._variableDeclaratorId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PClassType> i = this._catchTypes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassType) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._variableDeclaratorId_ == oldChild)
        {
            setVariableDeclaratorId((PVariableDeclaratorId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
