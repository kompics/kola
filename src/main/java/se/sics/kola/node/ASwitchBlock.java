/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import java.util.*;
import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class ASwitchBlock extends PSwitchBlock
{
    private final LinkedList<PSwitchBlockStatementGroup> _switchBlockStatementGroup_ = new LinkedList<PSwitchBlockStatementGroup>();
    private final LinkedList<PSwitchLabel> _switchLabel_ = new LinkedList<PSwitchLabel>();

    public ASwitchBlock()
    {
        // Constructor
    }

    public ASwitchBlock(
        @SuppressWarnings("hiding") List<?> _switchBlockStatementGroup_,
        @SuppressWarnings("hiding") List<?> _switchLabel_)
    {
        // Constructor
        setSwitchBlockStatementGroup(_switchBlockStatementGroup_);

        setSwitchLabel(_switchLabel_);

    }

    @Override
    public Object clone()
    {
        return new ASwitchBlock(
            cloneList(this._switchBlockStatementGroup_),
            cloneList(this._switchLabel_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchBlock(this);
    }

    public LinkedList<PSwitchBlockStatementGroup> getSwitchBlockStatementGroup()
    {
        return this._switchBlockStatementGroup_;
    }

    public void setSwitchBlockStatementGroup(List<?> list)
    {
        for(PSwitchBlockStatementGroup e : this._switchBlockStatementGroup_)
        {
            e.parent(null);
        }
        this._switchBlockStatementGroup_.clear();

        for(Object obj_e : list)
        {
            PSwitchBlockStatementGroup e = (PSwitchBlockStatementGroup) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._switchBlockStatementGroup_.add(e);
        }
    }

    public LinkedList<PSwitchLabel> getSwitchLabel()
    {
        return this._switchLabel_;
    }

    public void setSwitchLabel(List<?> list)
    {
        for(PSwitchLabel e : this._switchLabel_)
        {
            e.parent(null);
        }
        this._switchLabel_.clear();

        for(Object obj_e : list)
        {
            PSwitchLabel e = (PSwitchLabel) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._switchLabel_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._switchBlockStatementGroup_)
            + toString(this._switchLabel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._switchBlockStatementGroup_.remove(child))
        {
            return;
        }

        if(this._switchLabel_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PSwitchBlockStatementGroup> i = this._switchBlockStatementGroup_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSwitchBlockStatementGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PSwitchLabel> i = this._switchLabel_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSwitchLabel) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
