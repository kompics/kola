/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.sics.kola.node;

import se.sics.kola.analysis.*;

@SuppressWarnings("nls")
public final class AInterfaces extends PInterfaces
{
    private TImplementsKeyword _implementsKeyword_;
    private PInterfaceTypeList _interfaceTypeList_;

    public AInterfaces()
    {
        // Constructor
    }

    public AInterfaces(
        @SuppressWarnings("hiding") TImplementsKeyword _implementsKeyword_,
        @SuppressWarnings("hiding") PInterfaceTypeList _interfaceTypeList_)
    {
        // Constructor
        setImplementsKeyword(_implementsKeyword_);

        setInterfaceTypeList(_interfaceTypeList_);

    }

    @Override
    public Object clone()
    {
        return new AInterfaces(
            cloneNode(this._implementsKeyword_),
            cloneNode(this._interfaceTypeList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInterfaces(this);
    }

    public TImplementsKeyword getImplementsKeyword()
    {
        return this._implementsKeyword_;
    }

    public void setImplementsKeyword(TImplementsKeyword node)
    {
        if(this._implementsKeyword_ != null)
        {
            this._implementsKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._implementsKeyword_ = node;
    }

    public PInterfaceTypeList getInterfaceTypeList()
    {
        return this._interfaceTypeList_;
    }

    public void setInterfaceTypeList(PInterfaceTypeList node)
    {
        if(this._interfaceTypeList_ != null)
        {
            this._interfaceTypeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interfaceTypeList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._implementsKeyword_)
            + toString(this._interfaceTypeList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._implementsKeyword_ == child)
        {
            this._implementsKeyword_ = null;
            return;
        }

        if(this._interfaceTypeList_ == child)
        {
            this._interfaceTypeList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._implementsKeyword_ == oldChild)
        {
            setImplementsKeyword((TImplementsKeyword) newChild);
            return;
        }

        if(this._interfaceTypeList_ == oldChild)
        {
            setInterfaceTypeList((PInterfaceTypeList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
